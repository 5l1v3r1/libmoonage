#include <string>
#include <cstdint>
#include <cmath>
#include "common.h"
#include "recompiler.h"
using std::string;

bool Recompiler::recompile(uint inst, ulong pc) {
	if((inst & 0x7FE0FC00U) == 0x3A000000U) {
		if(ADCS(inst, pc)) return true;
	}
	if((inst & 0x7FE00000U) == 0x0B200000U) {
		if(ADD_extended_register(inst, pc)) return true;
	}
	if((inst & 0x7F800000U) == 0x11000000U) {
		if(ADD_immediate(inst, pc)) return true;
	}
	if((inst & 0x7F200000U) == 0x0B000000U) {
		if(ADD_shifted_register(inst, pc)) return true;
	}
	if((inst & 0xBF20FC00U) == 0x0E208400U) {
		if(ADD_vector(inst, pc)) return true;
	}
	if((inst & 0x7FE00000U) == 0x2B200000U) {
		if(ADDS_extended_register(inst, pc)) return true;
	}
	if((inst & 0x7F800000U) == 0x31000000U) {
		if(ADDS_immediate(inst, pc)) return true;
	}
	if((inst & 0x7F200000U) == 0x2B000000U) {
		if(ADDS_shifted_register(inst, pc)) return true;
	}
	if((inst & 0x9F000000U) == 0x10000000U) {
		if(ADR(inst, pc)) return true;
	}
	if((inst & 0x9F000000U) == 0x90000000U) {
		if(ADRP(inst, pc)) return true;
	}
	if((inst & 0x7F800000U) == 0x12000000U) {
		if(AND_immediate(inst, pc)) return true;
	}
	if((inst & 0x7F200000U) == 0x0A000000U) {
		if(AND_shifted_register(inst, pc)) return true;
	}
	if((inst & 0xBFE0FC00U) == 0x0E201C00U) {
		if(AND_vector(inst, pc)) return true;
	}
	if((inst & 0x7F200000U) == 0x6A000000U) {
		if(ANDS_shifted_register(inst, pc)) return true;
	}
	if((inst & 0x7F800000U) == 0x72000000U) {
		if(ANDS_immediate(inst, pc)) return true;
	}
	if((inst & 0x7FE0FC00U) == 0x1AC02800U) {
		if(ASRV(inst, pc)) return true;
	}
	if((inst & 0xFC000000U) == 0x14000000U) {
		if(B(inst, pc)) return true;
	}
	if((inst & 0xFF000010U) == 0x54000000U) {
		if(B_cond(inst, pc)) return true;
	}
	if((inst & 0x7F800000U) == 0x33000000U) {
		if(BFM(inst, pc)) return true;
	}
	if((inst & 0x7F200000U) == 0x0A200000U) {
		if(BIC(inst, pc)) return true;
	}
	if((inst & 0xBFE0FC00U) == 0x0E601C00U) {
		if(BIC_vector_register(inst, pc)) return true;
	}
	if((inst & 0x7F200000U) == 0x6A200000U) {
		if(BICS(inst, pc)) return true;
	}
	if((inst & 0xFC000000U) == 0x94000000U) {
		if(BL(inst, pc)) return true;
	}
	if((inst & 0xFFFFFC1FU) == 0xD63F0000U) {
		if(BLR(inst, pc)) return true;
	}
	if((inst & 0xFFFFFC1FU) == 0xD61F0000U) {
		if(BR(inst, pc)) return true;
	}
	if((inst & 0xFFE0001FU) == 0xD4200000U) {
		if(BRK(inst, pc)) return true;
	}
	if((inst & 0xBFE0FC00U) == 0x08207C00U) {
		if(CASP(inst, pc)) return true;
	}
	if((inst & 0xBFE0FC00U) == 0x08607C00U) {
		if(CASPA(inst, pc)) return true;
	}
	if((inst & 0xBFE0FC00U) == 0x0860FC00U) {
		if(CASPAL(inst, pc)) return true;
	}
	if((inst & 0xBFE0FC00U) == 0x0820FC00U) {
		if(CASPL(inst, pc)) return true;
	}
	if((inst & 0x7F000000U) == 0x35000000U) {
		if(CBNZ(inst, pc)) return true;
	}
	if((inst & 0x7F000000U) == 0x34000000U) {
		if(CBZ(inst, pc)) return true;
	}
	if((inst & 0x7FE00C10U) == 0x3A400800U) {
		if(CCMN_immediate(inst, pc)) return true;
	}
	if((inst & 0x7FE00C10U) == 0x7A400800U) {
		if(CCMP_immediate(inst, pc)) return true;
	}
	if((inst & 0x7FE00C10U) == 0x7A400000U) {
		if(CCMP_register(inst, pc)) return true;
	}
	if((inst & 0xFFFFF0FFU) == 0xD503305FU) {
		if(CLREX(inst, pc)) return true;
	}
	if((inst & 0x7FFFFC00U) == 0x5AC01000U) {
		if(CLZ(inst, pc)) return true;
	}
	if((inst & 0xFF20FC00U) == 0x7E208C00U) {
		if(CMEQ_register_scalar(inst, pc)) return true;
	}
	if((inst & 0xBF20FC00U) == 0x2E208C00U) {
		if(CMEQ_register_vector(inst, pc)) return true;
	}
	if((inst & 0xFF3FFC00U) == 0x5E209800U) {
		if(CMEQ_zero_scalar(inst, pc)) return true;
	}
	if((inst & 0xBF3FFC00U) == 0x0E209800U) {
		if(CMEQ_zero_vector(inst, pc)) return true;
	}
	if((inst & 0xBF3FFC00U) == 0x0E205800U) {
		if(CNT(inst, pc)) return true;
	}
	if((inst & 0x7FE00C00U) == 0x1A800000U) {
		if(CSEL(inst, pc)) return true;
	}
	if((inst & 0x7FE00C00U) == 0x1A800400U) {
		if(CSINC(inst, pc)) return true;
	}
	if((inst & 0x7FE00C00U) == 0x5A800000U) {
		if(CSINV(inst, pc)) return true;
	}
	if((inst & 0x7FE00C00U) == 0x5A800400U) {
		if(CSNEG(inst, pc)) return true;
	}
	if((inst & 0xFFFFF0FFU) == 0xD50330BFU) {
		if(DMB(inst, pc)) return true;
	}
	if((inst & 0xFFFFF0FFU) == 0xD503309FU) {
		if(DSB(inst, pc)) return true;
	}
	if((inst & 0xFFE0FC00U) == 0x5E000400U) {
		if(DUP_element_scalar(inst, pc)) return true;
	}
	if((inst & 0xBFE0FC00U) == 0x0E000400U) {
		if(DUP_element_vector(inst, pc)) return true;
	}
	if((inst & 0xBFE0FC00U) == 0x0E000C00U) {
		if(DUP_general(inst, pc)) return true;
	}
	if((inst & 0x7F200000U) == 0x4A200000U) {
		if(EON_shifted_register(inst, pc)) return true;
	}
	if((inst & 0x7F800000U) == 0x52000000U) {
		if(EOR_immediate(inst, pc)) return true;
	}
	if((inst & 0x7F200000U) == 0x4A000000U) {
		if(EOR_shifted_register(inst, pc)) return true;
	}
	if((inst & 0xBFE0FC00U) == 0x2E201C00U) {
		if(EOR_vector(inst, pc)) return true;
	}
	if((inst & 0xBFE08400U) == 0x2E000000U) {
		if(EXT(inst, pc)) return true;
	}
	if((inst & 0x7FA00000U) == 0x13800000U) {
		if(EXTR(inst, pc)) return true;
	}
	if((inst & 0xFFA0FC00U) == 0x7EA0D400U) {
		if(FABD_scalar(inst, pc)) return true;
	}
	if((inst & 0xFF3FFC00U) == 0x1E20C000U) {
		if(FABS_scalar(inst, pc)) return true;
	}
	if((inst & 0xBFBFFC00U) == 0x0EA0F800U) {
		if(FABS_vector(inst, pc)) return true;
	}
	if((inst & 0xFF20FC00U) == 0x1E202800U) {
		if(FADD_scalar(inst, pc)) return true;
	}
	if((inst & 0xBFA0FC00U) == 0x0E20D400U) {
		if(FADD_vector(inst, pc)) return true;
	}
	if((inst & 0xFFBFFC00U) == 0x7E30D800U) {
		if(FADDP_scalar(inst, pc)) return true;
	}
	if((inst & 0xBFA0FC00U) == 0x2E20D400U) {
		if(FADDP_vector(inst, pc)) return true;
	}
	if((inst & 0xFF200C10U) == 0x1E200400U) {
		if(FCCMP(inst, pc)) return true;
	}
	if((inst & 0x9F20F400U) == 0x0E20E400U) {
		if(FCMxx_register_vector(inst, pc)) return true;
	}
	if((inst & 0x9FBFEC00U) == 0x0EA0C800U) {
		if(FCMxx_zero_vector(inst, pc)) return true;
	}
	if((inst & 0xBFBFFC00U) == 0x0EA0E800U) {
		if(FCMLT_zero_vector(inst, pc)) return true;
	}
	if((inst & 0xFF20FC17U) == 0x1E202000U) {
		if(FCMP(inst, pc)) return true;
	}
	if((inst & 0xFF200C00U) == 0x1E200C00U) {
		if(FCSEL(inst, pc)) return true;
	}
	if((inst & 0xFF3E7C00U) == 0x1E224000U) {
		if(FCVT(inst, pc)) return true;
	}
	if((inst & 0x7F3FFC00U) == 0x1E240000U) {
		if(FCVTAS_scalar_integer(inst, pc)) return true;
	}
	if((inst & 0x7F3FFC00U) == 0x1E250000U) {
		if(FCVTAU_scalar_integer(inst, pc)) return true;
	}
	if((inst & 0xBFBFFC00U) == 0x0E217800U) {
		if(FCVTL_2_(inst, pc)) return true;
	}
	if((inst & 0x7F3FFC00U) == 0x1E300000U) {
		if(FCVTMS_scalar_integer(inst, pc)) return true;
	}
	if((inst & 0x7F3FFC00U) == 0x1E310000U) {
		if(FCVTMU_scalar_integer(inst, pc)) return true;
	}
	if((inst & 0xFFBFFC00U) == 0x0E216800U) {
		if(FCVTN(inst, pc)) return true;
	}
	if((inst & 0xFFBFFC00U) == 0x4E216800U) {
		if(FCVTN2(inst, pc)) return true;
	}
	if((inst & 0x7F3FFC00U) == 0x1E280000U) {
		if(FCVTPS_scalar_integer(inst, pc)) return true;
	}
	if((inst & 0x7F3FFC00U) == 0x1E290000U) {
		if(FCVTPU_scalar_integer(inst, pc)) return true;
	}
	if((inst & 0x7F3F0000U) == 0x1E180000U) {
		if(FCVTZS_scalar_fixedpoint(inst, pc)) return true;
	}
	if((inst & 0x7F3FFC00U) == 0x1E380000U) {
		if(FCVTZS_scalar_integer(inst, pc)) return true;
	}
	if((inst & 0x7F3F0000U) == 0x1E190000U) {
		if(FCVTZU_scalar_fixedpoint(inst, pc)) return true;
	}
	if((inst & 0x7F3FFC00U) == 0x1E390000U) {
		if(FCVTZU_scalar_integer(inst, pc)) return true;
	}
	if((inst & 0xFF20FC00U) == 0x1E201800U) {
		if(FDIV_scalar(inst, pc)) return true;
	}
	if((inst & 0xBFA0FC00U) == 0x2E20FC00U) {
		if(FDIV_vector(inst, pc)) return true;
	}
	if((inst & 0xFF208000U) == 0x1F000000U) {
		if(FMADD(inst, pc)) return true;
	}
	if((inst & 0xFF20FC00U) == 0x1E204800U) {
		if(FMAX_scalar(inst, pc)) return true;
	}
	if((inst & 0xFF20FC00U) == 0x1E206800U) {
		if(FMAXNM_scalar(inst, pc)) return true;
	}
	if((inst & 0xFF20FC00U) == 0x1E205800U) {
		if(FMIN_scalar(inst, pc)) return true;
	}
	if((inst & 0xFF20FC00U) == 0x1E207800U) {
		if(FMINNM_scalar(inst, pc)) return true;
	}
	if((inst & 0xBF80F400U) == 0x0F801000U) {
		if(FMLA_by_element_vector_spdp(inst, pc)) return true;
	}
	if((inst & 0xBFA0FC00U) == 0x0E20CC00U) {
		if(FMLA_vector(inst, pc)) return true;
	}
	if((inst & 0x7F36FC00U) == 0x1E260000U) {
		if(FMOV_general(inst, pc)) return true;
	}
	if((inst & 0xFF201FE0U) == 0x1E201000U) {
		if(FMOV_scalar_immediate(inst, pc)) return true;
	}
	if((inst & 0xBFF8FC00U) == 0x0F00F400U) {
		if(FMOV_vector_immediate_single(inst, pc)) return true;
	}
	if((inst & 0xFFF8FC00U) == 0x6F00F400U) {
		if(FMOV_vector_immediate_double(inst, pc)) return true;
	}
	if((inst & 0xFF208000U) == 0x1F008000U) {
		if(FMSUB(inst, pc)) return true;
	}
	if((inst & 0xFF80F400U) == 0x5F809000U) {
		if(FMUL_by_element_scalar_spdp(inst, pc)) return true;
	}
	if((inst & 0xBF80F400U) == 0x0F809000U) {
		if(FMUL_by_element_vector_spdp(inst, pc)) return true;
	}
	if((inst & 0xFF20FC00U) == 0x1E200800U) {
		if(FMUL_scalar(inst, pc)) return true;
	}
	if((inst & 0xBFA0FC00U) == 0x2E20DC00U) {
		if(FMUL_vector(inst, pc)) return true;
	}
	if((inst & 0xFF3FFC00U) == 0x1E214000U) {
		if(FNEG_scalar(inst, pc)) return true;
	}
	if((inst & 0xBFBFFC00U) == 0x2EA0F800U) {
		if(FNEG_vector(inst, pc)) return true;
	}
	if((inst & 0xFF208000U) == 0x1F200000U) {
		if(FNMADD(inst, pc)) return true;
	}
	if((inst & 0xFF208000U) == 0x1F208000U) {
		if(FNMSUB(inst, pc)) return true;
	}
	if((inst & 0xFF20FC00U) == 0x1E208800U) {
		if(FNMUL_scalar(inst, pc)) return true;
	}
	if((inst & 0xFF3FFC00U) == 0x1E264000U) {
		if(FRINTA_scalar(inst, pc)) return true;
	}
	if((inst & 0xFF3FFC00U) == 0x1E27C000U) {
		if(FRINTI_scalar(inst, pc)) return true;
	}
	if((inst & 0xFF3FFC00U) == 0x1E254000U) {
		if(FRINTM_scalar(inst, pc)) return true;
	}
	if((inst & 0xFF3FFC00U) == 0x1E24C000U) {
		if(FRINTP_scalar(inst, pc)) return true;
	}
	if((inst & 0xFF3FFC00U) == 0x1E274000U) {
		if(FRINTX_scalar(inst, pc)) return true;
	}
	if((inst & 0xFF3FFC00U) == 0x1E25C000U) {
		if(FRINTZ_scalar(inst, pc)) return true;
	}
	if((inst & 0xBFBFFC00U) == 0x2EA1D800U) {
		if(FRSQRTE_vector(inst, pc)) return true;
	}
	if((inst & 0xBFA0FC00U) == 0x0EA0FC00U) {
		if(FRSQRTS_vector(inst, pc)) return true;
	}
	if((inst & 0xFF3FFC00U) == 0x1E21C000U) {
		if(FSQRT_scalar(inst, pc)) return true;
	}
	if((inst & 0xFF20FC00U) == 0x1E203800U) {
		if(FSUB_scalar(inst, pc)) return true;
	}
	if((inst & 0xBFA0FC00U) == 0x0EA0D400U) {
		if(FSUB_vector(inst, pc)) return true;
	}
	if((inst & 0xFFE0FC00U) == 0x4E001C00U) {
		if(INS_general(inst, pc)) return true;
	}
	if((inst & 0xFFE08400U) == 0x6E000400U) {
		if(INS_vector(inst, pc)) return true;
	}
	if((inst & 0xBFFF2000U) == 0x0D400000U) {
		if(LD1_single_no_offset(inst, pc)) return true;
	}
	if((inst & 0xBFFFF000U) == 0x0C407000U) {
		if(LD1_multi_one_no_offset(inst, pc)) return true;
	}
	if((inst & 0xBFFFF000U) == 0x0D40C000U) {
		if(LD1R_single_no_offset(inst, pc)) return true;
	}
	if((inst & 0xBFE0F000U) == 0x0DC0C000U) {
		if(LD1R_single_postindex_immediate(inst, pc)) return true;
	}
	if((inst & 0xBFE0F000U) == 0x0DC0C000U) {
		if(LD1R_single_postindex_register(inst, pc)) return true;
	}
	if((inst & 0xBFFFF000U) == 0x0C408000U) {
		if(LD2_multi_no_offset(inst, pc)) return true;
	}
	if((inst & 0xBFE0F000U) == 0x0CC08000U) {
		if(LD2_multi_postindex_immediate(inst, pc)) return true;
	}
	if((inst & 0xBFE0F000U) == 0x0CC08000U) {
		if(LD2_multi_postindex_register(inst, pc)) return true;
	}
	if((inst & 0xBFFFF000U) == 0x0C404000U) {
		if(LD3_multi_no_offset(inst, pc)) return true;
	}
	if((inst & 0xBFE0F000U) == 0x0CC04000U) {
		if(LD3_multi_postindex_immediate(inst, pc)) return true;
	}
	if((inst & 0xBFE0F000U) == 0x0CC04000U) {
		if(LD3_multi_postindex_register(inst, pc)) return true;
	}
	if((inst & 0xBFFFF000U) == 0x0C400000U) {
		if(LD4_multi_no_offset(inst, pc)) return true;
	}
	if((inst & 0xBFE0F000U) == 0x0CC00000U) {
		if(LD4_multi_postindex_immediate(inst, pc)) return true;
	}
	if((inst & 0xBFE0F000U) == 0x0CC00000U) {
		if(LD4_multi_postindex_register(inst, pc)) return true;
	}
	if((inst & 0xBFFFFC00U) == 0x88DFFC00U) {
		if(LDAR(inst, pc)) return true;
	}
	if((inst & 0xFFFFFC00U) == 0x08DFFC00U) {
		if(LDARB(inst, pc)) return true;
	}
	if((inst & 0xFFFFFC00U) == 0x48DFFC00U) {
		if(LDARH(inst, pc)) return true;
	}
	if((inst & 0xBFFFFC00U) == 0x885FFC00U) {
		if(LDAXB(inst, pc)) return true;
	}
	if((inst & 0xFFFFFC00U) == 0x085FFC00U) {
		if(LDAXRB(inst, pc)) return true;
	}
	if((inst & 0xFFFFFC00U) == 0x485FFC00U) {
		if(LDAXRH(inst, pc)) return true;
	}
	if((inst & 0x7FC00000U) == 0x28C00000U) {
		if(LDP_immediate_postindex(inst, pc)) return true;
	}
	if((inst & 0x7FC00000U) == 0x29400000U) {
		if(LDP_immediate_signed_offset(inst, pc)) return true;
	}
	if((inst & 0x3FC00000U) == 0x2CC00000U) {
		if(LDP_simd_postindex(inst, pc)) return true;
	}
	if((inst & 0x3FC00000U) == 0x2DC00000U) {
		if(LDP_simd_preindex(inst, pc)) return true;
	}
	if((inst & 0x3FC00000U) == 0x2D400000U) {
		if(LDP_simd_signed_offset(inst, pc)) return true;
	}
	if((inst & 0xFFC00000U) == 0x69400000U) {
		if(LDPSW_immediate_signed_offset(inst, pc)) return true;
	}
	if((inst & 0xBFE00C00U) == 0xB8400C00U) {
		if(LDR_immediate_preindex(inst, pc)) return true;
	}
	if((inst & 0xBFE00C00U) == 0xB8400400U) {
		if(LDR_immediate_postindex(inst, pc)) return true;
	}
	if((inst & 0xBFC00000U) == 0xB9400000U) {
		if(LDR_immediate_unsigned_offset(inst, pc)) return true;
	}
	if((inst & 0xBF000000U) == 0x18000000U) {
		if(LDR_literal(inst, pc)) return true;
	}
	if((inst & 0x3F600C00U) == 0x3C400400U) {
		if(LDR_simd_immediate_postindex(inst, pc)) return true;
	}
	if((inst & 0x3F600C00U) == 0x3C400C00U) {
		if(LDR_simd_immediate_preindex(inst, pc)) return true;
	}
	if((inst & 0x3F400000U) == 0x3D400000U) {
		if(LDR_simd_immediate_unsigned_offset(inst, pc)) return true;
	}
	if((inst & 0x3F000000U) == 0x1C000000U) {
		if(LDR_simd_literal(inst, pc)) return true;
	}
	if((inst & 0x3F600C00U) == 0x3C600800U) {
		if(LDR_simd_register(inst, pc)) return true;
	}
	if((inst & 0xBFE00C00U) == 0xB8600800U) {
		if(LDR_register(inst, pc)) return true;
	}
	if((inst & 0xFFE00C00U) == 0x38400400U) {
		if(LDRB_immediate_postindex(inst, pc)) return true;
	}
	if((inst & 0xFFE00C00U) == 0x38400C00U) {
		if(LDRB_immediate_preindex(inst, pc)) return true;
	}
	if((inst & 0xFFC00000U) == 0x39400000U) {
		if(LDRB_immediate_unsigned_offset(inst, pc)) return true;
	}
	if((inst & 0xFFE00C00U) == 0x38600800U) {
		if(LDRB_register(inst, pc)) return true;
	}
	if((inst & 0xFFE00C00U) == 0x78400400U) {
		if(LDRH_immediate_postindex(inst, pc)) return true;
	}
	if((inst & 0xFFE00C00U) == 0x78400C00U) {
		if(LDRH_immediate_preindex(inst, pc)) return true;
	}
	if((inst & 0xFFC00000U) == 0x79400000U) {
		if(LDRH_immediate_unsigned_offset(inst, pc)) return true;
	}
	if((inst & 0xFFE00C00U) == 0x78600800U) {
		if(LDRH_register(inst, pc)) return true;
	}
	if((inst & 0xFFA00C00U) == 0x38800400U) {
		if(LDRSB_immediate_postindex(inst, pc)) return true;
	}
	if((inst & 0xFFA00C00U) == 0x38800C00U) {
		if(LDRSB_immediate_preindex(inst, pc)) return true;
	}
	if((inst & 0xFF800000U) == 0x39800000U) {
		if(LDRSB_immediate_unsigned_offset(inst, pc)) return true;
	}
	if((inst & 0xFFA00C00U) == 0x38A00800U) {
		if(LDRSB_register(inst, pc)) return true;
	}
	if((inst & 0xFFA00C00U) == 0x78800400U) {
		if(LDRSH_immediate_postindex(inst, pc)) return true;
	}
	if((inst & 0xFFA00C00U) == 0x78800C00U) {
		if(LDRSH_immediate_preindex(inst, pc)) return true;
	}
	if((inst & 0xFF800000U) == 0x79800000U) {
		if(LDRSH_immediate_unsigned_offset(inst, pc)) return true;
	}
	if((inst & 0xFFA00C00U) == 0x78A00800U) {
		if(LDRSH_register(inst, pc)) return true;
	}
	if((inst & 0xFFE00C00U) == 0xB8800400U) {
		if(LDRSW_immediate_postindex(inst, pc)) return true;
	}
	if((inst & 0xFFE00C00U) == 0xB8800C00U) {
		if(LDRSW_immediate_preindex(inst, pc)) return true;
	}
	if((inst & 0xFFC00000U) == 0xB9800000U) {
		if(LDRSW_immediate_unsigned_offset(inst, pc)) return true;
	}
	if((inst & 0xFF000000U) == 0x98000000U) {
		if(LDRSW_literal(inst, pc)) return true;
	}
	if((inst & 0xFFE00C00U) == 0xB8A00800U) {
		if(LDRSW_register(inst, pc)) return true;
	}
	if((inst & 0xBFE00C00U) == 0xB8400000U) {
		if(LDUR(inst, pc)) return true;
	}
	if((inst & 0xFFE00C00U) == 0x38400000U) {
		if(LDURB(inst, pc)) return true;
	}
	if((inst & 0xFFE00C00U) == 0x78400000U) {
		if(LDURH(inst, pc)) return true;
	}
	if((inst & 0xFFA00C00U) == 0x38800000U) {
		if(LDURSB(inst, pc)) return true;
	}
	if((inst & 0xFFA00C00U) == 0x78800000U) {
		if(LDURSH(inst, pc)) return true;
	}
	if((inst & 0xFFE00C00U) == 0xB8800000U) {
		if(LDURSW(inst, pc)) return true;
	}
	if((inst & 0x3F600C00U) == 0x3C400000U) {
		if(LDUR_simd(inst, pc)) return true;
	}
	if((inst & 0xBFFFFC00U) == 0x885F7C00U) {
		if(LDXR(inst, pc)) return true;
	}
	if((inst & 0xFFFFFC00U) == 0x085F7C00U) {
		if(LDXRB(inst, pc)) return true;
	}
	if((inst & 0xFFFFFC00U) == 0x485F7C00U) {
		if(LDXRH(inst, pc)) return true;
	}
	if((inst & 0x7FE0FC00U) == 0x1AC02000U) {
		if(LSL_register(inst, pc)) return true;
	}
	if((inst & 0x7FE0FC00U) == 0x1AC02400U) {
		if(LSRV(inst, pc)) return true;
	}
	if((inst & 0x7FE08000U) == 0x1B000000U) {
		if(MADD(inst, pc)) return true;
	}
	if((inst & 0xFFF8FC00U) == 0x2F00E400U) {
		if(MOVI_scalar_64bit(inst, pc)) return true;
	}
	if((inst & 0xBFF8FC00U) == 0x0F00E400U) {
		if(MOVI_vector_8bit(inst, pc)) return true;
	}
	if((inst & 0xBFF8DC00U) == 0x0F008400U) {
		if(MOVI_vector_16bit(inst, pc)) return true;
	}
	if((inst & 0xBFF89C00U) == 0x0F000400U) {
		if(MOVI_vector_32bit(inst, pc)) return true;
	}
	if((inst & 0xFFF8FC00U) == 0x6F00E400U) {
		if(MOVI_Vx_2D(inst, pc)) return true;
	}
	if((inst & 0x7F800000U) == 0x72800000U) {
		if(MOVK(inst, pc)) return true;
	}
	if((inst & 0x7F800000U) == 0x12800000U) {
		if(MOVN(inst, pc)) return true;
	}
	if((inst & 0x7F800000U) == 0x52800000U) {
		if(MOVZ(inst, pc)) return true;
	}
	if((inst & 0xFFF00000U) == 0xD5300000U) {
		if(MRS(inst, pc)) return true;
	}
	if((inst & 0xFFF00000U) == 0xD5100000U) {
		if(MSR_register(inst, pc)) return true;
	}
	if((inst & 0x7FE08000U) == 0x1B008000U) {
		if(MSUB(inst, pc)) return true;
	}
	if((inst & 0xBF00F400U) == 0x0F008000U) {
		if(MUL_by_element(inst, pc)) return true;
	}
	if((inst & 0xBF20FC00U) == 0x0E209C00U) {
		if(MUL_vector(inst, pc)) return true;
	}
	if((inst & 0xBF3FFC00U) == 0x2E20B800U) {
		if(NEG_vector(inst, pc)) return true;
	}
	if((inst & 0xFFFFFFFFU) == 0xD503201FU) {
		if(NOP(inst, pc)) return true;
	}
	if((inst & 0x7F200000U) == 0x2A200000U) {
		if(ORN_shifted_register(inst, pc)) return true;
	}
	if((inst & 0x7F800000U) == 0x32000000U) {
		if(ORR_immediate(inst, pc)) return true;
	}
	if((inst & 0x7F200000U) == 0x2A000000U) {
		if(ORR_shifted_register(inst, pc)) return true;
	}
	if((inst & 0xBFE0FC00U) == 0x0EA01C00U) {
		if(ORR_simd_register(inst, pc)) return true;
	}
	if((inst & 0xFFC00000U) == 0xF9800000U) {
		if(PRFM_immediate(inst, pc)) return true;
	}
	if((inst & 0x7FFFFC00U) == 0x5AC00000U) {
		if(RBIT(inst, pc)) return true;
	}
	if((inst & 0xFFFFFC1FU) == 0xD65F0000U) {
		if(RET(inst, pc)) return true;
	}
	if((inst & 0x7FFFF800U) == 0x5AC00800U) {
		if(REV(inst, pc)) return true;
	}
	if((inst & 0x7FFFFC00U) == 0x5AC00400U) {
		if(REV16(inst, pc)) return true;
	}
	if((inst & 0x7FE0FC00U) == 0x1AC02C00U) {
		if(RORV(inst, pc)) return true;
	}
	if((inst & 0x7FE0FC00U) == 0x7A000000U) {
		if(SBCS(inst, pc)) return true;
	}
	if((inst & 0x7F800000U) == 0x13000000U) {
		if(SBFM(inst, pc)) return true;
	}
	if((inst & 0x7F3FFC00U) == 0x1E220000U) {
		if(SCVTF_scalar_integer(inst, pc)) return true;
	}
	if((inst & 0xFFBFFC00U) == 0x5E21D800U) {
		if(SCVTF_scalar(inst, pc)) return true;
	}
	if((inst & 0xBFBFFC00U) == 0x0E21D800U) {
		if(SCVTF_vector(inst, pc)) return true;
	}
	if((inst & 0x7FE0FC00U) == 0x1AC00C00U) {
		if(SDIV(inst, pc)) return true;
	}
	if((inst & 0xBF80FC00U) == 0x0F005400U) {
		if(SHL_vector(inst, pc)) return true;
	}
	if((inst & 0xFFE08000U) == 0x9B200000U) {
		if(SMADDL(inst, pc)) return true;
	}
	if((inst & 0xFFE0FC00U) == 0x9B407C00U) {
		if(SMULH(inst, pc)) return true;
	}
	if((inst & 0xBF80FC00U) == 0x0F00A400U) {
		if(SSHLL(inst, pc)) return true;
	}
	if((inst & 0xBFFF2000U) == 0x0D000000U) {
		if(ST1_single_no_offset(inst, pc)) return true;
	}
	if((inst & 0xBFFFF000U) == 0x0C008000U) {
		if(ST2_multi_no_offset(inst, pc)) return true;
	}
	if((inst & 0xBFE0F000U) == 0x0C808000U) {
		if(ST2_multi_postindex_immediate(inst, pc)) return true;
	}
	if((inst & 0xBFE0F000U) == 0x0C808000U) {
		if(ST2_multi_postindex_register(inst, pc)) return true;
	}
	if((inst & 0xBFFFF000U) == 0x0C004000U) {
		if(ST3_multi_no_offset(inst, pc)) return true;
	}
	if((inst & 0xBFE0F000U) == 0x0C804000U) {
		if(ST3_multi_postindex_immediate(inst, pc)) return true;
	}
	if((inst & 0xBFE0F000U) == 0x0C804000U) {
		if(ST3_multi_postindex_register(inst, pc)) return true;
	}
	if((inst & 0xBFFFF000U) == 0x0C000000U) {
		if(ST4_multi_no_offset(inst, pc)) return true;
	}
	if((inst & 0xBFE0F000U) == 0x0C800000U) {
		if(ST4_multi_postindex_immediate(inst, pc)) return true;
	}
	if((inst & 0xBFE0F000U) == 0x0C800000U) {
		if(ST4_multi_postindex_register(inst, pc)) return true;
	}
	if((inst & 0xBFFFFC00U) == 0x889FFC00U) {
		if(STLR(inst, pc)) return true;
	}
	if((inst & 0xFFFFFC00U) == 0x089FFC00U) {
		if(STLRB(inst, pc)) return true;
	}
	if((inst & 0xFFFFFC00U) == 0x489FFC00U) {
		if(STLRH(inst, pc)) return true;
	}
	if((inst & 0xBFE0FC00U) == 0x8800FC00U) {
		if(STLXR(inst, pc)) return true;
	}
	if((inst & 0xFFE0FC00U) == 0x0800FC00U) {
		if(STLXRB(inst, pc)) return true;
	}
	if((inst & 0x7FC00000U) == 0x28800000U) {
		if(STP_postindex(inst, pc)) return true;
	}
	if((inst & 0x7FC00000U) == 0x29800000U) {
		if(STP_preindex(inst, pc)) return true;
	}
	if((inst & 0x7FC00000U) == 0x29000000U) {
		if(STP_signed_offset(inst, pc)) return true;
	}
	if((inst & 0x3FC00000U) == 0x2C800000U) {
		if(STP_simd_postindex(inst, pc)) return true;
	}
	if((inst & 0x3FC00000U) == 0x2D800000U) {
		if(STP_simd_preindex(inst, pc)) return true;
	}
	if((inst & 0x3FC00000U) == 0x2D000000U) {
		if(STP_simd_signed_offset(inst, pc)) return true;
	}
	if((inst & 0xBFE00C00U) == 0xB8000400U) {
		if(STR_immediate_postindex(inst, pc)) return true;
	}
	if((inst & 0xBFE00C00U) == 0xB8000C00U) {
		if(STR_immediate_preindex(inst, pc)) return true;
	}
	if((inst & 0xBFC00000U) == 0xB9000000U) {
		if(STR_immediate_unsigned_offset(inst, pc)) return true;
	}
	if((inst & 0xBFE00C00U) == 0xB8200800U) {
		if(STR_register(inst, pc)) return true;
	}
	if((inst & 0x3F600C00U) == 0x3C000400U) {
		if(STR_simd_postindex(inst, pc)) return true;
	}
	if((inst & 0x3F600C00U) == 0x3C000C00U) {
		if(STR_simd_preindex(inst, pc)) return true;
	}
	if((inst & 0x3F400000U) == 0x3D000000U) {
		if(STR_simd_unsigned_offset(inst, pc)) return true;
	}
	if((inst & 0x3F600C00U) == 0x3C200800U) {
		if(STR_simd_register(inst, pc)) return true;
	}
	if((inst & 0xFFE00C00U) == 0x38000400U) {
		if(STRB_immediate_postindex(inst, pc)) return true;
	}
	if((inst & 0xFFE00C00U) == 0x38000C00U) {
		if(STRB_immediate_preindex(inst, pc)) return true;
	}
	if((inst & 0xFFC00000U) == 0x39000000U) {
		if(STRB_immediate_unsigned_offset(inst, pc)) return true;
	}
	if((inst & 0xFFE00C00U) == 0x38200800U) {
		if(STRB_register(inst, pc)) return true;
	}
	if((inst & 0xFFE00C00U) == 0x78000400U) {
		if(STRH_immediate_postindex(inst, pc)) return true;
	}
	if((inst & 0xFFE00C00U) == 0x78000C00U) {
		if(STRH_immediate_preindex(inst, pc)) return true;
	}
	if((inst & 0xFFC00000U) == 0x79000000U) {
		if(STRH_immediate_unsigned_offset(inst, pc)) return true;
	}
	if((inst & 0xFFE00C00U) == 0x78200800U) {
		if(STRH_register(inst, pc)) return true;
	}
	if((inst & 0xBFE00C00U) == 0xB8000000U) {
		if(STUR(inst, pc)) return true;
	}
	if((inst & 0x3F600C00U) == 0x3C000000U) {
		if(STUR_simd(inst, pc)) return true;
	}
	if((inst & 0xFFE00C00U) == 0x38000000U) {
		if(STURB(inst, pc)) return true;
	}
	if((inst & 0xFFE00C00U) == 0x78000000U) {
		if(STURH(inst, pc)) return true;
	}
	if((inst & 0xBFE0FC00U) == 0x88007C00U) {
		if(STXR(inst, pc)) return true;
	}
	if((inst & 0x7F800000U) == 0x51000000U) {
		if(SUB_immediate(inst, pc)) return true;
	}
	if((inst & 0x7FE00000U) == 0x4B200000U) {
		if(SUB_extended_register(inst, pc)) return true;
	}
	if((inst & 0x7F200000U) == 0x4B000000U) {
		if(SUB_shifted_register(inst, pc)) return true;
	}
	if((inst & 0x7FE00000U) == 0x6B200000U) {
		if(SUBS_extended_register(inst, pc)) return true;
	}
	if((inst & 0x7F200000U) == 0x6B000000U) {
		if(SUBS_shifted_register(inst, pc)) return true;
	}
	if((inst & 0x7F800000U) == 0x71000000U) {
		if(SUBS_immediate(inst, pc)) return true;
	}
	if((inst & 0xFFE0001FU) == 0xD4000001U) {
		if(SVC(inst, pc)) return true;
	}
	if((inst & 0xFFF80000U) == 0xD5080000U) {
		if(SYS(inst, pc)) return true;
	}
	if((inst & 0x7F000000U) == 0x36000000U) {
		if(TBZ(inst, pc)) return true;
	}
	if((inst & 0x7F000000U) == 0x37000000U) {
		if(TBNZ(inst, pc)) return true;
	}
	if((inst & 0xBF3FFC00U) == 0x2E303800U) {
		if(UADDLV(inst, pc)) return true;
	}
	if((inst & 0xBF20FC00U) == 0x2E201000U) {
		if(UADDW_2_(inst, pc)) return true;
	}
	if((inst & 0x7F800000U) == 0x53000000U) {
		if(UBFM(inst, pc)) return true;
	}
	if((inst & 0x7F3FFC00U) == 0x1E230000U) {
		if(UCVTF_scalar_gpr_integer(inst, pc)) return true;
	}
	if((inst & 0xFFBFFC00U) == 0x7E21D800U) {
		if(UCVTF_scalar_integer(inst, pc)) return true;
	}
	if((inst & 0xBFBFFC00U) == 0x2E21D800U) {
		if(UCVTF_vector(inst, pc)) return true;
	}
	if((inst & 0x7FE0FC00U) == 0x1AC00800U) {
		if(UDIV(inst, pc)) return true;
	}
	if((inst & 0xFFE08000U) == 0x9BA00000U) {
		if(UMADDL(inst, pc)) return true;
	}
	if((inst & 0xFFE0FC00U) == 0x9BC07C00U) {
		if(UMULH(inst, pc)) return true;
	}
	if((inst & 0xBF20FC00U) == 0x2E204400U) {
		if(USHL_vector(inst, pc)) return true;
	}
	if((inst & 0xBF80FC00U) == 0x2F00A400U) {
		if(USHLL_vector(inst, pc)) return true;
	}
	if((inst & 0xFF3FFC00U) == 0x0E212800U) {
		if(XTN(inst, pc)) return true;
	}
	if((inst & 0xFF3FFC00U) == 0x4E212800U) {
		if(XTN2(inst, pc)) return true;
	}
	if((inst & 0xBF20BC00U) == 0x0E003800U) {
		if(ZIP(inst, pc)) return true;
	}

    return false;
}

/* ADCS */
bool Recompiler::ADCS(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (([=]() -> RuntimeValue<uint> {
					auto __macro_add_with_carry_set_nzcv_common_operand1 = ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((rn) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rn]()))))).Store();
					auto __macro_add_with_carry_set_nzcv_common_operand2 = ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))))).Store();
					auto __macro_add_with_carry_set_nzcv_common_carryIn = ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<bool>) (NZCV_CR)))).Store();
					auto bits = (int) (32);
					auto bits1 = (long) (((long) (int) (bits)) - ((long) (long) (0x1)));
					auto usum = ((RuntimeValue<uint>) (((RuntimeValue<uint>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) (RuntimeValue<uint>) (__macro_add_with_carry_set_nzcv_common_operand1)) + ((RuntimeValue<uint>) (RuntimeValue<uint>) (__macro_add_with_carry_set_nzcv_common_operand2))))) + ((RuntimeValue<uint>) (RuntimeValue<uint>) (__macro_add_with_carry_set_nzcv_common_carryIn)))).Store();
					auto ssum = ((RuntimeValue<int>) (((RuntimeValue<int>) (RuntimeValue<int>) ((RuntimeValue<int>) (((RuntimeValue<int>) (RuntimeValue<int>) ((RuntimeValue<int>) ((RuntimeValue<int>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((RuntimeValue<int>) (RuntimeValue<int>) ((RuntimeValue<int>) ((RuntimeValue<int>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((RuntimeValue<int>) (RuntimeValue<int>) ((RuntimeValue<int>) ((RuntimeValue<int>) (__macro_add_with_carry_set_nzcv_common_carryIn)))))).Store();
					NZCV_NR = (RuntimeValue<uint>) ((usum) >> (bits1));
					NZCV_ZR = (RuntimeValue<bool>) ((usum) == (0x0));
					NZCV_CR = (RuntimeValue<uint>) ((((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_carryIn)))))) >> (bits)))))) & ((RuntimeValue<ulong>) (0x1))));
					NZCV_VR = (RuntimeValue<bool>) ((((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<uint>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))) == ((RuntimeValue<uint>) ((__macro_add_with_carry_set_nzcv_common_operand2) >> (bits1)))))) & ((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<uint>) ((usum) >> (bits1))) != ((RuntimeValue<uint>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))))))));
					return (usum).Store();
				})()));
		} else {
			XR[(int) rd] = (RuntimeValue<ulong>) (([=]() -> RuntimeValue<ulong> {
					auto __macro_add_with_carry_set_nzcv_common_operand1 = ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]())))).Store();
					auto __macro_add_with_carry_set_nzcv_common_operand2 = ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())))).Store();
					auto __macro_add_with_carry_set_nzcv_common_carryIn = ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<bool>) (NZCV_CR)))).Store();
					auto bits = (int) (64);
					auto bits1 = (long) (((long) (int) (bits)) - ((long) (long) (0x1)));
					auto usum = ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_operand1)) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_operand2))))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_carryIn)))).Store();
					auto ssum = ((RuntimeValue<long>) (((RuntimeValue<long>) (RuntimeValue<long>) ((RuntimeValue<long>) (((RuntimeValue<long>) (RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<long>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((RuntimeValue<long>) (RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<long>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((RuntimeValue<long>) (RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<long>) (__macro_add_with_carry_set_nzcv_common_carryIn)))))).Store();
					NZCV_NR = (RuntimeValue<ulong>) ((usum) >> (bits1));
					NZCV_ZR = (RuntimeValue<bool>) ((usum) == (0x0));
					NZCV_CR = (RuntimeValue<uint>) ((((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<UInt128>) (((RuntimeValue<UInt128>) (((RuntimeValue<UInt128>) (RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) (((RuntimeValue<UInt128>) (RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((RuntimeValue<UInt128>) (RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((RuntimeValue<UInt128>) (RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) (__macro_add_with_carry_set_nzcv_common_carryIn)))))) >> (bits)))))) & ((RuntimeValue<ulong>) (0x1))));
					NZCV_VR = (RuntimeValue<bool>) ((((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<ulong>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))) == ((RuntimeValue<ulong>) ((__macro_add_with_carry_set_nzcv_common_operand2) >> (bits1)))))) & ((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<ulong>) ((usum) >> (bits1))) != ((RuntimeValue<ulong>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))))))));
					return (usum).Store();
				})());
		}
		return true;
	}
unimplemented:
	return false;
}

/* ADD-extended-register */
bool Recompiler::ADD_extended_register(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto option = (inst >> 13) & 0x7U;
		auto imm = (inst >> 10) & 0x7U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r1 = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto r2 = (string) (((bool) ((((byte) ((((ulong) (option)) & ((ulong) (0x3))))) == (0x3)) ? 1U : 0U) != 0) ? (string("X")) : (string("W")));
		auto extend = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? ((string) (([=](auto temp_575) -> string { switch(temp_575) { case 0x0: return string("UXTB"); case 0x1: return string("UXTH"); case 0x2: return string("LSL"); case 0x3: return string("UXTX"); case 0x4: return string("SXTB"); case 0x5: return string("SXTH"); case 0x6: return string("SXTW"); default: return string("SXTX"); } })(option))) : ((string) (([=](auto temp_576) -> string { switch(temp_576) { case 0x0: return string("UXTB"); case 0x1: return string("UXTH"); case 0x2: return string("UXTW"); case 0x3: return string("LSL"); case 0x4: return string("SXTB"); case 0x5: return string("SXTH"); case 0x6: return string("SXTW"); default: return string("SXTX"); } })(option))));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			auto m = ((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))).Store();
			if(rd == 31)
				SPR = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<uint>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) (([=](auto temp_577) -> RuntimeValue<uint> { switch(temp_577) { case 0x0: return (RuntimeValue<uint>) ((RuntimeValue<uint>) ((((RuntimeValue<ulong>) (m)) & ((RuntimeValue<ulong>) (0xFF))))); case 0x1: return (RuntimeValue<uint>) ((RuntimeValue<uint>) ((((RuntimeValue<ulong>) (m)) & ((RuntimeValue<ulong>) (0xFFFF))))); case 0x4: return (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<int>) (SignExtRuntime<int>((RuntimeValue<byte>) ((RuntimeValue<byte>) (m)), 8))))); case 0x5: return (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<int>) (SignExtRuntime<int>((RuntimeValue<ushort>) ((RuntimeValue<ushort>) (m)), 16))))); default: return m; } })(option))) << (imm))))));
			else
				XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<uint>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) (([=](auto temp_578) -> RuntimeValue<uint> { switch(temp_578) { case 0x0: return (RuntimeValue<uint>) ((RuntimeValue<uint>) ((((RuntimeValue<ulong>) (m)) & ((RuntimeValue<ulong>) (0xFF))))); case 0x1: return (RuntimeValue<uint>) ((RuntimeValue<uint>) ((((RuntimeValue<ulong>) (m)) & ((RuntimeValue<ulong>) (0xFFFF))))); case 0x4: return (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<int>) (SignExtRuntime<int>((RuntimeValue<byte>) ((RuntimeValue<byte>) (m)), 8))))); case 0x5: return (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<int>) (SignExtRuntime<int>((RuntimeValue<ushort>) ((RuntimeValue<ushort>) (m)), 16))))); default: return m; } })(option))) << (imm))))));
		} else {
			if(((bool) ((((byte) ((((ulong) (option)) & ((ulong) (0x3))))) == (0x3)) ? 1U : 0U)) != 0) {
				if(rd == 31)
					SPR = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())) << (imm)))));
				else
					XR[(int) rd] = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())) << (imm)))));
			} else {
				auto m = ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))))).Store();
				if(rd == 31)
					SPR = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (([=](auto temp_579) -> RuntimeValue<ulong> { switch(temp_579) { case 0x0: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((((RuntimeValue<ulong>) (m)) & ((RuntimeValue<ulong>) (0xFF))))); case 0x1: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((((RuntimeValue<ulong>) (m)) & ((RuntimeValue<ulong>) (0xFFFF))))); case 0x2: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((((RuntimeValue<ulong>) (m)) & ((RuntimeValue<ulong>) (0xFFFFFFFF))))); case 0x4: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (SignExtRuntime<long>((RuntimeValue<byte>) ((RuntimeValue<byte>) (m)), 8))))); case 0x5: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (SignExtRuntime<long>((RuntimeValue<ushort>) ((RuntimeValue<ushort>) (m)), 16))))); case 0x6: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (SignExtRuntime<long>((RuntimeValue<uint>) ((RuntimeValue<uint>) (m)), 32))))); default: return m; } })(option))) << (imm)))));
				else
					XR[(int) rd] = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (([=](auto temp_580) -> RuntimeValue<ulong> { switch(temp_580) { case 0x0: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((((RuntimeValue<ulong>) (m)) & ((RuntimeValue<ulong>) (0xFF))))); case 0x1: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((((RuntimeValue<ulong>) (m)) & ((RuntimeValue<ulong>) (0xFFFF))))); case 0x2: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((((RuntimeValue<ulong>) (m)) & ((RuntimeValue<ulong>) (0xFFFFFFFF))))); case 0x4: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (SignExtRuntime<long>((RuntimeValue<byte>) ((RuntimeValue<byte>) (m)), 8))))); case 0x5: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (SignExtRuntime<long>((RuntimeValue<ushort>) ((RuntimeValue<ushort>) (m)), 16))))); case 0x6: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (SignExtRuntime<long>((RuntimeValue<uint>) ((RuntimeValue<uint>) (m)), 32))))); default: return m; } })(option))) << (imm)))));
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* ADD-immediate */
bool Recompiler::ADD_immediate(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto sh = (inst >> 22) & 0x1U;
		auto imm = (inst >> 10) & 0xFFFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto shift = (long) (((bool) (((sh) == (0x0)) ? 1U : 0U) != 0) ? (0x0) : (0xC));
		auto simm = (uint) (((uint) ((uint) (imm))) << (uint) (shift));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			if(rd == 31)
				SPR = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<uint>) (RuntimeValue<uint>) (simm))));
			else
				XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<uint>) (RuntimeValue<uint>) (simm))));
		} else {
			if(rd == 31)
				SPR = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<uint>) (simm)));
			else
				XR[(int) rd] = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<uint>) (simm)));
		}
		return true;
	}
unimplemented:
	return false;
}

/* ADD-shifted-register */
bool Recompiler::ADD_shifted_register(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto shift = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto imm = (inst >> 10) & 0x3FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto shiftstr = (string) (([=](auto temp_581) -> string { switch(temp_581) { case 0x0: return string("LSL"); case 0x1: return string("LSR"); case 0x2: return string("ASR"); default: return string("ROR"); } })(shift));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			if(rd == 31)
				SPR = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<uint>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (([=](auto temp_582) -> RuntimeValue<uint> { switch(temp_582) { case 0x0: return (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((rm) == 31 ? SPR() : XR[(int) rm]())))) << (imm))); case 0x1: return (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) ((rm) == 31 ? SPR() : XR[(int) rm]())) >> (imm))); case 0x2: return (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<int>) (((RuntimeValue<int>) ((RuntimeValue<int>) ((RuntimeValue<uint>) ((rm) == 31 ? SPR() : XR[(int) rm]())))) >> (imm))))); default: return (RuntimeValue<uint>) ((((RuntimeValue<uint>) ((rm) == 31 ? SPR() : XR[(int) rm]())) << ((RuntimeValue<uint>) (32 - (imm)))) | (((RuntimeValue<uint>) ((rm) == 31 ? SPR() : XR[(int) rm]())) >> ((RuntimeValue<uint>) (imm)))); } })(shift))))));
			else
				XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<uint>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (([=](auto temp_583) -> RuntimeValue<uint> { switch(temp_583) { case 0x0: return (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((rm) == 31 ? SPR() : XR[(int) rm]())))) << (imm))); case 0x1: return (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) ((rm) == 31 ? SPR() : XR[(int) rm]())) >> (imm))); case 0x2: return (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<int>) (((RuntimeValue<int>) ((RuntimeValue<int>) ((RuntimeValue<uint>) ((rm) == 31 ? SPR() : XR[(int) rm]())))) >> (imm))))); default: return (RuntimeValue<uint>) ((((RuntimeValue<uint>) ((rm) == 31 ? SPR() : XR[(int) rm]())) << ((RuntimeValue<uint>) (32 - (imm)))) | (((RuntimeValue<uint>) ((rm) == 31 ? SPR() : XR[(int) rm]())) >> ((RuntimeValue<uint>) (imm)))); } })(shift))))));
		} else {
			if(rd == 31)
				SPR = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (([=](auto temp_584) -> RuntimeValue<ulong> { switch(temp_584) { case 0x0: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rm) == 31 ? SPR() : XR[(int) rm]())))) << (imm))); case 0x1: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((rm) == 31 ? SPR() : XR[(int) rm]())) >> (imm))); case 0x2: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (((RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<ulong>) ((rm) == 31 ? SPR() : XR[(int) rm]())))) >> (imm))))); default: return (RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((rm) == 31 ? SPR() : XR[(int) rm]())) << ((RuntimeValue<uint>) (64 - (imm)))) | (((RuntimeValue<ulong>) ((rm) == 31 ? SPR() : XR[(int) rm]())) >> ((RuntimeValue<uint>) (imm)))); } })(shift)))));
			else
				XR[(int) rd] = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (([=](auto temp_585) -> RuntimeValue<ulong> { switch(temp_585) { case 0x0: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rm) == 31 ? SPR() : XR[(int) rm]())))) << (imm))); case 0x1: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((rm) == 31 ? SPR() : XR[(int) rm]())) >> (imm))); case 0x2: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (((RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<ulong>) ((rm) == 31 ? SPR() : XR[(int) rm]())))) >> (imm))))); default: return (RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((rm) == 31 ? SPR() : XR[(int) rm]())) << ((RuntimeValue<uint>) (64 - (imm)))) | (((RuntimeValue<ulong>) ((rm) == 31 ? SPR() : XR[(int) rm]())) >> ((RuntimeValue<uint>) (imm)))); } })(shift)))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* ADD-vector */
bool Recompiler::ADD_vector(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto ts = (string) (([=](auto temp_586) -> string { switch(temp_586) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))));
		auto v = ((RuntimeValue<Vector128<float>>) (([=](auto temp_587) -> RuntimeValue<Vector128<float>> { switch(temp_587) { case 0x0: return (RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<byte>>) ((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])) + ((RuntimeValue<Vector128<byte>>) ((RuntimeValue<Vector128<float>>) (VR[(int) (rm)])))))); case 0x1: return (RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<ushort>>) ((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])) + ((RuntimeValue<Vector128<ushort>>) ((RuntimeValue<Vector128<float>>) (VR[(int) (rm)])))))); case 0x2: return (RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<uint>>) ((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])) + ((RuntimeValue<Vector128<uint>>) ((RuntimeValue<Vector128<float>>) (VR[(int) (rm)])))))); case 0x3: return (RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<ulong>>) ((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])) + ((RuntimeValue<Vector128<ulong>>) ((RuntimeValue<Vector128<float>>) (VR[(int) (rm)])))))); default: throw "Not implemented"; } })(size))).Store();
		VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) ((Q) != 0 ? (v) : ((RuntimeValue<Vector128<float>>) (v)));
		return true;
	}
unimplemented:
	return false;
}

/* ADDS-extended-register */
bool Recompiler::ADDS_extended_register(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto option = (inst >> 13) & 0x7U;
		auto imm = (inst >> 10) & 0x7U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r1 = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto r2 = (string) (((bool) ((((byte) ((((ulong) (option)) & ((ulong) (0x3))))) == (0x3)) ? 1U : 0U) != 0) ? (string("X")) : (string("W")));
		auto extend = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? ((string) (([=](auto temp_588) -> string { switch(temp_588) { case 0x0: return string("UXTB"); case 0x1: return string("UXTH"); case 0x2: return string("LSL"); case 0x3: return string("UXTX"); case 0x4: return string("SXTB"); case 0x5: return string("SXTH"); case 0x6: return string("SXTW"); default: return string("SXTX"); } })(option))) : ((string) (([=](auto temp_589) -> string { switch(temp_589) { case 0x0: return string("UXTB"); case 0x1: return string("UXTH"); case 0x2: return string("UXTW"); case 0x3: return string("LSL"); case 0x4: return string("SXTB"); case 0x5: return string("SXTH"); case 0x6: return string("SXTW"); default: return string("SXTX"); } })(option))));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			auto m = ((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))).Store();
			XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (([=]() -> RuntimeValue<uint> {
					auto __macro_add_with_carry_set_nzcv_common_operand1 = ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((rn) == 31 ? SPR() : XR[(int) rn]())))).Store();
					auto __macro_add_with_carry_set_nzcv_common_operand2 = ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) (~((RuntimeValue<uint>) (((RuntimeValue<uint>) (([=](auto temp_590) -> RuntimeValue<uint> { switch(temp_590) { case 0x0: return (RuntimeValue<uint>) ((RuntimeValue<uint>) ((((RuntimeValue<ulong>) (m)) & ((RuntimeValue<ulong>) (0xFF))))); case 0x1: return (RuntimeValue<uint>) ((RuntimeValue<uint>) ((((RuntimeValue<ulong>) (m)) & ((RuntimeValue<ulong>) (0xFFFF))))); case 0x4: return (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<int>) (SignExtRuntime<int>((RuntimeValue<byte>) ((RuntimeValue<byte>) (m)), 8))))); case 0x5: return (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<int>) (SignExtRuntime<int>((RuntimeValue<ushort>) ((RuntimeValue<ushort>) (m)), 16))))); default: return m; } })(option))) << (imm))))))).Store();
					auto __macro_add_with_carry_set_nzcv_common_carryIn = (uint) ((uint) (0x1));
					auto bits = (int) (32);
					auto bits1 = (long) (((long) (int) (bits)) - ((long) (long) (0x1)));
					auto usum = ((RuntimeValue<uint>) (((RuntimeValue<uint>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) (RuntimeValue<uint>) (__macro_add_with_carry_set_nzcv_common_operand1)) + ((RuntimeValue<uint>) (RuntimeValue<uint>) (__macro_add_with_carry_set_nzcv_common_operand2))))) + ((RuntimeValue<uint>) (RuntimeValue<uint>) (__macro_add_with_carry_set_nzcv_common_carryIn)))).Store();
					auto ssum = ((RuntimeValue<int>) (((RuntimeValue<int>) (RuntimeValue<int>) ((RuntimeValue<int>) (((RuntimeValue<int>) (RuntimeValue<int>) ((RuntimeValue<int>) ((RuntimeValue<int>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((RuntimeValue<int>) (RuntimeValue<int>) ((RuntimeValue<int>) ((RuntimeValue<int>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((RuntimeValue<int>) (RuntimeValue<int>) ((int) ((int) (__macro_add_with_carry_set_nzcv_common_carryIn)))))).Store();
					NZCV_NR = (RuntimeValue<uint>) ((usum) >> (bits1));
					NZCV_ZR = (RuntimeValue<bool>) ((usum) == (0x0));
					NZCV_CR = (RuntimeValue<uint>) ((((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((ulong) ((ulong) (__macro_add_with_carry_set_nzcv_common_carryIn)))))) >> (bits)))))) & ((RuntimeValue<ulong>) (0x1))));
					NZCV_VR = (RuntimeValue<bool>) ((((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<uint>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))) == ((RuntimeValue<uint>) ((__macro_add_with_carry_set_nzcv_common_operand2) >> (bits1)))))) & ((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<uint>) ((usum) >> (bits1))) != ((RuntimeValue<uint>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))))))));
					return (usum).Store();
				})()));
		} else {
			if(((bool) ((((byte) ((((ulong) (option)) & ((ulong) (0x3))))) == (0x3)) ? 1U : 0U)) != 0) {
				XR[(int) rd] = (RuntimeValue<ulong>) (([=]() -> RuntimeValue<ulong> {
						auto __macro_add_with_carry_set_nzcv_common_operand1 = ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]())))).Store();
						auto __macro_add_with_carry_set_nzcv_common_operand2 = ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())) << (imm))))).Store();
						auto __macro_add_with_carry_set_nzcv_common_carryIn = (ulong) ((ulong) (0x0));
						auto bits = (int) (64);
						auto bits1 = (long) (((long) (int) (bits)) - ((long) (long) (0x1)));
						auto usum = ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_operand1)) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_operand2))))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_carryIn)))).Store();
						auto ssum = ((RuntimeValue<long>) (((RuntimeValue<long>) (RuntimeValue<long>) ((RuntimeValue<long>) (((RuntimeValue<long>) (RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<long>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((RuntimeValue<long>) (RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<long>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((RuntimeValue<long>) (RuntimeValue<long>) ((long) ((long) (__macro_add_with_carry_set_nzcv_common_carryIn)))))).Store();
						NZCV_NR = (RuntimeValue<ulong>) ((usum) >> (bits1));
						NZCV_ZR = (RuntimeValue<bool>) ((usum) == (0x0));
						NZCV_CR = (RuntimeValue<uint>) ((((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<UInt128>) (((RuntimeValue<UInt128>) (((RuntimeValue<UInt128>) (RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) (((RuntimeValue<UInt128>) (RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((RuntimeValue<UInt128>) (RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((RuntimeValue<UInt128>) (RuntimeValue<UInt128>) ((UInt128) ((UInt128) (__macro_add_with_carry_set_nzcv_common_carryIn)))))) >> (bits)))))) & ((RuntimeValue<ulong>) (0x1))));
						NZCV_VR = (RuntimeValue<bool>) ((((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<ulong>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))) == ((RuntimeValue<ulong>) ((__macro_add_with_carry_set_nzcv_common_operand2) >> (bits1)))))) & ((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<ulong>) ((usum) >> (bits1))) != ((RuntimeValue<ulong>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))))))));
						return (usum).Store();
					})());
			} else {
				auto m = ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))))).Store();
				XR[(int) rd] = (RuntimeValue<ulong>) (([=]() -> RuntimeValue<ulong> {
						auto __macro_add_with_carry_set_nzcv_common_operand1 = ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]())))).Store();
						auto __macro_add_with_carry_set_nzcv_common_operand2 = ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (([=](auto temp_591) -> RuntimeValue<ulong> { switch(temp_591) { case 0x0: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((((RuntimeValue<ulong>) (m)) & ((RuntimeValue<ulong>) (0xFF))))); case 0x1: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((((RuntimeValue<ulong>) (m)) & ((RuntimeValue<ulong>) (0xFFFF))))); case 0x2: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((((RuntimeValue<ulong>) (m)) & ((RuntimeValue<ulong>) (0xFFFFFFFF))))); case 0x4: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (SignExtRuntime<long>((RuntimeValue<byte>) ((RuntimeValue<byte>) (m)), 8))))); case 0x5: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (SignExtRuntime<long>((RuntimeValue<ushort>) ((RuntimeValue<ushort>) (m)), 16))))); case 0x6: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (SignExtRuntime<long>(m, 64))))); default: return m; } })(option))) << (imm))))).Store();
						auto __macro_add_with_carry_set_nzcv_common_carryIn = (ulong) ((ulong) (0x0));
						auto bits = (int) (64);
						auto bits1 = (long) (((long) (int) (bits)) - ((long) (long) (0x1)));
						auto usum = ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_operand1)) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_operand2))))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_carryIn)))).Store();
						auto ssum = ((RuntimeValue<long>) (((RuntimeValue<long>) (RuntimeValue<long>) ((RuntimeValue<long>) (((RuntimeValue<long>) (RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<long>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((RuntimeValue<long>) (RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<long>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((RuntimeValue<long>) (RuntimeValue<long>) ((long) ((long) (__macro_add_with_carry_set_nzcv_common_carryIn)))))).Store();
						NZCV_NR = (RuntimeValue<ulong>) ((usum) >> (bits1));
						NZCV_ZR = (RuntimeValue<bool>) ((usum) == (0x0));
						NZCV_CR = (RuntimeValue<uint>) ((((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<UInt128>) (((RuntimeValue<UInt128>) (((RuntimeValue<UInt128>) (RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) (((RuntimeValue<UInt128>) (RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((RuntimeValue<UInt128>) (RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((RuntimeValue<UInt128>) (RuntimeValue<UInt128>) ((UInt128) ((UInt128) (__macro_add_with_carry_set_nzcv_common_carryIn)))))) >> (bits)))))) & ((RuntimeValue<ulong>) (0x1))));
						NZCV_VR = (RuntimeValue<bool>) ((((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<ulong>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))) == ((RuntimeValue<ulong>) ((__macro_add_with_carry_set_nzcv_common_operand2) >> (bits1)))))) & ((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<ulong>) ((usum) >> (bits1))) != ((RuntimeValue<ulong>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))))))));
						return (usum).Store();
					})());
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* ADDS-immediate */
bool Recompiler::ADDS_immediate(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto sh = (inst >> 22) & 0x1U;
		auto imm = (inst >> 10) & 0xFFFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto shift = (long) (((bool) (((sh) == (0x0)) ? 1U : 0U) != 0) ? (0x0) : (0xC));
		auto simm = (uint) (((uint) ((uint) (imm))) << (uint) (shift));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (([=]() -> RuntimeValue<uint> {
					auto __macro_add_with_carry_set_nzcv_common_operand1 = ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((rn) == 31 ? SPR() : XR[(int) rn]())))).Store();
					auto __macro_add_with_carry_set_nzcv_common_operand2 = (uint) ((uint) (simm));
					auto __macro_add_with_carry_set_nzcv_common_carryIn = (uint) ((uint) (0x0));
					auto bits = (int) (32);
					auto bits1 = (long) (((long) (int) (bits)) - ((long) (long) (0x1)));
					auto usum = ((RuntimeValue<uint>) (((RuntimeValue<uint>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) (RuntimeValue<uint>) (__macro_add_with_carry_set_nzcv_common_operand1)) + ((RuntimeValue<uint>) (RuntimeValue<uint>) (__macro_add_with_carry_set_nzcv_common_operand2))))) + ((RuntimeValue<uint>) (RuntimeValue<uint>) (__macro_add_with_carry_set_nzcv_common_carryIn)))).Store();
					auto ssum = ((RuntimeValue<int>) (((RuntimeValue<int>) (RuntimeValue<int>) ((RuntimeValue<int>) (((RuntimeValue<int>) (RuntimeValue<int>) ((RuntimeValue<int>) ((RuntimeValue<int>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((RuntimeValue<int>) (RuntimeValue<int>) ((int) ((int) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((RuntimeValue<int>) (RuntimeValue<int>) ((int) ((int) (__macro_add_with_carry_set_nzcv_common_carryIn)))))).Store();
					NZCV_NR = (RuntimeValue<uint>) ((usum) >> (bits1));
					NZCV_ZR = (RuntimeValue<bool>) ((usum) == (0x0));
					NZCV_CR = (RuntimeValue<uint>) ((((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((ulong) ((ulong) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((ulong) ((ulong) (__macro_add_with_carry_set_nzcv_common_carryIn)))))) >> (bits)))))) & ((RuntimeValue<ulong>) (0x1))));
					NZCV_VR = (RuntimeValue<bool>) ((((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<uint>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))) == ((uint) ((__macro_add_with_carry_set_nzcv_common_operand2) >> (uint) (bits1)))))) & ((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<uint>) ((usum) >> (bits1))) != ((RuntimeValue<uint>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))))))));
					return (usum).Store();
				})()));
		} else {
			XR[(int) rd] = (RuntimeValue<ulong>) (([=]() -> RuntimeValue<ulong> {
					auto __macro_add_with_carry_set_nzcv_common_operand1 = ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]())))).Store();
					auto __macro_add_with_carry_set_nzcv_common_operand2 = (ulong) ((ulong) (simm));
					auto __macro_add_with_carry_set_nzcv_common_carryIn = (ulong) ((ulong) (0x0));
					auto bits = (int) (64);
					auto bits1 = (long) (((long) (int) (bits)) - ((long) (long) (0x1)));
					auto usum = ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_operand1)) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_operand2))))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_carryIn)))).Store();
					auto ssum = ((RuntimeValue<long>) (((RuntimeValue<long>) (RuntimeValue<long>) ((RuntimeValue<long>) (((RuntimeValue<long>) (RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<long>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((RuntimeValue<long>) (RuntimeValue<long>) ((long) ((long) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((RuntimeValue<long>) (RuntimeValue<long>) ((long) ((long) (__macro_add_with_carry_set_nzcv_common_carryIn)))))).Store();
					NZCV_NR = (RuntimeValue<ulong>) ((usum) >> (bits1));
					NZCV_ZR = (RuntimeValue<bool>) ((usum) == (0x0));
					NZCV_CR = (RuntimeValue<uint>) ((((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<UInt128>) (((RuntimeValue<UInt128>) (((RuntimeValue<UInt128>) (RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) (((RuntimeValue<UInt128>) (RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((RuntimeValue<UInt128>) (RuntimeValue<UInt128>) ((UInt128) ((UInt128) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((RuntimeValue<UInt128>) (RuntimeValue<UInt128>) ((UInt128) ((UInt128) (__macro_add_with_carry_set_nzcv_common_carryIn)))))) >> (bits)))))) & ((RuntimeValue<ulong>) (0x1))));
					NZCV_VR = (RuntimeValue<bool>) ((((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<ulong>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))) == ((ulong) ((__macro_add_with_carry_set_nzcv_common_operand2) >> (uint) (bits1)))))) & ((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<ulong>) ((usum) >> (bits1))) != ((RuntimeValue<ulong>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))))))));
					return (usum).Store();
				})());
		}
		return true;
	}
unimplemented:
	return false;
}

/* ADDS-shifted-register */
bool Recompiler::ADDS_shifted_register(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto shift = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto imm = (inst >> 10) & 0x3FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto shiftstr = (string) (([=](auto temp_592) -> string { switch(temp_592) { case 0x0: return string("LSL"); case 0x1: return string("LSR"); case 0x2: return string("ASR"); default: return string("ROR"); } })(shift));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (([=]() -> RuntimeValue<uint> {
					auto __macro_add_with_carry_set_nzcv_common_operand1 = ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((rn) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rn]()))))).Store();
					auto __macro_add_with_carry_set_nzcv_common_operand2 = ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) (([=](auto temp_593) -> RuntimeValue<uint> { switch(temp_593) { case 0x0: return (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))))) << (imm))); case 0x1: return (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))) >> (imm))); case 0x2: return (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<int>) (((RuntimeValue<int>) ((RuntimeValue<int>) ((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))))) >> (imm))))); default: return (RuntimeValue<uint>) ((((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))) << ((RuntimeValue<uint>) (32 - (imm)))) | (((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))) >> ((RuntimeValue<uint>) (imm)))); } })(shift))))).Store();
					auto __macro_add_with_carry_set_nzcv_common_carryIn = (uint) ((uint) (0x0));
					auto bits = (int) (32);
					auto bits1 = (long) (((long) (int) (bits)) - ((long) (long) (0x1)));
					auto usum = ((RuntimeValue<uint>) (((RuntimeValue<uint>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) (RuntimeValue<uint>) (__macro_add_with_carry_set_nzcv_common_operand1)) + ((RuntimeValue<uint>) (RuntimeValue<uint>) (__macro_add_with_carry_set_nzcv_common_operand2))))) + ((RuntimeValue<uint>) (RuntimeValue<uint>) (__macro_add_with_carry_set_nzcv_common_carryIn)))).Store();
					auto ssum = ((RuntimeValue<int>) (((RuntimeValue<int>) (RuntimeValue<int>) ((RuntimeValue<int>) (((RuntimeValue<int>) (RuntimeValue<int>) ((RuntimeValue<int>) ((RuntimeValue<int>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((RuntimeValue<int>) (RuntimeValue<int>) ((RuntimeValue<int>) ((RuntimeValue<int>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((RuntimeValue<int>) (RuntimeValue<int>) ((int) ((int) (__macro_add_with_carry_set_nzcv_common_carryIn)))))).Store();
					NZCV_NR = (RuntimeValue<uint>) ((usum) >> (bits1));
					NZCV_ZR = (RuntimeValue<bool>) ((usum) == (0x0));
					NZCV_CR = (RuntimeValue<uint>) ((((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((ulong) ((ulong) (__macro_add_with_carry_set_nzcv_common_carryIn)))))) >> (bits)))))) & ((RuntimeValue<ulong>) (0x1))));
					NZCV_VR = (RuntimeValue<bool>) ((((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<uint>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))) == ((RuntimeValue<uint>) ((__macro_add_with_carry_set_nzcv_common_operand2) >> (bits1)))))) & ((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<uint>) ((usum) >> (bits1))) != ((RuntimeValue<uint>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))))))));
					return (usum).Store();
				})()));
		} else {
			XR[(int) rd] = (RuntimeValue<ulong>) (([=]() -> RuntimeValue<ulong> {
					auto __macro_add_with_carry_set_nzcv_common_operand1 = ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]())))).Store();
					auto __macro_add_with_carry_set_nzcv_common_operand2 = ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (([=](auto temp_594) -> RuntimeValue<ulong> { switch(temp_594) { case 0x0: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())))) << (imm))); case 0x1: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())) >> (imm))); case 0x2: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (((RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())))) >> (imm))))); default: return (RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())) << ((RuntimeValue<uint>) (64 - (imm)))) | (((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())) >> ((RuntimeValue<uint>) (imm)))); } })(shift))))).Store();
					auto __macro_add_with_carry_set_nzcv_common_carryIn = (ulong) ((ulong) (0x0));
					auto bits = (int) (64);
					auto bits1 = (long) (((long) (int) (bits)) - ((long) (long) (0x1)));
					auto usum = ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_operand1)) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_operand2))))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_carryIn)))).Store();
					auto ssum = ((RuntimeValue<long>) (((RuntimeValue<long>) (RuntimeValue<long>) ((RuntimeValue<long>) (((RuntimeValue<long>) (RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<long>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((RuntimeValue<long>) (RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<long>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((RuntimeValue<long>) (RuntimeValue<long>) ((long) ((long) (__macro_add_with_carry_set_nzcv_common_carryIn)))))).Store();
					NZCV_NR = (RuntimeValue<ulong>) ((usum) >> (bits1));
					NZCV_ZR = (RuntimeValue<bool>) ((usum) == (0x0));
					NZCV_CR = (RuntimeValue<uint>) ((((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<UInt128>) (((RuntimeValue<UInt128>) (((RuntimeValue<UInt128>) (RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) (((RuntimeValue<UInt128>) (RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((RuntimeValue<UInt128>) (RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((RuntimeValue<UInt128>) (RuntimeValue<UInt128>) ((UInt128) ((UInt128) (__macro_add_with_carry_set_nzcv_common_carryIn)))))) >> (bits)))))) & ((RuntimeValue<ulong>) (0x1))));
					NZCV_VR = (RuntimeValue<bool>) ((((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<ulong>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))) == ((RuntimeValue<ulong>) ((__macro_add_with_carry_set_nzcv_common_operand2) >> (bits1)))))) & ((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<ulong>) ((usum) >> (bits1))) != ((RuntimeValue<ulong>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))))))));
					return (usum).Store();
				})());
		}
		return true;
	}
unimplemented:
	return false;
}

/* ADR */
bool Recompiler::ADR(uint inst, ulong pc) {
	{
		auto immlo = (inst >> 29) & 0x3U;
		auto immhi = (inst >> 5) & 0x7FFFFU;
		auto rd = (inst >> 0) & 0x1FU;
		auto imm = (long) (SignExt<long>((uint) ((uint) (((uint) (((uint) (immlo)) << 0)) | ((uint) (((uint) (immhi)) << 2)))), 21));
		auto addr = (ulong) (((ulong) (ulong) ((ulong) (pc))) + ((ulong) (long) (imm)));
		XR[(int) rd] = addr;
		return true;
	}
unimplemented:
	return false;
}

/* ADRP */
bool Recompiler::ADRP(uint inst, ulong pc) {
	{
		auto immlo = (inst >> 29) & 0x3U;
		auto immhi = (inst >> 5) & 0x7FFFFU;
		auto rd = (inst >> 0) & 0x1FU;
		auto imm = (long) (SignExt<long>((ulong) ((ulong) (((ulong) (ulong) (((ulong) (((ulong) ((ushort) ((ushort) (0x0)))) << 0)) | ((ulong) (((ulong) (immlo)) << 12)))) | ((ulong) (((ulong) (immhi)) << 14)))), 33));
		auto addr = (ulong) (((ulong) (ulong) ((ulong) ((ulong) (((ulong) (((ulong) ((ushort) ((ushort) (0x0)))) << 0)) | ((ulong) (((ulong) ((ulong) ((ulong) ((ulong) (((ulong) (pc)) >> (uint) (0xC)))))) << 12)))))) + ((ulong) (long) (imm)));
		XR[(int) rd] = addr;
		return true;
	}
unimplemented:
	return false;
}

/* AND-immediate */
bool Recompiler::AND_immediate(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto up = (inst >> 22) & 0x1U;
		auto immr = (inst >> 16) & 0x3FU;
		auto imms = (inst >> 10) & 0x3FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto imm = (ulong) (MakeWMask(up, imms, immr, (long) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (0x20) : (0x40)), 0x1));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			if(rd == 31)
				SPR = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((((RuntimeValue<uint>) ((RuntimeValue<uint>) ((rn) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rn]())))) & ((RuntimeValue<uint>) ((uint) ((uint) (imm)))))));
			else
				XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((((RuntimeValue<uint>) ((RuntimeValue<uint>) ((rn) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rn]())))) & ((RuntimeValue<uint>) ((uint) ((uint) (imm)))))));
		} else {
			if(rd == 31)
				SPR = (RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]()))) & ((RuntimeValue<ulong>) (imm))));
			else
				XR[(int) rd] = (RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]()))) & ((RuntimeValue<ulong>) (imm))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* AND-shifted-register */
bool Recompiler::AND_shifted_register(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto shift = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto imm = (inst >> 10) & 0x3FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto shiftstr = (string) (([=](auto temp_595) -> string { switch(temp_595) { case 0x0: return string("LSL"); case 0x1: return string("LSR"); case 0x2: return string("ASR"); default: return string("ROR"); } })(shift));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((((RuntimeValue<uint>) ((RuntimeValue<uint>) ((rn) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rn]())))) & ((RuntimeValue<uint>) ((RuntimeValue<uint>) (([=](auto temp_596) -> RuntimeValue<uint> { switch(temp_596) { case 0x0: return (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))))) << (imm))); case 0x1: return (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))) >> (imm))); case 0x2: return (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<int>) (((RuntimeValue<int>) ((RuntimeValue<int>) ((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))))) >> (imm))))); default: return (RuntimeValue<uint>) ((((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))) << ((RuntimeValue<uint>) (32 - (imm)))) | (((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))) >> ((RuntimeValue<uint>) (imm)))); } })(shift)))))));
		} else {
			XR[(int) rd] = (RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]()))) & ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (([=](auto temp_597) -> RuntimeValue<ulong> { switch(temp_597) { case 0x0: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())))) << (imm))); case 0x1: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())) >> (imm))); case 0x2: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (((RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())))) >> (imm))))); default: return (RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())) << ((RuntimeValue<uint>) (64 - (imm)))) | (((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())) >> ((RuntimeValue<uint>) (imm)))); } })(shift))))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* AND-vector */
bool Recompiler::AND_vector(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto ts = (string) ((Q != 0) ? (string("16B")) : (string("8B")));
		auto v = ((RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) ((((RuntimeValue<Vector128<byte>>) ((RuntimeValue<Vector128<float>>) (VR[(int) (rn)]))) & ((RuntimeValue<Vector128<byte>>) ((RuntimeValue<Vector128<float>>) (VR[(int) (rm)])))))))).Store();
		VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) ((Q) != 0 ? (v) : ((RuntimeValue<Vector128<float>>) (v)));
		return true;
	}
unimplemented:
	return false;
}

/* ANDS-shifted-register */
bool Recompiler::ANDS_shifted_register(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto shift = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto imm = (inst >> 10) & 0x3FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto shiftstr = (string) (([=](auto temp_598) -> string { switch(temp_598) { case 0x0: return string("LSL"); case 0x1: return string("LSR"); case 0x2: return string("ASR"); default: return string("ROR"); } })(shift));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			auto result = ((RuntimeValue<uint>) ((((RuntimeValue<uint>) ((RuntimeValue<uint>) ((rn) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rn]())))) & ((RuntimeValue<uint>) ((RuntimeValue<uint>) (([=](auto temp_599) -> RuntimeValue<uint> { switch(temp_599) { case 0x0: return (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))))) << (imm))); case 0x1: return (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))) >> (imm))); case 0x2: return (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<int>) (((RuntimeValue<int>) ((RuntimeValue<int>) ((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))))) >> (imm))))); default: return (RuntimeValue<uint>) ((((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))) << ((RuntimeValue<uint>) (32 - (imm)))) | (((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))) >> ((RuntimeValue<uint>) (imm)))); } })(shift))))))).Store();
			XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) (result);
			NZCV_NR = (RuntimeValue<uint>) ((result) >> (0x1F));
			NZCV_ZR = (RuntimeValue<bool>) ((result) == (0x0));
			NZCV_CR = 0x0;
			NZCV_VR = 0x0;
		} else {
			auto result = ((RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]()))) & ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (([=](auto temp_600) -> RuntimeValue<ulong> { switch(temp_600) { case 0x0: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())))) << (imm))); case 0x1: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())) >> (imm))); case 0x2: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (((RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())))) >> (imm))))); default: return (RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())) << ((RuntimeValue<uint>) (64 - (imm)))) | (((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())) >> ((RuntimeValue<uint>) (imm)))); } })(shift))))))).Store();
			XR[(int) rd] = result;
			NZCV_NR = (RuntimeValue<ulong>) ((result) >> (0x3F));
			NZCV_ZR = (RuntimeValue<bool>) ((result) == (0x0));
			NZCV_CR = 0x0;
			NZCV_VR = 0x0;
		}
		return true;
	}
unimplemented:
	return false;
}

/* ANDS-immediate */
bool Recompiler::ANDS_immediate(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto up = (inst >> 22) & 0x1U;
		auto immr = (inst >> 16) & 0x3FU;
		auto imms = (inst >> 10) & 0x3FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto imm = (ulong) (MakeWMask(up, imms, immr, (long) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (0x20) : (0x40)), 0x1));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			auto result = ((RuntimeValue<uint>) ((((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((rn) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rn]())))) & ((RuntimeValue<ulong>) (imm))))).Store();
			XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) (result);
			NZCV_NR = (RuntimeValue<uint>) ((result) >> (0x1F));
			NZCV_ZR = (RuntimeValue<bool>) ((result) == (0x0));
			NZCV_CR = 0x0;
			NZCV_VR = 0x0;
		} else {
			auto result = ((RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]()))) & ((RuntimeValue<ulong>) (imm))))).Store();
			XR[(int) rd] = result;
			NZCV_NR = (RuntimeValue<ulong>) ((result) >> (0x3F));
			NZCV_ZR = (RuntimeValue<bool>) ((result) == (0x0));
			NZCV_CR = 0x0;
			NZCV_VR = 0x0;
		}
		return true;
	}
unimplemented:
	return false;
}

/* ASRV */
bool Recompiler::ASRV(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<int>) (((RuntimeValue<int>) ((RuntimeValue<int>) ((RuntimeValue<uint>) ((rn) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rn]()))))) >> ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]())))) % ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x20))))))));
		} else {
			XR[(int) rd] = (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (((RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]())))) >> ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]()))) % ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x40)))))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* B */
bool Recompiler::B(uint inst, ulong pc) {
	{
		auto imm = (inst >> 0) & 0x3FFFFFFU;
		auto addr = (ulong) (((ulong) (ulong) ((ulong) (pc))) + ((ulong) (long) ((long) (SignExt<long>((uint) (((uint) ((uint) (imm))) << (uint) (0x2)), 28)))));
		Branch(addr);
		return true;
	}
unimplemented:
	return false;
}

/* B.cond */
bool Recompiler::B_cond(uint inst, ulong pc) {
	{
		auto imm = (inst >> 5) & 0x7FFFFU;
		auto cond = (inst >> 0) & 0xFU;
		auto addr = (ulong) (((ulong) (ulong) ((ulong) (pc))) + ((ulong) (long) ((long) (SignExt<long>((uint) (((uint) ((uint) (imm))) << (uint) (0x2)), 21)))));
		auto condstr = (string) (([=](auto temp_601) -> string { switch(temp_601) { case 0x0: return string("EQ"); case 0x1: return string("NE"); case 0x2: return string("CS"); case 0x3: return string("CC"); case 0x4: return string("MI"); case 0x5: return string("PL"); case 0x6: return string("VS"); case 0x7: return string("VC"); case 0x8: return string("HI"); case 0x9: return string("LS"); case 0xA: return string("GE"); case 0xB: return string("LT"); case 0xC: return string("GT"); case 0xD: return string("LE"); default: return string("AL"); } })(cond));
		auto result = ((RuntimeValue<bool>) (([=](auto temp_602) -> RuntimeValue<bool> { switch(temp_602) { case 0x0: return (RuntimeValue<bool>) ((RuntimeValue<bool>) (NZCV_ZR)); case 0x1: return (RuntimeValue<bool>) ((RuntimeValue<bool>) (NZCV_CR)); case 0x2: return (RuntimeValue<bool>) ((RuntimeValue<bool>) (NZCV_NR)); case 0x3: return (RuntimeValue<bool>) ((RuntimeValue<bool>) (NZCV_VR)); case 0x4: return (RuntimeValue<bool>) ((RuntimeValue<bool>) ((((RuntimeValue<bool>) ((RuntimeValue<bool>) (NZCV_CR))) & ((RuntimeValue<bool>) ((RuntimeValue<bool>) (!((RuntimeValue<bool>) (NZCV_ZR)))))))); case 0x5: return (RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<bool>) (NZCV_NR)) == ((RuntimeValue<bool>) (NZCV_VR)))); case 0x6: return (RuntimeValue<bool>) ((RuntimeValue<bool>) ((((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<bool>) (NZCV_NR)) == ((RuntimeValue<bool>) (NZCV_VR))))) & ((RuntimeValue<bool>) ((RuntimeValue<bool>) (!((RuntimeValue<bool>) (NZCV_ZR)))))))); default: return 0x1; } })((byte) ((cond) >> (uint) (0x1))))).Store();
		LabelTag temp_603 = DefineLabel(), temp_605 = DefineLabel(), temp_604 = DefineLabel();
		BranchIf((RuntimeValue<bool>) (((byte) ((((byte) ((byte) ((((ulong) (cond)) & ((ulong) (0x1)))))) & ((byte) ((bool) (((cond) != (0xF)) ? 1U : 0U)))))) != 0 ? ((RuntimeValue<bool>) (!(result))) : (result)), temp_603, temp_605);
		Label(temp_603);
		Branch(addr);
		Branch(temp_604);
		Label(temp_605);
		Branch(pc + 4);
		Branch(temp_604);
		Label(temp_604);
		return true;
	}
unimplemented:
	return false;
}

/* BFM */
bool Recompiler::BFM(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto N = (inst >> 22) & 0x1U;
		auto immr = (inst >> 16) & 0x3FU;
		auto imms = (inst >> 10) & 0x3FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			auto dst = ((RuntimeValue<uint>) ((rd) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rd]()))).Store();
			auto src = ((RuntimeValue<uint>) ((rn) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rn]()))).Store();
			auto wmask = (uint) ((uint) ((ulong) (MakeWMask(N, imms, immr, 0x20, 0x0))));
			auto tmask = (uint) ((uint) ((ulong) (MakeTMask(N, imms, immr, 0x20, 0x0))));
			auto bot = ((RuntimeValue<uint>) ((((RuntimeValue<uint>) ((RuntimeValue<uint>) ((((RuntimeValue<uint>) (dst)) & ((RuntimeValue<uint>) ((uint) (~(wmask)))))))) | ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((((RuntimeValue<uint>) ((RuntimeValue<uint>) (((src) << ((RuntimeValue<uint>) (32 - (immr)))) | ((src) >> ((RuntimeValue<uint>) (immr)))))) & ((RuntimeValue<uint>) (wmask))))))))).Store();
			XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((((RuntimeValue<uint>) ((RuntimeValue<uint>) ((((RuntimeValue<uint>) (dst)) & ((RuntimeValue<uint>) ((uint) (~(tmask)))))))) | ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((((RuntimeValue<uint>) (bot)) & ((RuntimeValue<uint>) (tmask)))))))));
		} else {
			auto dst = ((RuntimeValue<ulong>) ((rd) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rd]())).Store();
			auto src = ((RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]())).Store();
			auto wmask = (ulong) (MakeWMask(N, imms, immr, 0x40, 0x0));
			auto tmask = (ulong) (MakeTMask(N, imms, immr, 0x40, 0x0));
			auto bot = ((RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((((RuntimeValue<ulong>) (dst)) & ((RuntimeValue<ulong>) ((ulong) (~(wmask)))))))) | ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((src) << ((RuntimeValue<uint>) (64 - (immr)))) | ((src) >> ((RuntimeValue<uint>) (immr)))))) & ((RuntimeValue<ulong>) (wmask))))))))).Store();
			XR[(int) rd] = (RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((((RuntimeValue<ulong>) (dst)) & ((RuntimeValue<ulong>) ((ulong) (~(tmask)))))))) | ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((((RuntimeValue<ulong>) (bot)) & ((RuntimeValue<ulong>) (tmask))))))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* BIC */
bool Recompiler::BIC(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto shift = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto imm = (inst >> 10) & 0x3FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto shiftstr = (string) (([=](auto temp_606) -> string { switch(temp_606) { case 0x0: return string("LSL"); case 0x1: return string("LSR"); case 0x2: return string("ASR"); default: return string("ROR"); } })(shift));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((((RuntimeValue<uint>) ((RuntimeValue<uint>) ((rn) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rn]())))) & ((RuntimeValue<uint>) ((RuntimeValue<uint>) (~((RuntimeValue<uint>) (([=](auto temp_607) -> RuntimeValue<uint> { switch(temp_607) { case 0x0: return (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))))) << (imm))); case 0x1: return (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))) >> (imm))); case 0x2: return (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<int>) (((RuntimeValue<int>) ((RuntimeValue<int>) ((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))))) >> (imm))))); default: return (RuntimeValue<uint>) ((((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))) << ((RuntimeValue<uint>) (32 - (imm)))) | (((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))) >> ((RuntimeValue<uint>) (imm)))); } })(shift)))))))));
		} else {
			XR[(int) rd] = (RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]()))) & ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (~((RuntimeValue<ulong>) (([=](auto temp_608) -> RuntimeValue<ulong> { switch(temp_608) { case 0x0: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())))) << (imm))); case 0x1: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())) >> (imm))); case 0x2: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (((RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())))) >> (imm))))); default: return (RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())) << ((RuntimeValue<uint>) (64 - (imm)))) | (((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())) >> ((RuntimeValue<uint>) (imm)))); } })(shift))))))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* BIC-vector-register */
bool Recompiler::BIC_vector_register(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto t = (string) (((bool) (((Q) == (0x1)) ? 1U : 0U) != 0) ? (string("16B")) : (string("8B")));
		auto v = ((RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) (~(((RuntimeValue<Vector128<byte>>) ((RuntimeValue<Vector128<float>>) (VR[(int) (rn)]))) & ((RuntimeValue<Vector128<byte>>) ((RuntimeValue<Vector128<float>>) (VR[(int) (rm)]))))))).Store();
		if(((bool) (((Q) == (0x1)) ? 1U : 0U)) != 0) {
			VR[(int) (rd)] = v;
		} else {
			VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) (v);
		}
		return true;
	}
unimplemented:
	return false;
}

/* BICS */
bool Recompiler::BICS(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto shift = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto imm = (inst >> 10) & 0x3FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto shiftstr = (string) (([=](auto temp_609) -> string { switch(temp_609) { case 0x0: return string("LSL"); case 0x1: return string("LSR"); case 0x2: return string("ASR"); default: return string("ROR"); } })(shift));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			auto val = ((RuntimeValue<uint>) ((((RuntimeValue<uint>) ((RuntimeValue<uint>) ((rn) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rn]())))) & ((RuntimeValue<uint>) ((RuntimeValue<uint>) (~((RuntimeValue<uint>) (([=](auto temp_610) -> RuntimeValue<uint> { switch(temp_610) { case 0x0: return (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))))) << (imm))); case 0x1: return (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))) >> (imm))); case 0x2: return (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<int>) (((RuntimeValue<int>) ((RuntimeValue<int>) ((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))))) >> (imm))))); default: return (RuntimeValue<uint>) ((((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))) << ((RuntimeValue<uint>) (32 - (imm)))) | (((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))) >> ((RuntimeValue<uint>) (imm)))); } })(shift))))))))).Store();
			XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) (val);
			NZCVR = (RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((val) >> (0x1F))))) << (0x1F)))) | ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<bool>) ((val) == (0x0))))) << (0x1E))))));
		} else {
			auto val = ((RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]()))) & ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (~((RuntimeValue<ulong>) (([=](auto temp_611) -> RuntimeValue<ulong> { switch(temp_611) { case 0x0: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())))) << (imm))); case 0x1: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())) >> (imm))); case 0x2: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (((RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())))) >> (imm))))); default: return (RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())) << ((RuntimeValue<uint>) (64 - (imm)))) | (((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())) >> ((RuntimeValue<uint>) (imm)))); } })(shift))))))))).Store();
			XR[(int) rd] = val;
			NZCVR = (RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((val) >> (0x3F))))) << (0x1F)))) | ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<bool>) ((val) == (0x0))))) << (0x1E))))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* BL */
bool Recompiler::BL(uint inst, ulong pc) {
	{
		auto imm = (inst >> 0) & 0x3FFFFFFU;
		auto offset = (long) (SignExt<long>((uint) (((uint) ((uint) (imm))) << (uint) (0x2)), 28));
		auto addr = (ulong) (((ulong) (ulong) ((ulong) (pc))) + ((ulong) (long) (offset)));
		BranchLinked(addr);
		return true;
	}
unimplemented:
	return false;
}

/* BLR */
bool Recompiler::BLR(uint inst, ulong pc) {
	{
		auto rn = (inst >> 5) & 0x1FU;
		BranchLinkedRegister(rn);
		return true;
	}
unimplemented:
	return false;
}

/* BR */
bool Recompiler::BR(uint inst, ulong pc) {
	{
		auto rn = (inst >> 5) & 0x1FU;
		BranchRegister(rn);
		return true;
	}
unimplemented:
	return false;
}

/* BRK */
bool Recompiler::BRK(uint inst, ulong pc) {
	{
		auto imm = (inst >> 5) & 0xFFFFU;
		Branch(-0xE0E0E0E0D0D0D0E);
		return true;
	}
unimplemented:
	return false;
}

/* CASP */
bool Recompiler::CASP(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x1U;
		auto rs = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto rs2 = (ulong) (((ulong) (byte) (rs)) + ((ulong) (long) (0x1)));
		auto rt2 = (ulong) (((ulong) (byte) (rt)) + ((ulong) (long) (0x1)));
		throw "Not implemented";
		return true;
	}
unimplemented:
	return false;
}

/* CASPA */
bool Recompiler::CASPA(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x1U;
		auto rs = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto rs2 = (ulong) (((ulong) (byte) (rs)) + ((ulong) (long) (0x1)));
		auto rt2 = (ulong) (((ulong) (byte) (rt)) + ((ulong) (long) (0x1)));
		throw "Not implemented";
		return true;
	}
unimplemented:
	return false;
}

/* CASPAL */
bool Recompiler::CASPAL(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x1U;
		auto rs = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto rs2 = (ulong) (((ulong) (byte) (rs)) + ((ulong) (long) (0x1)));
		auto rt2 = (ulong) (((ulong) (byte) (rt)) + ((ulong) (long) (0x1)));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			auto cl = ((RuntimeValue<uint>) ((rs) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rs]()))).Store();
			auto ch = ((RuntimeValue<uint>) (((ulong) (((ulong) (byte) (rs)) + ((ulong) (long) (0x1)))) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) (ulong) (((ulong) (byte) (rs)) + ((ulong) (long) (0x1)))]()))).Store();
			auto nl = ((RuntimeValue<uint>) ((rt) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rt]()))).Store();
			auto nh = ((RuntimeValue<uint>) (((ulong) (((ulong) (byte) (rt)) + ((ulong) (long) (0x1)))) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) (ulong) (((ulong) (byte) (rt)) + ((ulong) (long) (0x1)))]()))).Store();
			auto address = ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
			auto data = ((RuntimeValue<ulong>) (((RuntimePointer<ulong>) (address)).value())).Store();
			LabelTag temp_612 = DefineLabel(), temp_614 = DefineLabel(), temp_613 = DefineLabel();
			BranchIf((RuntimeValue<bool>) ((data) == ((RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (ch))) << (0x20)))) | ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (cl)))))))), temp_612, temp_614);
			Label(temp_612);
			((RuntimePointer<ulong>) (address)).value((RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (nh))) << (0x20)))) | ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (nl)))))));
			Branch(temp_613);
			Label(temp_614);
			Branch(temp_613);
			Label(temp_613);
			XR[(int) rs] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) (data)));
			XR[(int) (ulong) (((ulong) (byte) (rs)) + ((ulong) (long) (0x1)))] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<ulong>) ((data) >> (0x20)))));
		} else {
			auto cl = ((RuntimeValue<ulong>) ((rs) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rs]())).Store();
			auto ch = ((RuntimeValue<ulong>) (((ulong) (((ulong) (byte) (rs)) + ((ulong) (long) (0x1)))) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) (ulong) (((ulong) (byte) (rs)) + ((ulong) (long) (0x1)))]())).Store();
			auto nl = ((RuntimeValue<ulong>) ((rt) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rt]())).Store();
			auto nh = ((RuntimeValue<ulong>) (((ulong) (((ulong) (byte) (rt)) + ((ulong) (long) (0x1)))) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) (ulong) (((ulong) (byte) (rt)) + ((ulong) (long) (0x1)))]())).Store();
			auto address = ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
			auto dl = ((RuntimeValue<ulong>) (((RuntimePointer<ulong>) (address)).value())).Store();
			auto dh = ((RuntimeValue<ulong>) (((RuntimePointer<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x8))))).value())).Store();
			LabelTag temp_615 = DefineLabel(), temp_617 = DefineLabel(), temp_616 = DefineLabel();
			BranchIf((RuntimeValue<bool>) ((((RuntimeValue<bool>) ((RuntimeValue<bool>) ((dl) == (cl)))) & ((RuntimeValue<bool>) ((RuntimeValue<bool>) ((dh) == (ch)))))), temp_615, temp_617);
			Label(temp_615);
			((RuntimePointer<ulong>) (address)).value(nl);
			((RuntimePointer<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x8))))).value(nh);
			Branch(temp_616);
			Label(temp_617);
			Branch(temp_616);
			Label(temp_616);
			XR[(int) rs] = dl;
			XR[(int) (ulong) (((ulong) (byte) (rs)) + ((ulong) (long) (0x1)))] = dh;
		}
		return true;
	}
unimplemented:
	return false;
}

/* CASPL */
bool Recompiler::CASPL(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x1U;
		auto rs = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto rs2 = (ulong) (((ulong) (byte) (rs)) + ((ulong) (long) (0x1)));
		auto rt2 = (ulong) (((ulong) (byte) (rt)) + ((ulong) (long) (0x1)));
		throw "Not implemented";
		return true;
	}
unimplemented:
	return false;
}

/* CBNZ */
bool Recompiler::CBNZ(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto imm = (inst >> 5) & 0x7FFFFU;
		auto rs = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto addr = (ulong) (((ulong) (ulong) ((ulong) (pc))) + ((ulong) (long) ((long) (SignExt<long>((uint) ((uint) ((uint) ((imm) << (uint) (0x2)))), 21)))));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			LabelTag temp_618 = DefineLabel(), temp_620 = DefineLabel(), temp_619 = DefineLabel();
			BranchIf((RuntimeValue<bool>) (((RuntimeValue<uint>) ((rs) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rs]()))) != ((uint) ((uint) (0x0)))), temp_618, temp_620);
			Label(temp_618);
			Branch(addr);
			Branch(temp_619);
			Label(temp_620);
			Branch(pc + 4);
			Branch(temp_619);
			Label(temp_619);
		} else {
			LabelTag temp_621 = DefineLabel(), temp_623 = DefineLabel(), temp_622 = DefineLabel();
			BranchIf((RuntimeValue<bool>) (((RuntimeValue<ulong>) ((rs) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rs]())) != ((ulong) ((ulong) (0x0)))), temp_621, temp_623);
			Label(temp_621);
			Branch(addr);
			Branch(temp_622);
			Label(temp_623);
			Branch(pc + 4);
			Branch(temp_622);
			Label(temp_622);
		}
		return true;
	}
unimplemented:
	return false;
}

/* CBZ */
bool Recompiler::CBZ(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto imm = (inst >> 5) & 0x7FFFFU;
		auto rs = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto addr = (ulong) (((ulong) (ulong) ((ulong) (pc))) + ((ulong) (long) ((long) (SignExt<long>((uint) ((uint) ((uint) ((imm) << (uint) (0x2)))), 21)))));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			LabelTag temp_624 = DefineLabel(), temp_626 = DefineLabel(), temp_625 = DefineLabel();
			BranchIf((RuntimeValue<bool>) (((RuntimeValue<uint>) ((rs) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rs]()))) == ((uint) ((uint) (0x0)))), temp_624, temp_626);
			Label(temp_624);
			Branch(addr);
			Branch(temp_625);
			Label(temp_626);
			Branch(pc + 4);
			Branch(temp_625);
			Label(temp_625);
		} else {
			LabelTag temp_627 = DefineLabel(), temp_629 = DefineLabel(), temp_628 = DefineLabel();
			BranchIf((RuntimeValue<bool>) (((RuntimeValue<ulong>) ((rs) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rs]())) == ((ulong) ((ulong) (0x0)))), temp_627, temp_629);
			Label(temp_627);
			Branch(addr);
			Branch(temp_628);
			Label(temp_629);
			Branch(pc + 4);
			Branch(temp_628);
			Label(temp_628);
		}
		return true;
	}
unimplemented:
	return false;
}

/* CCMN-immediate */
bool Recompiler::CCMN_immediate(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto imm = (inst >> 16) & 0x1FU;
		auto cond = (inst >> 12) & 0xFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto nzcv = (inst >> 0) & 0xFU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto condstr = (string) (([=](auto temp_630) -> string { switch(temp_630) { case 0x0: return string("EQ"); case 0x1: return string("NE"); case 0x2: return string("CS"); case 0x3: return string("CC"); case 0x4: return string("MI"); case 0x5: return string("PL"); case 0x6: return string("VS"); case 0x7: return string("VC"); case 0x8: return string("HI"); case 0x9: return string("LS"); case 0xA: return string("GE"); case 0xB: return string("LT"); case 0xC: return string("GT"); case 0xD: return string("LE"); default: return string("AL"); } })(cond));
		auto result = ((RuntimeValue<bool>) (([=](auto temp_631) -> RuntimeValue<bool> { switch(temp_631) { case 0x0: return (RuntimeValue<bool>) ((RuntimeValue<bool>) (NZCV_ZR)); case 0x1: return (RuntimeValue<bool>) ((RuntimeValue<bool>) (NZCV_CR)); case 0x2: return (RuntimeValue<bool>) ((RuntimeValue<bool>) (NZCV_NR)); case 0x3: return (RuntimeValue<bool>) ((RuntimeValue<bool>) (NZCV_VR)); case 0x4: return (RuntimeValue<bool>) ((RuntimeValue<bool>) ((((RuntimeValue<bool>) ((RuntimeValue<bool>) (NZCV_CR))) & ((RuntimeValue<bool>) ((RuntimeValue<bool>) (!((RuntimeValue<bool>) (NZCV_ZR)))))))); case 0x5: return (RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<bool>) (NZCV_NR)) == ((RuntimeValue<bool>) (NZCV_VR)))); case 0x6: return (RuntimeValue<bool>) ((RuntimeValue<bool>) ((((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<bool>) (NZCV_NR)) == ((RuntimeValue<bool>) (NZCV_VR))))) & ((RuntimeValue<bool>) ((RuntimeValue<bool>) (!((RuntimeValue<bool>) (NZCV_ZR)))))))); default: return 0x1; } })((byte) ((cond) >> (uint) (0x1))))).Store();
		LabelTag temp_632 = DefineLabel(), temp_634 = DefineLabel(), temp_633 = DefineLabel();
		BranchIf((RuntimeValue<bool>) (((byte) ((((byte) ((byte) ((((ulong) (cond)) & ((ulong) (0x1)))))) & ((byte) ((bool) (((cond) != (0xF)) ? 1U : 0U)))))) != 0 ? ((RuntimeValue<bool>) (!(result))) : (result)), temp_632, temp_634);
		Label(temp_632);
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) 0x1F] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (([=]() -> RuntimeValue<uint> {
					auto __macro_add_with_carry_set_nzcv_common_operand1 = ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((rn) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rn]()))))).Store();
					auto __macro_add_with_carry_set_nzcv_common_operand2 = (uint) ((uint) ((uint) ((uint) (imm))));
					auto __macro_add_with_carry_set_nzcv_common_carryIn = (uint) ((uint) (0x0));
					auto bits = (int) (32);
					auto bits1 = (long) (((long) (int) (bits)) - ((long) (long) (0x1)));
					auto usum = ((RuntimeValue<uint>) (((RuntimeValue<uint>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) (RuntimeValue<uint>) (__macro_add_with_carry_set_nzcv_common_operand1)) + ((RuntimeValue<uint>) (RuntimeValue<uint>) (__macro_add_with_carry_set_nzcv_common_operand2))))) + ((RuntimeValue<uint>) (RuntimeValue<uint>) (__macro_add_with_carry_set_nzcv_common_carryIn)))).Store();
					auto ssum = ((RuntimeValue<int>) (((RuntimeValue<int>) (RuntimeValue<int>) ((RuntimeValue<int>) (((RuntimeValue<int>) (RuntimeValue<int>) ((RuntimeValue<int>) ((RuntimeValue<int>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((RuntimeValue<int>) (RuntimeValue<int>) ((int) ((int) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((RuntimeValue<int>) (RuntimeValue<int>) ((int) ((int) (__macro_add_with_carry_set_nzcv_common_carryIn)))))).Store();
					NZCV_NR = (RuntimeValue<uint>) ((usum) >> (bits1));
					NZCV_ZR = (RuntimeValue<bool>) ((usum) == (0x0));
					NZCV_CR = (RuntimeValue<uint>) ((((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((ulong) ((ulong) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((ulong) ((ulong) (__macro_add_with_carry_set_nzcv_common_carryIn)))))) >> (bits)))))) & ((RuntimeValue<ulong>) (0x1))));
					NZCV_VR = (RuntimeValue<bool>) ((((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<uint>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))) == ((uint) ((__macro_add_with_carry_set_nzcv_common_operand2) >> (uint) (bits1)))))) & ((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<uint>) ((usum) >> (bits1))) != ((RuntimeValue<uint>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))))))));
					return (usum).Store();
				})()));
		} else {
			XR[(int) 0x1F] = (RuntimeValue<ulong>) (([=]() -> RuntimeValue<ulong> {
					auto __macro_add_with_carry_set_nzcv_common_operand1 = ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]())))).Store();
					auto __macro_add_with_carry_set_nzcv_common_operand2 = (ulong) ((ulong) ((ulong) ((ulong) (imm))));
					auto __macro_add_with_carry_set_nzcv_common_carryIn = (ulong) ((ulong) (0x0));
					auto bits = (int) (64);
					auto bits1 = (long) (((long) (int) (bits)) - ((long) (long) (0x1)));
					auto usum = ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_operand1)) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_operand2))))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_carryIn)))).Store();
					auto ssum = ((RuntimeValue<long>) (((RuntimeValue<long>) (RuntimeValue<long>) ((RuntimeValue<long>) (((RuntimeValue<long>) (RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<long>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((RuntimeValue<long>) (RuntimeValue<long>) ((long) ((long) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((RuntimeValue<long>) (RuntimeValue<long>) ((long) ((long) (__macro_add_with_carry_set_nzcv_common_carryIn)))))).Store();
					NZCV_NR = (RuntimeValue<ulong>) ((usum) >> (bits1));
					NZCV_ZR = (RuntimeValue<bool>) ((usum) == (0x0));
					NZCV_CR = (RuntimeValue<uint>) ((((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<UInt128>) (((RuntimeValue<UInt128>) (((RuntimeValue<UInt128>) (RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) (((RuntimeValue<UInt128>) (RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((RuntimeValue<UInt128>) (RuntimeValue<UInt128>) ((UInt128) ((UInt128) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((RuntimeValue<UInt128>) (RuntimeValue<UInt128>) ((UInt128) ((UInt128) (__macro_add_with_carry_set_nzcv_common_carryIn)))))) >> (bits)))))) & ((RuntimeValue<ulong>) (0x1))));
					NZCV_VR = (RuntimeValue<bool>) ((((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<ulong>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))) == ((ulong) ((__macro_add_with_carry_set_nzcv_common_operand2) >> (uint) (bits1)))))) & ((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<ulong>) ((usum) >> (bits1))) != ((RuntimeValue<ulong>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))))))));
					return (usum).Store();
				})());
		}
		Branch(temp_633);
		Label(temp_634);
		NZCVR = (ulong) (((ulong) ((ulong) (nzcv))) << (uint) (0x1C));
		Branch(temp_633);
		Label(temp_633);
		return true;
	}
unimplemented:
	return false;
}

/* CCMP-immediate */
bool Recompiler::CCMP_immediate(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto imm = (inst >> 16) & 0x1FU;
		auto cond = (inst >> 12) & 0xFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto nzcv = (inst >> 0) & 0xFU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto condstr = (string) (([=](auto temp_635) -> string { switch(temp_635) { case 0x0: return string("EQ"); case 0x1: return string("NE"); case 0x2: return string("CS"); case 0x3: return string("CC"); case 0x4: return string("MI"); case 0x5: return string("PL"); case 0x6: return string("VS"); case 0x7: return string("VC"); case 0x8: return string("HI"); case 0x9: return string("LS"); case 0xA: return string("GE"); case 0xB: return string("LT"); case 0xC: return string("GT"); case 0xD: return string("LE"); default: return string("AL"); } })(cond));
		auto result = ((RuntimeValue<bool>) (([=](auto temp_636) -> RuntimeValue<bool> { switch(temp_636) { case 0x0: return (RuntimeValue<bool>) ((RuntimeValue<bool>) (NZCV_ZR)); case 0x1: return (RuntimeValue<bool>) ((RuntimeValue<bool>) (NZCV_CR)); case 0x2: return (RuntimeValue<bool>) ((RuntimeValue<bool>) (NZCV_NR)); case 0x3: return (RuntimeValue<bool>) ((RuntimeValue<bool>) (NZCV_VR)); case 0x4: return (RuntimeValue<bool>) ((RuntimeValue<bool>) ((((RuntimeValue<bool>) ((RuntimeValue<bool>) (NZCV_CR))) & ((RuntimeValue<bool>) ((RuntimeValue<bool>) (!((RuntimeValue<bool>) (NZCV_ZR)))))))); case 0x5: return (RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<bool>) (NZCV_NR)) == ((RuntimeValue<bool>) (NZCV_VR)))); case 0x6: return (RuntimeValue<bool>) ((RuntimeValue<bool>) ((((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<bool>) (NZCV_NR)) == ((RuntimeValue<bool>) (NZCV_VR))))) & ((RuntimeValue<bool>) ((RuntimeValue<bool>) (!((RuntimeValue<bool>) (NZCV_ZR)))))))); default: return 0x1; } })((byte) ((cond) >> (uint) (0x1))))).Store();
		LabelTag temp_637 = DefineLabel(), temp_639 = DefineLabel(), temp_638 = DefineLabel();
		BranchIf((RuntimeValue<bool>) (((byte) ((((byte) ((byte) ((((ulong) (cond)) & ((ulong) (0x1)))))) & ((byte) ((bool) (((cond) != (0xF)) ? 1U : 0U)))))) != 0 ? ((RuntimeValue<bool>) (!(result))) : (result)), temp_637, temp_639);
		Label(temp_637);
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) 0x1F] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (([=]() -> RuntimeValue<uint> {
					auto __macro_add_with_carry_set_nzcv_common_operand1 = ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((rn) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rn]()))))).Store();
					auto __macro_add_with_carry_set_nzcv_common_operand2 = (uint) ((uint) ((uint) (~((uint) ((uint) (imm))))));
					auto __macro_add_with_carry_set_nzcv_common_carryIn = (uint) ((uint) (0x1));
					auto bits = (int) (32);
					auto bits1 = (long) (((long) (int) (bits)) - ((long) (long) (0x1)));
					auto usum = ((RuntimeValue<uint>) (((RuntimeValue<uint>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) (RuntimeValue<uint>) (__macro_add_with_carry_set_nzcv_common_operand1)) + ((RuntimeValue<uint>) (RuntimeValue<uint>) (__macro_add_with_carry_set_nzcv_common_operand2))))) + ((RuntimeValue<uint>) (RuntimeValue<uint>) (__macro_add_with_carry_set_nzcv_common_carryIn)))).Store();
					auto ssum = ((RuntimeValue<int>) (((RuntimeValue<int>) (RuntimeValue<int>) ((RuntimeValue<int>) (((RuntimeValue<int>) (RuntimeValue<int>) ((RuntimeValue<int>) ((RuntimeValue<int>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((RuntimeValue<int>) (RuntimeValue<int>) ((int) ((int) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((RuntimeValue<int>) (RuntimeValue<int>) ((int) ((int) (__macro_add_with_carry_set_nzcv_common_carryIn)))))).Store();
					NZCV_NR = (RuntimeValue<uint>) ((usum) >> (bits1));
					NZCV_ZR = (RuntimeValue<bool>) ((usum) == (0x0));
					NZCV_CR = (RuntimeValue<uint>) ((((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((ulong) ((ulong) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((ulong) ((ulong) (__macro_add_with_carry_set_nzcv_common_carryIn)))))) >> (bits)))))) & ((RuntimeValue<ulong>) (0x1))));
					NZCV_VR = (RuntimeValue<bool>) ((((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<uint>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))) == ((uint) ((__macro_add_with_carry_set_nzcv_common_operand2) >> (uint) (bits1)))))) & ((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<uint>) ((usum) >> (bits1))) != ((RuntimeValue<uint>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))))))));
					return (usum).Store();
				})()));
		} else {
			XR[(int) 0x1F] = (RuntimeValue<ulong>) (([=]() -> RuntimeValue<ulong> {
					auto __macro_add_with_carry_set_nzcv_common_operand1 = ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]())))).Store();
					auto __macro_add_with_carry_set_nzcv_common_operand2 = (ulong) ((ulong) ((ulong) (~((ulong) ((ulong) (imm))))));
					auto __macro_add_with_carry_set_nzcv_common_carryIn = (ulong) ((ulong) (0x1));
					auto bits = (int) (64);
					auto bits1 = (long) (((long) (int) (bits)) - ((long) (long) (0x1)));
					auto usum = ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_operand1)) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_operand2))))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_carryIn)))).Store();
					auto ssum = ((RuntimeValue<long>) (((RuntimeValue<long>) (RuntimeValue<long>) ((RuntimeValue<long>) (((RuntimeValue<long>) (RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<long>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((RuntimeValue<long>) (RuntimeValue<long>) ((long) ((long) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((RuntimeValue<long>) (RuntimeValue<long>) ((long) ((long) (__macro_add_with_carry_set_nzcv_common_carryIn)))))).Store();
					NZCV_NR = (RuntimeValue<ulong>) ((usum) >> (bits1));
					NZCV_ZR = (RuntimeValue<bool>) ((usum) == (0x0));
					NZCV_CR = (RuntimeValue<uint>) ((((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<UInt128>) (((RuntimeValue<UInt128>) (((RuntimeValue<UInt128>) (RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) (((RuntimeValue<UInt128>) (RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((RuntimeValue<UInt128>) (RuntimeValue<UInt128>) ((UInt128) ((UInt128) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((RuntimeValue<UInt128>) (RuntimeValue<UInt128>) ((UInt128) ((UInt128) (__macro_add_with_carry_set_nzcv_common_carryIn)))))) >> (bits)))))) & ((RuntimeValue<ulong>) (0x1))));
					NZCV_VR = (RuntimeValue<bool>) ((((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<ulong>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))) == ((ulong) ((__macro_add_with_carry_set_nzcv_common_operand2) >> (uint) (bits1)))))) & ((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<ulong>) ((usum) >> (bits1))) != ((RuntimeValue<ulong>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))))))));
					return (usum).Store();
				})());
		}
		Branch(temp_638);
		Label(temp_639);
		NZCVR = (ulong) (((ulong) ((ulong) (nzcv))) << (uint) (0x1C));
		Branch(temp_638);
		Label(temp_638);
		return true;
	}
unimplemented:
	return false;
}

/* CCMP-register */
bool Recompiler::CCMP_register(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto cond = (inst >> 12) & 0xFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto nzcv = (inst >> 0) & 0xFU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto condstr = (string) (([=](auto temp_640) -> string { switch(temp_640) { case 0x0: return string("EQ"); case 0x1: return string("NE"); case 0x2: return string("CS"); case 0x3: return string("CC"); case 0x4: return string("MI"); case 0x5: return string("PL"); case 0x6: return string("VS"); case 0x7: return string("VC"); case 0x8: return string("HI"); case 0x9: return string("LS"); case 0xA: return string("GE"); case 0xB: return string("LT"); case 0xC: return string("GT"); case 0xD: return string("LE"); default: return string("AL"); } })(cond));
		auto result = ((RuntimeValue<bool>) (([=](auto temp_641) -> RuntimeValue<bool> { switch(temp_641) { case 0x0: return (RuntimeValue<bool>) ((RuntimeValue<bool>) (NZCV_ZR)); case 0x1: return (RuntimeValue<bool>) ((RuntimeValue<bool>) (NZCV_CR)); case 0x2: return (RuntimeValue<bool>) ((RuntimeValue<bool>) (NZCV_NR)); case 0x3: return (RuntimeValue<bool>) ((RuntimeValue<bool>) (NZCV_VR)); case 0x4: return (RuntimeValue<bool>) ((RuntimeValue<bool>) ((((RuntimeValue<bool>) ((RuntimeValue<bool>) (NZCV_CR))) & ((RuntimeValue<bool>) ((RuntimeValue<bool>) (!((RuntimeValue<bool>) (NZCV_ZR)))))))); case 0x5: return (RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<bool>) (NZCV_NR)) == ((RuntimeValue<bool>) (NZCV_VR)))); case 0x6: return (RuntimeValue<bool>) ((RuntimeValue<bool>) ((((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<bool>) (NZCV_NR)) == ((RuntimeValue<bool>) (NZCV_VR))))) & ((RuntimeValue<bool>) ((RuntimeValue<bool>) (!((RuntimeValue<bool>) (NZCV_ZR)))))))); default: return 0x1; } })((byte) ((cond) >> (uint) (0x1))))).Store();
		LabelTag temp_642 = DefineLabel(), temp_644 = DefineLabel(), temp_643 = DefineLabel();
		BranchIf((RuntimeValue<bool>) (((byte) ((((byte) ((byte) ((((ulong) (cond)) & ((ulong) (0x1)))))) & ((byte) ((bool) (((cond) != (0xF)) ? 1U : 0U)))))) != 0 ? ((RuntimeValue<bool>) (!(result))) : (result)), temp_642, temp_644);
		Label(temp_642);
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) 0x1F] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (([=]() -> RuntimeValue<uint> {
					auto __macro_add_with_carry_set_nzcv_common_operand1 = ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((rn) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rn]()))))).Store();
					auto __macro_add_with_carry_set_nzcv_common_operand2 = ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) (~((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))))))).Store();
					auto __macro_add_with_carry_set_nzcv_common_carryIn = (uint) ((uint) (0x1));
					auto bits = (int) (32);
					auto bits1 = (long) (((long) (int) (bits)) - ((long) (long) (0x1)));
					auto usum = ((RuntimeValue<uint>) (((RuntimeValue<uint>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) (RuntimeValue<uint>) (__macro_add_with_carry_set_nzcv_common_operand1)) + ((RuntimeValue<uint>) (RuntimeValue<uint>) (__macro_add_with_carry_set_nzcv_common_operand2))))) + ((RuntimeValue<uint>) (RuntimeValue<uint>) (__macro_add_with_carry_set_nzcv_common_carryIn)))).Store();
					auto ssum = ((RuntimeValue<int>) (((RuntimeValue<int>) (RuntimeValue<int>) ((RuntimeValue<int>) (((RuntimeValue<int>) (RuntimeValue<int>) ((RuntimeValue<int>) ((RuntimeValue<int>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((RuntimeValue<int>) (RuntimeValue<int>) ((RuntimeValue<int>) ((RuntimeValue<int>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((RuntimeValue<int>) (RuntimeValue<int>) ((int) ((int) (__macro_add_with_carry_set_nzcv_common_carryIn)))))).Store();
					NZCV_NR = (RuntimeValue<uint>) ((usum) >> (bits1));
					NZCV_ZR = (RuntimeValue<bool>) ((usum) == (0x0));
					NZCV_CR = (RuntimeValue<uint>) ((((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((ulong) ((ulong) (__macro_add_with_carry_set_nzcv_common_carryIn)))))) >> (bits)))))) & ((RuntimeValue<ulong>) (0x1))));
					NZCV_VR = (RuntimeValue<bool>) ((((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<uint>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))) == ((RuntimeValue<uint>) ((__macro_add_with_carry_set_nzcv_common_operand2) >> (bits1)))))) & ((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<uint>) ((usum) >> (bits1))) != ((RuntimeValue<uint>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))))))));
					return (usum).Store();
				})()));
		} else {
			XR[(int) 0x1F] = (RuntimeValue<ulong>) (([=]() -> RuntimeValue<ulong> {
					auto __macro_add_with_carry_set_nzcv_common_operand1 = ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]())))).Store();
					auto __macro_add_with_carry_set_nzcv_common_operand2 = ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (~((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())))))).Store();
					auto __macro_add_with_carry_set_nzcv_common_carryIn = (ulong) ((ulong) (0x1));
					auto bits = (int) (64);
					auto bits1 = (long) (((long) (int) (bits)) - ((long) (long) (0x1)));
					auto usum = ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_operand1)) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_operand2))))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_carryIn)))).Store();
					auto ssum = ((RuntimeValue<long>) (((RuntimeValue<long>) (RuntimeValue<long>) ((RuntimeValue<long>) (((RuntimeValue<long>) (RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<long>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((RuntimeValue<long>) (RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<long>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((RuntimeValue<long>) (RuntimeValue<long>) ((long) ((long) (__macro_add_with_carry_set_nzcv_common_carryIn)))))).Store();
					NZCV_NR = (RuntimeValue<ulong>) ((usum) >> (bits1));
					NZCV_ZR = (RuntimeValue<bool>) ((usum) == (0x0));
					NZCV_CR = (RuntimeValue<uint>) ((((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<UInt128>) (((RuntimeValue<UInt128>) (((RuntimeValue<UInt128>) (RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) (((RuntimeValue<UInt128>) (RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((RuntimeValue<UInt128>) (RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((RuntimeValue<UInt128>) (RuntimeValue<UInt128>) ((UInt128) ((UInt128) (__macro_add_with_carry_set_nzcv_common_carryIn)))))) >> (bits)))))) & ((RuntimeValue<ulong>) (0x1))));
					NZCV_VR = (RuntimeValue<bool>) ((((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<ulong>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))) == ((RuntimeValue<ulong>) ((__macro_add_with_carry_set_nzcv_common_operand2) >> (bits1)))))) & ((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<ulong>) ((usum) >> (bits1))) != ((RuntimeValue<ulong>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))))))));
					return (usum).Store();
				})());
		}
		Branch(temp_643);
		Label(temp_644);
		NZCVR = (ulong) (((ulong) ((ulong) (nzcv))) << (uint) (0x1C));
		Branch(temp_643);
		Label(temp_643);
		return true;
	}
unimplemented:
	return false;
}

/* CLREX */
bool Recompiler::CLREX(uint inst, ulong pc) {
	{
		auto crm = (inst >> 8) & 0xFU;
		return true;
	}
unimplemented:
	return false;
}

/* CLZ */
bool Recompiler::CLZ(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (Call<uint, uint>(CountLeadingZeros, (RuntimeValue<uint>) ((rn) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rn]())))));
		} else {
			XR[(int) rd] = (RuntimeValue<ulong>) (Call<ulong, ulong>(CountLeadingZeros, (RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]())));
		}
		return true;
	}
unimplemented:
	return false;
}

/* CMEQ-register-scalar */
bool Recompiler::CMEQ_register_scalar(uint inst, ulong pc) {
	{
		auto size = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto V = (string) (([=](auto temp_645) -> string { switch(temp_645) { case 0x3: return string("D"); default: throw "Not implemented"; } })(size));
		switch(size) {
			case 0x3: {
				VDR[(int) (rd)] = (RuntimeValue<double>) (((RuntimeValue<ulong>) (Ternary<bool, ulong>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<double>) (VDR[(int) (rn)])) == ((RuntimeValue<double>) (VDR[(int) (rm)])))), (ulong) ((ulong) (-0x1)), (ulong) ((ulong) (0x0))))).Bitcast<double>());
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* CMEQ-register-vector */
bool Recompiler::CMEQ_register_vector(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto T = (string) (([=](auto temp_646) -> string { switch(temp_646) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))));
		auto a = ((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Store();
		auto b = ((RuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Store();
		VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<byte>) ((byte) ((byte) (0x0)))).CreateVector());
		switch(size) {
			case 0x0: {
				auto one = (byte) ((byte) (0xFF));
				auto zero = (byte) ((byte) (0x0));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<byte>) (Ternary<bool, byte>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<byte>) ((a).Element<byte>(0x0))) == ((RuntimeValue<byte>) ((b).Element<byte>(0x0))))), one, zero)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<byte>) (Ternary<bool, byte>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<byte>) ((a).Element<byte>(0x1))) == ((RuntimeValue<byte>) ((b).Element<byte>(0x1))))), one, zero)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (RuntimeValue<byte>) (Ternary<bool, byte>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<byte>) ((a).Element<byte>(0x2))) == ((RuntimeValue<byte>) ((b).Element<byte>(0x2))))), one, zero)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (RuntimeValue<byte>) (Ternary<bool, byte>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<byte>) ((a).Element<byte>(0x3))) == ((RuntimeValue<byte>) ((b).Element<byte>(0x3))))), one, zero)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x4, (RuntimeValue<byte>) (Ternary<bool, byte>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<byte>) ((a).Element<byte>(0x4))) == ((RuntimeValue<byte>) ((b).Element<byte>(0x4))))), one, zero)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x5, (RuntimeValue<byte>) (Ternary<bool, byte>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<byte>) ((a).Element<byte>(0x5))) == ((RuntimeValue<byte>) ((b).Element<byte>(0x5))))), one, zero)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x6, (RuntimeValue<byte>) (Ternary<bool, byte>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<byte>) ((a).Element<byte>(0x6))) == ((RuntimeValue<byte>) ((b).Element<byte>(0x6))))), one, zero)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x7, (RuntimeValue<byte>) (Ternary<bool, byte>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<byte>) ((a).Element<byte>(0x7))) == ((RuntimeValue<byte>) ((b).Element<byte>(0x7))))), one, zero)));
				if((Q) != 0) {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x8, (RuntimeValue<byte>) (Ternary<bool, byte>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<byte>) ((a).Element<byte>(0x8))) == ((RuntimeValue<byte>) ((b).Element<byte>(0x8))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x9, (RuntimeValue<byte>) (Ternary<bool, byte>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<byte>) ((a).Element<byte>(0x9))) == ((RuntimeValue<byte>) ((b).Element<byte>(0x9))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xA, (RuntimeValue<byte>) (Ternary<bool, byte>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<byte>) ((a).Element<byte>(0xA))) == ((RuntimeValue<byte>) ((b).Element<byte>(0xA))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xB, (RuntimeValue<byte>) (Ternary<bool, byte>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<byte>) ((a).Element<byte>(0xB))) == ((RuntimeValue<byte>) ((b).Element<byte>(0xB))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xC, (RuntimeValue<byte>) (Ternary<bool, byte>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<byte>) ((a).Element<byte>(0xC))) == ((RuntimeValue<byte>) ((b).Element<byte>(0xC))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xD, (RuntimeValue<byte>) (Ternary<bool, byte>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<byte>) ((a).Element<byte>(0xD))) == ((RuntimeValue<byte>) ((b).Element<byte>(0xD))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xE, (RuntimeValue<byte>) (Ternary<bool, byte>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<byte>) ((a).Element<byte>(0xE))) == ((RuntimeValue<byte>) ((b).Element<byte>(0xE))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xF, (RuntimeValue<byte>) (Ternary<bool, byte>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<byte>) ((a).Element<byte>(0xF))) == ((RuntimeValue<byte>) ((b).Element<byte>(0xF))))), one, zero)));
				}
				break;
			}
			case 0x1: {
				auto one = (ushort) ((ushort) (0xFFFF));
				auto zero = (ushort) ((ushort) (0x0));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<ushort>) (Ternary<bool, ushort>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<ushort>) ((a).Element<ushort>(0x0))) == ((RuntimeValue<ushort>) ((b).Element<ushort>(0x0))))), one, zero)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<ushort>) (Ternary<bool, ushort>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<ushort>) ((a).Element<ushort>(0x1))) == ((RuntimeValue<ushort>) ((b).Element<ushort>(0x1))))), one, zero)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (RuntimeValue<ushort>) (Ternary<bool, ushort>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<ushort>) ((a).Element<ushort>(0x2))) == ((RuntimeValue<ushort>) ((b).Element<ushort>(0x2))))), one, zero)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (RuntimeValue<ushort>) (Ternary<bool, ushort>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<ushort>) ((a).Element<ushort>(0x3))) == ((RuntimeValue<ushort>) ((b).Element<ushort>(0x3))))), one, zero)));
				if((Q) != 0) {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x4, (RuntimeValue<ushort>) (Ternary<bool, ushort>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<ushort>) ((a).Element<ushort>(0x4))) == ((RuntimeValue<ushort>) ((b).Element<ushort>(0x4))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x5, (RuntimeValue<ushort>) (Ternary<bool, ushort>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<ushort>) ((a).Element<ushort>(0x5))) == ((RuntimeValue<ushort>) ((b).Element<ushort>(0x5))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x6, (RuntimeValue<ushort>) (Ternary<bool, ushort>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<ushort>) ((a).Element<ushort>(0x6))) == ((RuntimeValue<ushort>) ((b).Element<ushort>(0x6))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x7, (RuntimeValue<ushort>) (Ternary<bool, ushort>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<ushort>) ((a).Element<ushort>(0x7))) == ((RuntimeValue<ushort>) ((b).Element<ushort>(0x7))))), one, zero)));
				}
				break;
			}
			case 0x2: {
				auto one = (uint) ((uint) (0xFFFFFFFF));
				auto zero = (uint) ((uint) (0x0));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<uint>) (Ternary<bool, uint>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<float>) ((a).Element<float>(0x0))) == ((RuntimeValue<float>) ((b).Element<float>(0x0))))), one, zero)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<uint>) (Ternary<bool, uint>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<float>) ((a).Element<float>(0x1))) == ((RuntimeValue<float>) ((b).Element<float>(0x1))))), one, zero)));
				if((Q) != 0) {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (RuntimeValue<uint>) (Ternary<bool, uint>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<float>) ((a).Element<float>(0x2))) == ((RuntimeValue<float>) ((b).Element<float>(0x2))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (RuntimeValue<uint>) (Ternary<bool, uint>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<float>) ((a).Element<float>(0x3))) == ((RuntimeValue<float>) ((b).Element<float>(0x3))))), one, zero)));
				}
				break;
			}
			default: {
				auto one = (ulong) ((ulong) (-0x1));
				auto zero = (ulong) ((ulong) (0x0));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<ulong>) (Ternary<bool, ulong>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<double>) ((a).Element<double>(0x0))) == ((RuntimeValue<double>) ((b).Element<double>(0x0))))), one, zero)));
				if((Q) != 0) {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<ulong>) (Ternary<bool, ulong>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<double>) ((a).Element<double>(0x1))) == ((RuntimeValue<double>) ((b).Element<double>(0x1))))), one, zero)));
				}
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* CMEQ-zero-scalar */
bool Recompiler::CMEQ_zero_scalar(uint inst, ulong pc) {
	{
		auto size = (inst >> 22) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto V = (string) (([=](auto temp_647) -> string { switch(temp_647) { case 0x3: return string("D"); default: throw "Not implemented"; } })(size));
		switch(size) {
			case 0x3: {
				VDR[(int) (rd)] = (RuntimeValue<double>) (((RuntimeValue<ulong>) (Ternary<bool, ulong>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<long>) (((RuntimeValue<double>) (VDR[(int) (rn)])).Bitcast<long>())) == ((long) ((long) (0x0))))), (ulong) ((ulong) (-0x1)), (ulong) ((ulong) (0x0))))).Bitcast<double>());
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* CMEQ-zero-vector */
bool Recompiler::CMEQ_zero_vector(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 22) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto T = (string) (([=](auto temp_648) -> string { switch(temp_648) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))));
		auto a = ((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Store();
		VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<byte>) ((byte) ((byte) (0x0)))).CreateVector());
		switch(size) {
			case 0x0: {
				auto one = (byte) ((byte) (0xFF));
				auto zero = (byte) ((byte) (0x0));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<byte>) (Ternary<bool, byte>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<byte>) ((a).Element<byte>(0x0))) == ((byte) ((byte) (0x0))))), one, zero)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<byte>) (Ternary<bool, byte>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<byte>) ((a).Element<byte>(0x1))) == ((byte) ((byte) (0x0))))), one, zero)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (RuntimeValue<byte>) (Ternary<bool, byte>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<byte>) ((a).Element<byte>(0x2))) == ((byte) ((byte) (0x0))))), one, zero)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (RuntimeValue<byte>) (Ternary<bool, byte>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<byte>) ((a).Element<byte>(0x3))) == ((byte) ((byte) (0x0))))), one, zero)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x4, (RuntimeValue<byte>) (Ternary<bool, byte>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<byte>) ((a).Element<byte>(0x4))) == ((byte) ((byte) (0x0))))), one, zero)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x5, (RuntimeValue<byte>) (Ternary<bool, byte>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<byte>) ((a).Element<byte>(0x5))) == ((byte) ((byte) (0x0))))), one, zero)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x6, (RuntimeValue<byte>) (Ternary<bool, byte>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<byte>) ((a).Element<byte>(0x6))) == ((byte) ((byte) (0x0))))), one, zero)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x7, (RuntimeValue<byte>) (Ternary<bool, byte>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<byte>) ((a).Element<byte>(0x7))) == ((byte) ((byte) (0x0))))), one, zero)));
				if((Q) != 0) {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x8, (RuntimeValue<byte>) (Ternary<bool, byte>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<byte>) ((a).Element<byte>(0x8))) == ((byte) ((byte) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x9, (RuntimeValue<byte>) (Ternary<bool, byte>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<byte>) ((a).Element<byte>(0x9))) == ((byte) ((byte) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xA, (RuntimeValue<byte>) (Ternary<bool, byte>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<byte>) ((a).Element<byte>(0xA))) == ((byte) ((byte) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xB, (RuntimeValue<byte>) (Ternary<bool, byte>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<byte>) ((a).Element<byte>(0xB))) == ((byte) ((byte) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xC, (RuntimeValue<byte>) (Ternary<bool, byte>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<byte>) ((a).Element<byte>(0xC))) == ((byte) ((byte) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xD, (RuntimeValue<byte>) (Ternary<bool, byte>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<byte>) ((a).Element<byte>(0xD))) == ((byte) ((byte) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xE, (RuntimeValue<byte>) (Ternary<bool, byte>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<byte>) ((a).Element<byte>(0xE))) == ((byte) ((byte) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xF, (RuntimeValue<byte>) (Ternary<bool, byte>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<byte>) ((a).Element<byte>(0xF))) == ((byte) ((byte) (0x0))))), one, zero)));
				}
				break;
			}
			case 0x1: {
				auto one = (ushort) ((ushort) (0xFFFF));
				auto zero = (ushort) ((ushort) (0x0));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<ushort>) (Ternary<bool, ushort>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<ushort>) ((a).Element<ushort>(0x0))) == ((ushort) ((ushort) (0x0))))), one, zero)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<ushort>) (Ternary<bool, ushort>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<ushort>) ((a).Element<ushort>(0x1))) == ((ushort) ((ushort) (0x0))))), one, zero)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (RuntimeValue<ushort>) (Ternary<bool, ushort>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<ushort>) ((a).Element<ushort>(0x2))) == ((ushort) ((ushort) (0x0))))), one, zero)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (RuntimeValue<ushort>) (Ternary<bool, ushort>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<ushort>) ((a).Element<ushort>(0x3))) == ((ushort) ((ushort) (0x0))))), one, zero)));
				if((Q) != 0) {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x4, (RuntimeValue<ushort>) (Ternary<bool, ushort>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<ushort>) ((a).Element<ushort>(0x4))) == ((ushort) ((ushort) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x5, (RuntimeValue<ushort>) (Ternary<bool, ushort>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<ushort>) ((a).Element<ushort>(0x5))) == ((ushort) ((ushort) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x6, (RuntimeValue<ushort>) (Ternary<bool, ushort>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<ushort>) ((a).Element<ushort>(0x6))) == ((ushort) ((ushort) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x7, (RuntimeValue<ushort>) (Ternary<bool, ushort>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<ushort>) ((a).Element<ushort>(0x7))) == ((ushort) ((ushort) (0x0))))), one, zero)));
				}
				break;
			}
			case 0x2: {
				auto one = (uint) ((uint) (0xFFFFFFFF));
				auto zero = (uint) ((uint) (0x0));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<uint>) (Ternary<bool, uint>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<uint>) ((a).Element<uint>(0x0))) == ((uint) ((uint) (0x0))))), one, zero)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<uint>) (Ternary<bool, uint>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<uint>) ((a).Element<uint>(0x1))) == ((uint) ((uint) (0x0))))), one, zero)));
				if((Q) != 0) {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (RuntimeValue<uint>) (Ternary<bool, uint>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<uint>) ((a).Element<uint>(0x2))) == ((uint) ((uint) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (RuntimeValue<uint>) (Ternary<bool, uint>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<uint>) ((a).Element<uint>(0x3))) == ((uint) ((uint) (0x0))))), one, zero)));
				}
				break;
			}
			default: {
				auto one = (ulong) ((ulong) (-0x1));
				auto zero = (ulong) ((ulong) (0x0));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<ulong>) (Ternary<bool, ulong>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<ulong>) ((a).Element<ulong>(0x0))) == ((ulong) ((ulong) (0x0))))), one, zero)));
				if((Q) != 0) {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<ulong>) (Ternary<bool, ulong>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<ulong>) ((a).Element<ulong>(0x1))) == ((ulong) ((ulong) (0x0))))), one, zero)));
				}
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* CNT */
bool Recompiler::CNT(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 22) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto t = (string) (([=](auto temp_649) -> string { switch(temp_649) { case 0x0: return string("8B"); case 0x1: return string("16B"); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))));
		VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) (Call<Vector128<float>, Vector128<float>, long>(VectorCountBits, (RuntimeValue<Vector128<float>>) (VR[(int) (rn)]), (long) (([=](auto temp_650) -> long { switch(temp_650) { case 0x0: return 0x8; default: return 0x10; } })((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))))));
		return true;
	}
unimplemented:
	return false;
}

/* CSEL */
bool Recompiler::CSEL(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto cond = (inst >> 12) & 0xFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto condstr = (string) (([=](auto temp_651) -> string { switch(temp_651) { case 0x0: return string("EQ"); case 0x1: return string("NE"); case 0x2: return string("CS"); case 0x3: return string("CC"); case 0x4: return string("MI"); case 0x5: return string("PL"); case 0x6: return string("VS"); case 0x7: return string("VC"); case 0x8: return string("HI"); case 0x9: return string("LS"); case 0xA: return string("GE"); case 0xB: return string("LT"); case 0xC: return string("GT"); case 0xD: return string("LE"); default: return string("AL"); } })(cond));
		auto result = ((RuntimeValue<bool>) (([=](auto temp_652) -> RuntimeValue<bool> { switch(temp_652) { case 0x0: return (RuntimeValue<bool>) ((RuntimeValue<bool>) (NZCV_ZR)); case 0x1: return (RuntimeValue<bool>) ((RuntimeValue<bool>) (NZCV_CR)); case 0x2: return (RuntimeValue<bool>) ((RuntimeValue<bool>) (NZCV_NR)); case 0x3: return (RuntimeValue<bool>) ((RuntimeValue<bool>) (NZCV_VR)); case 0x4: return (RuntimeValue<bool>) ((RuntimeValue<bool>) ((((RuntimeValue<bool>) ((RuntimeValue<bool>) (NZCV_CR))) & ((RuntimeValue<bool>) ((RuntimeValue<bool>) (!((RuntimeValue<bool>) (NZCV_ZR)))))))); case 0x5: return (RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<bool>) (NZCV_NR)) == ((RuntimeValue<bool>) (NZCV_VR)))); case 0x6: return (RuntimeValue<bool>) ((RuntimeValue<bool>) ((((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<bool>) (NZCV_NR)) == ((RuntimeValue<bool>) (NZCV_VR))))) & ((RuntimeValue<bool>) ((RuntimeValue<bool>) (!((RuntimeValue<bool>) (NZCV_ZR)))))))); default: return 0x1; } })((byte) ((cond) >> (uint) (0x1))))).Store();
		LabelTag temp_653 = DefineLabel(), temp_655 = DefineLabel(), temp_654 = DefineLabel();
		BranchIf((RuntimeValue<bool>) (((byte) ((((byte) ((byte) ((((ulong) (cond)) & ((ulong) (0x1)))))) & ((byte) ((bool) (((cond) != (0xF)) ? 1U : 0U)))))) != 0 ? ((RuntimeValue<bool>) (!(result))) : (result)), temp_653, temp_655);
		Label(temp_653);
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((rn) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rn]())));
		} else {
			XR[(int) rd] = (RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]());
		}
		Branch(temp_654);
		Label(temp_655);
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]())));
		} else {
			XR[(int) rd] = (RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]());
		}
		Branch(temp_654);
		Label(temp_654);
		return true;
	}
unimplemented:
	return false;
}

/* CSINC */
bool Recompiler::CSINC(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto cond = (inst >> 12) & 0xFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto condstr = (string) (([=](auto temp_656) -> string { switch(temp_656) { case 0x0: return string("EQ"); case 0x1: return string("NE"); case 0x2: return string("CS"); case 0x3: return string("CC"); case 0x4: return string("MI"); case 0x5: return string("PL"); case 0x6: return string("VS"); case 0x7: return string("VC"); case 0x8: return string("HI"); case 0x9: return string("LS"); case 0xA: return string("GE"); case 0xB: return string("LT"); case 0xC: return string("GT"); case 0xD: return string("LE"); default: return string("AL"); } })(cond));
		auto result = ((RuntimeValue<bool>) (([=](auto temp_657) -> RuntimeValue<bool> { switch(temp_657) { case 0x0: return (RuntimeValue<bool>) ((RuntimeValue<bool>) (NZCV_ZR)); case 0x1: return (RuntimeValue<bool>) ((RuntimeValue<bool>) (NZCV_CR)); case 0x2: return (RuntimeValue<bool>) ((RuntimeValue<bool>) (NZCV_NR)); case 0x3: return (RuntimeValue<bool>) ((RuntimeValue<bool>) (NZCV_VR)); case 0x4: return (RuntimeValue<bool>) ((RuntimeValue<bool>) ((((RuntimeValue<bool>) ((RuntimeValue<bool>) (NZCV_CR))) & ((RuntimeValue<bool>) ((RuntimeValue<bool>) (!((RuntimeValue<bool>) (NZCV_ZR)))))))); case 0x5: return (RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<bool>) (NZCV_NR)) == ((RuntimeValue<bool>) (NZCV_VR)))); case 0x6: return (RuntimeValue<bool>) ((RuntimeValue<bool>) ((((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<bool>) (NZCV_NR)) == ((RuntimeValue<bool>) (NZCV_VR))))) & ((RuntimeValue<bool>) ((RuntimeValue<bool>) (!((RuntimeValue<bool>) (NZCV_ZR)))))))); default: return 0x1; } })((byte) ((cond) >> (uint) (0x1))))).Store();
		LabelTag temp_658 = DefineLabel(), temp_660 = DefineLabel(), temp_659 = DefineLabel();
		BranchIf((RuntimeValue<bool>) (((byte) ((((byte) ((byte) ((((ulong) (cond)) & ((ulong) (0x1)))))) & ((byte) ((bool) (((cond) != (0xF)) ? 1U : 0U)))))) != 0 ? ((RuntimeValue<bool>) (!(result))) : (result)), temp_658, temp_660);
		Label(temp_658);
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((rn) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rn]())));
		} else {
			XR[(int) rd] = (RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]());
		}
		Branch(temp_659);
		Label(temp_660);
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]())))) + ((RuntimeValue<uint>) (RuntimeValue<uint>) ((uint) ((uint) (0x1))))));
		} else {
			XR[(int) rd] = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]()))) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x1)));
		}
		Branch(temp_659);
		Label(temp_659);
		return true;
	}
unimplemented:
	return false;
}

/* CSINV */
bool Recompiler::CSINV(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto cond = (inst >> 12) & 0xFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto condstr = (string) (([=](auto temp_661) -> string { switch(temp_661) { case 0x0: return string("EQ"); case 0x1: return string("NE"); case 0x2: return string("CS"); case 0x3: return string("CC"); case 0x4: return string("MI"); case 0x5: return string("PL"); case 0x6: return string("VS"); case 0x7: return string("VC"); case 0x8: return string("HI"); case 0x9: return string("LS"); case 0xA: return string("GE"); case 0xB: return string("LT"); case 0xC: return string("GT"); case 0xD: return string("LE"); default: return string("AL"); } })(cond));
		auto result = ((RuntimeValue<bool>) (([=](auto temp_662) -> RuntimeValue<bool> { switch(temp_662) { case 0x0: return (RuntimeValue<bool>) ((RuntimeValue<bool>) (NZCV_ZR)); case 0x1: return (RuntimeValue<bool>) ((RuntimeValue<bool>) (NZCV_CR)); case 0x2: return (RuntimeValue<bool>) ((RuntimeValue<bool>) (NZCV_NR)); case 0x3: return (RuntimeValue<bool>) ((RuntimeValue<bool>) (NZCV_VR)); case 0x4: return (RuntimeValue<bool>) ((RuntimeValue<bool>) ((((RuntimeValue<bool>) ((RuntimeValue<bool>) (NZCV_CR))) & ((RuntimeValue<bool>) ((RuntimeValue<bool>) (!((RuntimeValue<bool>) (NZCV_ZR)))))))); case 0x5: return (RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<bool>) (NZCV_NR)) == ((RuntimeValue<bool>) (NZCV_VR)))); case 0x6: return (RuntimeValue<bool>) ((RuntimeValue<bool>) ((((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<bool>) (NZCV_NR)) == ((RuntimeValue<bool>) (NZCV_VR))))) & ((RuntimeValue<bool>) ((RuntimeValue<bool>) (!((RuntimeValue<bool>) (NZCV_ZR)))))))); default: return 0x1; } })((byte) ((cond) >> (uint) (0x1))))).Store();
		LabelTag temp_663 = DefineLabel(), temp_665 = DefineLabel(), temp_664 = DefineLabel();
		BranchIf((RuntimeValue<bool>) (((byte) ((((byte) ((byte) ((((ulong) (cond)) & ((ulong) (0x1)))))) & ((byte) ((bool) (((cond) != (0xF)) ? 1U : 0U)))))) != 0 ? ((RuntimeValue<bool>) (!(result))) : (result)), temp_663, temp_665);
		Label(temp_663);
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((rn) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rn]())));
		} else {
			XR[(int) rd] = (RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]());
		}
		Branch(temp_664);
		Label(temp_665);
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (~((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]())))));
		} else {
			XR[(int) rd] = (RuntimeValue<ulong>) (~((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())));
		}
		Branch(temp_664);
		Label(temp_664);
		return true;
	}
unimplemented:
	return false;
}

/* CSNEG */
bool Recompiler::CSNEG(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto cond = (inst >> 12) & 0xFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto condstr = (string) (([=](auto temp_666) -> string { switch(temp_666) { case 0x0: return string("EQ"); case 0x1: return string("NE"); case 0x2: return string("CS"); case 0x3: return string("CC"); case 0x4: return string("MI"); case 0x5: return string("PL"); case 0x6: return string("VS"); case 0x7: return string("VC"); case 0x8: return string("HI"); case 0x9: return string("LS"); case 0xA: return string("GE"); case 0xB: return string("LT"); case 0xC: return string("GT"); case 0xD: return string("LE"); default: return string("AL"); } })(cond));
		auto result = ((RuntimeValue<bool>) (([=](auto temp_667) -> RuntimeValue<bool> { switch(temp_667) { case 0x0: return (RuntimeValue<bool>) ((RuntimeValue<bool>) (NZCV_ZR)); case 0x1: return (RuntimeValue<bool>) ((RuntimeValue<bool>) (NZCV_CR)); case 0x2: return (RuntimeValue<bool>) ((RuntimeValue<bool>) (NZCV_NR)); case 0x3: return (RuntimeValue<bool>) ((RuntimeValue<bool>) (NZCV_VR)); case 0x4: return (RuntimeValue<bool>) ((RuntimeValue<bool>) ((((RuntimeValue<bool>) ((RuntimeValue<bool>) (NZCV_CR))) & ((RuntimeValue<bool>) ((RuntimeValue<bool>) (!((RuntimeValue<bool>) (NZCV_ZR)))))))); case 0x5: return (RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<bool>) (NZCV_NR)) == ((RuntimeValue<bool>) (NZCV_VR)))); case 0x6: return (RuntimeValue<bool>) ((RuntimeValue<bool>) ((((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<bool>) (NZCV_NR)) == ((RuntimeValue<bool>) (NZCV_VR))))) & ((RuntimeValue<bool>) ((RuntimeValue<bool>) (!((RuntimeValue<bool>) (NZCV_ZR)))))))); default: return 0x1; } })((byte) ((cond) >> (uint) (0x1))))).Store();
		LabelTag temp_668 = DefineLabel(), temp_670 = DefineLabel(), temp_669 = DefineLabel();
		BranchIf((RuntimeValue<bool>) (((byte) ((((byte) ((byte) ((((ulong) (cond)) & ((ulong) (0x1)))))) & ((byte) ((bool) (((cond) != (0xF)) ? 1U : 0U)))))) != 0 ? ((RuntimeValue<bool>) (!(result))) : (result)), temp_668, temp_670);
		Label(temp_668);
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((rn) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rn]())));
		} else {
			XR[(int) rd] = (RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]());
		}
		Branch(temp_669);
		Label(temp_670);
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<int>) (-((RuntimeValue<int>) ((RuntimeValue<int>) ((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]())))))))));
		} else {
			XR[(int) rd] = (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (-((RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())))))));
		}
		Branch(temp_669);
		Label(temp_669);
		return true;
	}
unimplemented:
	return false;
}

/* DMB */
bool Recompiler::DMB(uint inst, ulong pc) {
	{
		auto m = (inst >> 8) & 0xFU;
		auto option = (string) (([=](auto temp_671) -> string { switch(temp_671) { case 0xF: return string("SY"); case 0xE: return string("ST"); case 0xD: return string("LD"); case 0xB: return string("ISH"); case 0xA: return string("ISHST"); case 0x9: return string("ISHLD"); case 0x7: return string("NSH"); case 0x6: return string("NSHST"); case 0x5: return string("NSHLD"); case 0x3: return string("OSH"); case 0x2: return string("OSHST"); default: return string("OSHLD"); } })(m));
		return true;
	}
unimplemented:
	return false;
}

/* DSB */
bool Recompiler::DSB(uint inst, ulong pc) {
	{
		auto crm = (inst >> 8) & 0xFU;
		auto option = (string) (([=](auto temp_672) -> string { switch(temp_672) { case 0xF: return string("SY"); case 0xE: return string("ST"); case 0xD: return string("LD"); case 0xB: return string("ISH"); case 0xA: return string("ISHST"); case 0x9: return string("ISHLD"); case 0x7: return string("NSH"); case 0x6: return string("NSHST"); case 0x5: return string("NSHLD"); case 0x3: return string("OSH"); case 0x2: return string("OSHST"); default: return string("OSHLD"); } })(crm));
		return true;
	}
unimplemented:
	return false;
}

/* DUP-element-scalar */
bool Recompiler::DUP_element_scalar(uint inst, ulong pc) {
	{
		auto imm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto T = string("");
		auto index = 0x0;
		auto size = 0x0;
		if(((bool) ((((byte) ((((ulong) (imm)) & ((ulong) (0xF))))) == (0x0)) ? 1U : 0U)) != 0) {
			throw "Not implemented";
		} else {
			if(((bool) ((((byte) ((((ulong) (imm)) & ((ulong) (0x1))))) == (0x1)) ? 1U : 0U)) != 0) {
				T = string("B");
				index = (byte) ((imm) >> (uint) (0x1));
				size = 0x1;
			} else {
				if(((bool) ((((byte) ((((ulong) (imm)) & ((ulong) (0x3))))) == (0x2)) ? 1U : 0U)) != 0) {
					T = string("H");
					index = (byte) ((imm) >> (uint) (0x2));
					size = 0x2;
				} else {
					if(((bool) ((((byte) ((((ulong) (imm)) & ((ulong) (0x7))))) == (0x4)) ? 1U : 0U)) != 0) {
						T = string("S");
						index = (byte) ((imm) >> (uint) (0x3));
						size = 0x4;
					} else {
						T = string("D");
						index = (byte) ((imm) >> (uint) (0x4));
						size = 0x8;
					}
				}
			}
		}
		auto sv = ((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Store();
		switch(size) {
			case 0x1: {
				VBR[(int) (rd)] = (RuntimeValue<byte>) ((sv).Element<byte>(index));
				break;
			}
			case 0x2: {
				VHR[(int) (rd)] = (RuntimeValue<ushort>) ((sv).Element<ushort>(index));
				break;
			}
			case 0x4: {
				VSR[(int) (rd)] = (RuntimeValue<float>) ((sv).Element<float>(index));
				break;
			}
			default: {
				VDR[(int) (rd)] = (RuntimeValue<double>) ((sv).Element<double>(index));
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* DUP-element-vector */
bool Recompiler::DUP_element_vector(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto imm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto Ts = string("");
		auto T = string("");
		auto index = 0x0;
		auto size = 0x0;
		if(((bool) ((((byte) ((((ulong) (imm)) & ((ulong) (0xF))))) == (0x0)) ? 1U : 0U)) != 0) {
			throw "Not implemented";
		} else {
			if(((bool) ((((byte) ((((ulong) (imm)) & ((ulong) (0x1))))) == (0x1)) ? 1U : 0U)) != 0) {
				Ts = string("B");
				T = (string) ((Q != 0) ? (string("16B")) : (string("8B")));
				index = (byte) ((imm) >> (uint) (0x1));
				size = 0x1;
			} else {
				if(((bool) ((((byte) ((((ulong) (imm)) & ((ulong) (0x3))))) == (0x2)) ? 1U : 0U)) != 0) {
					Ts = string("H");
					T = (string) ((Q != 0) ? (string("8H")) : (string("4H")));
					index = (byte) ((imm) >> (uint) (0x2));
					size = 0x2;
				} else {
					if(((bool) ((((byte) ((((ulong) (imm)) & ((ulong) (0x7))))) == (0x4)) ? 1U : 0U)) != 0) {
						Ts = string("S");
						T = (string) ((Q != 0) ? (string("4S")) : (string("2S")));
						index = (byte) ((imm) >> (uint) (0x3));
						size = 0x4;
					} else {
						Ts = string("D");
						T = (string) ((Q != 0) ? (string("2D")) : throw "Not implemented");
						index = (byte) ((imm) >> (uint) (0x4));
						size = 0x8;
					}
				}
			}
		}
		auto sv = ((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Store();
		auto tv = ((RuntimeValue<Vector128<float>>) (([=](auto temp_673) -> RuntimeValue<Vector128<float>> { switch(temp_673) { case 0x1: return (RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) (((RuntimeValue<byte>) ((RuntimeValue<byte>) ((sv).Element<byte>(index)))).CreateVector())); case 0x2: return (RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) (((RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((sv).Element<ushort>(index)))).CreateVector())); case 0x4: return (RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) (((RuntimeValue<float>) ((RuntimeValue<float>) ((sv).Element<float>(index)))).CreateVector())); default: return (RuntimeValue<Vector128<float>>) (((RuntimeValue<double>) ((RuntimeValue<double>) ((sv).Element<double>(index)))).CreateVector()); } })(size))).Store();
		VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) ((Q) != 0 ? (tv) : ((RuntimeValue<Vector128<float>>) (tv)));
		return true;
	}
unimplemented:
	return false;
}

/* DUP-general */
bool Recompiler::DUP_general(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto imm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto size = ((bool) ((((byte) ((((ulong) (imm)) & ((ulong) (0xF))))) == (0x0)) ? 1U : 0U) != 0) ? throw "Not implemented" : ((long) (((bool) ((((byte) ((((ulong) (imm)) & ((ulong) (0xF))))) == (0x8)) ? 1U : 0U) != 0) ? (0x40) : (0x20)));
		auto r = (string) (((bool) (((size) == (0x40)) ? 1U : 0U) != 0) ? (string("X")) : (string("W")));
		auto T = ((bool) ((((byte) ((((ulong) (imm)) & ((ulong) (0xF))))) == (0x0)) ? 1U : 0U) != 0) ? throw "Not implemented" : ((string) (((bool) ((((byte) ((((ulong) (imm)) & ((ulong) (0x1))))) == (0x1)) ? 1U : 0U) != 0) ? ((string) ((Q != 0) ? (string("16B")) : (string("8B")))) : ((string) (((bool) ((((byte) ((((ulong) (imm)) & ((ulong) (0x3))))) == (0x2)) ? 1U : 0U) != 0) ? ((string) ((Q != 0) ? (string("8H")) : (string("4H")))) : ((string) (((bool) ((((byte) ((((ulong) (imm)) & ((ulong) (0x7))))) == (0x4)) ? 1U : 0U) != 0) ? ((string) ((Q != 0) ? (string("4S")) : (string("2S")))) : ((string) ((Q != 0) ? (string("2D")) : throw "Not implemented"))))))));
		auto src = ((RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]())).Store();
		VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) (((bool) ((((byte) ((((ulong) (imm)) & ((ulong) (0x1))))) == (0x1)) ? 1U : 0U)) != 0 ? ((RuntimeValue<Vector128<float>>) ((Q) != 0 ? ((RuntimeValue<Vector128<float>>) (((RuntimeValue<byte>) ((RuntimeValue<byte>) ((RuntimeValue<byte>) (src)))).CreateVector())) : ((RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) (((RuntimeValue<byte>) ((RuntimeValue<byte>) ((RuntimeValue<byte>) (src)))).CreateVector()))))) : ((RuntimeValue<Vector128<float>>) (((bool) ((((byte) ((((ulong) (imm)) & ((ulong) (0x3))))) == (0x2)) ? 1U : 0U)) != 0 ? ((RuntimeValue<Vector128<float>>) ((Q) != 0 ? ((RuntimeValue<Vector128<float>>) (((RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((RuntimeValue<ushort>) (src)))).CreateVector())) : ((RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) (((RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((RuntimeValue<ushort>) (src)))).CreateVector()))))) : ((RuntimeValue<Vector128<float>>) (((bool) ((((byte) ((((ulong) (imm)) & ((ulong) (0x7))))) == (0x4)) ? 1U : 0U)) != 0 ? ((RuntimeValue<Vector128<float>>) ((Q) != 0 ? ((RuntimeValue<Vector128<float>>) (((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) (src)))).CreateVector())) : ((RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) (((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) (src)))).CreateVector()))))) : ((RuntimeValue<Vector128<float>>) ((Q) != 0 ? ((RuntimeValue<Vector128<float>>) (((RuntimeValue<ulong>) (src)).CreateVector())) : throw "Not implemented")))))));
		return true;
	}
unimplemented:
	return false;
}

/* EON-shifted-register */
bool Recompiler::EON_shifted_register(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto shift = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto imm = (inst >> 10) & 0x3FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto shiftstr = (string) (([=](auto temp_674) -> string { switch(temp_674) { case 0x0: return string("LSL"); case 0x1: return string("LSR"); case 0x2: return string("ASR"); default: return string("ROR"); } })(shift));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((((RuntimeValue<uint>) ((RuntimeValue<uint>) ((rn) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rn]())))) ^ ((RuntimeValue<uint>) ((RuntimeValue<uint>) (~((RuntimeValue<uint>) (([=](auto temp_675) -> RuntimeValue<uint> { switch(temp_675) { case 0x0: return (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))))) << (imm))); case 0x1: return (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))) >> (imm))); case 0x2: return (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<int>) (((RuntimeValue<int>) ((RuntimeValue<int>) ((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))))) >> (imm))))); default: return (RuntimeValue<uint>) ((((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))) << ((RuntimeValue<uint>) (32 - (imm)))) | (((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))) >> ((RuntimeValue<uint>) (imm)))); } })(shift)))))))));
		} else {
			XR[(int) rd] = (RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]()))) ^ ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (~((RuntimeValue<ulong>) (([=](auto temp_676) -> RuntimeValue<ulong> { switch(temp_676) { case 0x0: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())))) << (imm))); case 0x1: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())) >> (imm))); case 0x2: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (((RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())))) >> (imm))))); default: return (RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())) << ((RuntimeValue<uint>) (64 - (imm)))) | (((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())) >> ((RuntimeValue<uint>) (imm)))); } })(shift))))))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* EOR-immediate */
bool Recompiler::EOR_immediate(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto up = (inst >> 22) & 0x1U;
		auto immr = (inst >> 16) & 0x3FU;
		auto imms = (inst >> 10) & 0x3FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto imm = (ulong) (MakeWMask(up, imms, immr, (long) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (0x20) : (0x40)), 0x1));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			if(rd == 31)
				SPR = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((((RuntimeValue<uint>) ((RuntimeValue<uint>) ((rn) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rn]())))) ^ ((RuntimeValue<uint>) ((uint) ((uint) (imm)))))));
			else
				XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((((RuntimeValue<uint>) ((RuntimeValue<uint>) ((rn) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rn]())))) ^ ((RuntimeValue<uint>) ((uint) ((uint) (imm)))))));
		} else {
			if(rd == 31)
				SPR = (RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]()))) ^ ((RuntimeValue<ulong>) (imm))));
			else
				XR[(int) rd] = (RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]()))) ^ ((RuntimeValue<ulong>) (imm))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* EOR-shifted-register */
bool Recompiler::EOR_shifted_register(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto shift = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto imm = (inst >> 10) & 0x3FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto shiftstr = (string) (([=](auto temp_677) -> string { switch(temp_677) { case 0x0: return string("LSL"); case 0x1: return string("LSR"); case 0x2: return string("ASR"); default: return string("ROR"); } })(shift));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((((RuntimeValue<uint>) ((RuntimeValue<uint>) ((rn) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rn]())))) ^ ((RuntimeValue<uint>) ((RuntimeValue<uint>) (([=](auto temp_678) -> RuntimeValue<uint> { switch(temp_678) { case 0x0: return (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))))) << (imm))); case 0x1: return (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))) >> (imm))); case 0x2: return (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<int>) (((RuntimeValue<int>) ((RuntimeValue<int>) ((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))))) >> (imm))))); default: return (RuntimeValue<uint>) ((((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))) << ((RuntimeValue<uint>) (32 - (imm)))) | (((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))) >> ((RuntimeValue<uint>) (imm)))); } })(shift)))))));
		} else {
			XR[(int) rd] = (RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]()))) ^ ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (([=](auto temp_679) -> RuntimeValue<ulong> { switch(temp_679) { case 0x0: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())))) << (imm))); case 0x1: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())) >> (imm))); case 0x2: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (((RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())))) >> (imm))))); default: return (RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())) << ((RuntimeValue<uint>) (64 - (imm)))) | (((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())) >> ((RuntimeValue<uint>) (imm)))); } })(shift))))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* EOR-vector */
bool Recompiler::EOR_vector(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto T = (string) ((Q != 0) ? (string("16B")) : (string("8B")));
		auto v = ((RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) ((((RuntimeValue<Vector128<byte>>) ((RuntimeValue<Vector128<float>>) (VR[(int) (rn)]))) ^ ((RuntimeValue<Vector128<byte>>) ((RuntimeValue<Vector128<float>>) (VR[(int) (rm)]))))))).Store();
		VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) ((Q) != 0 ? (v) : ((RuntimeValue<Vector128<float>>) (v)));
		return true;
	}
unimplemented:
	return false;
}

/* EXT */
bool Recompiler::EXT(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto index = (inst >> 11) & 0xFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto ts = (string) ((Q != 0) ? (string("16B")) : (string("8B")));
		VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) (Call<Vector128<float>, Vector128<float>, Vector128<float>, uint, uint>(VectorExtract, (RuntimeValue<Vector128<float>>) (VR[(int) (rn)]), (RuntimeValue<Vector128<float>>) (VR[(int) (rm)]), Q, index));
		return true;
	}
unimplemented:
	return false;
}

/* EXTR */
bool Recompiler::EXTR(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto o = (inst >> 22) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto lsb = (inst >> 10) & 0x3FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((((RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) ((rn) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rn]()))) << ((ulong) (((ulong) (long) (0x20)) - ((ulong) (byte) (lsb))))))) | ((RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))) >> (lsb)))))));
		} else {
			XR[(int) rd] = (RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]())) << ((ulong) (((ulong) (long) (0x40)) - ((ulong) (byte) (lsb))))))) | ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())) >> (lsb))))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* FABD-scalar */
bool Recompiler::FABD_scalar(uint inst, ulong pc) {
	{
		auto size = (inst >> 22) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_680) -> string { switch(temp_680) { case 0x0: return string("S"); case 0x1: return string("D"); default: throw "Not implemented"; } })(size));
		switch(size) {
			case 0x0: {
				VSR[(int) (rd)] = (RuntimeValue<float>) (((RuntimeValue<float>) (((RuntimeValue<float>) (RuntimeValue<float>) ((RuntimeValue<float>) (VSR[(int) (rn)]))) - ((RuntimeValue<float>) (RuntimeValue<float>) ((RuntimeValue<float>) (VSR[(int) (rm)]))))).Abs());
				break;
			}
			case 0x1: {
				VDR[(int) (rd)] = (RuntimeValue<double>) (((RuntimeValue<double>) (((RuntimeValue<double>) (RuntimeValue<double>) ((RuntimeValue<double>) (VDR[(int) (rn)]))) - ((RuntimeValue<double>) (RuntimeValue<double>) ((RuntimeValue<double>) (VDR[(int) (rm)]))))).Abs());
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FABS-scalar */
bool Recompiler::FABS_scalar(uint inst, ulong pc) {
	{
		auto type = (inst >> 22) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_681) -> string { switch(temp_681) { case 0x0: return string("S"); case 0x1: return string("D"); default: throw "Not implemented"; } })(type));
		switch(type) {
			case 0x0: {
				VSR[(int) (rd)] = (RuntimeValue<float>) (((RuntimeValue<float>) (VSR[(int) (rn)])).Abs());
				break;
			}
			case 0x1: {
				VDR[(int) (rd)] = (RuntimeValue<double>) (((RuntimeValue<double>) (VDR[(int) (rn)])).Abs());
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FABS-vector */
bool Recompiler::FABS_vector(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 22) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto t = (string) (([=](auto temp_682) -> string { switch(temp_682) { case 0x0: return string("2S"); case 0x1: return string("4S"); case 0x3: return string("2D"); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))));
		switch((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))) {
			case 0x0: {
				auto a = ((RuntimeValue<float>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x0))).Store();
				auto b = ((RuntimeValue<float>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x1))).Store();
				VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<float>) ((float) ((float) (0x0)))).CreateVector());
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<float>) ((a).Abs()));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<float>) ((b).Abs()));
				break;
			}
			case 0x1: {
				auto a = ((RuntimeValue<float>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x0))).Store();
				auto b = ((RuntimeValue<float>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x1))).Store();
				auto c = ((RuntimeValue<float>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x2))).Store();
				auto d = ((RuntimeValue<float>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x3))).Store();
				VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<float>) ((float) ((float) (0x0)))).CreateVector());
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<float>) ((a).Abs()));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<float>) ((b).Abs()));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (RuntimeValue<float>) ((c).Abs()));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (RuntimeValue<float>) ((d).Abs()));
				break;
			}
			case 0x3: {
				auto a = ((RuntimeValue<double>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<double>(0x0))).Store();
				auto b = ((RuntimeValue<double>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<double>(0x1))).Store();
				VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<double>) ((double) ((double) (0x0)))).CreateVector());
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<double>) ((a).Abs()));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<double>) ((b).Abs()));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FADD-scalar */
bool Recompiler::FADD_scalar(uint inst, ulong pc) {
	{
		auto type = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_683) -> string { switch(temp_683) { case 0x3: return string("H"); case 0x0: return string("S"); case 0x1: return string("D"); default: throw "Not implemented"; } })(type));
		switch(type) {
			case 0x3: {
				VHR[(int) (rd)] = (RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((RuntimeValue<ushort>) (((RuntimeValue<ushort>) (RuntimeValue<ushort>) ((RuntimeValue<ushort>) (VHR[(int) (rn)]))) + ((RuntimeValue<ushort>) (RuntimeValue<ushort>) ((RuntimeValue<ushort>) (VHR[(int) (rm)]))))));
				break;
			}
			case 0x0: {
				VSR[(int) (rd)] = (RuntimeValue<float>) (((RuntimeValue<float>) (RuntimeValue<float>) ((RuntimeValue<float>) (VSR[(int) (rn)]))) + ((RuntimeValue<float>) (RuntimeValue<float>) ((RuntimeValue<float>) (VSR[(int) (rm)]))));
				break;
			}
			case 0x1: {
				VDR[(int) (rd)] = (RuntimeValue<double>) (((RuntimeValue<double>) (RuntimeValue<double>) ((RuntimeValue<double>) (VDR[(int) (rn)]))) + ((RuntimeValue<double>) (RuntimeValue<double>) ((RuntimeValue<double>) (VDR[(int) (rm)]))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FADD-vector */
bool Recompiler::FADD_vector(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 22) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto ts = (string) (([=](auto temp_684) -> string { switch(temp_684) { case 0x0: return string("2S"); case 0x1: return string("4S"); case 0x3: return string("2D"); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))));
		switch((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))) {
			case 0x0: {
				VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])) + ((RuntimeValue<Vector128<float>>) (VR[(int) (rm)]))));
				break;
			}
			case 0x1: {
				VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])) + ((RuntimeValue<Vector128<float>>) (VR[(int) (rm)])));
				break;
			}
			case 0x3: {
				VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<double>>) ((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])) + (RuntimeValue<Vector128<double>>) ((RuntimeValue<Vector128<float>>) (VR[(int) (rm)]))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FADDP-scalar */
bool Recompiler::FADDP_scalar(uint inst, ulong pc) {
	{
		auto size = (inst >> 22) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("S")) : (string("D")));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			VSR[(int) (rd)] = (RuntimeValue<float>) (((RuntimeValue<float>) (RuntimeValue<float>) ((RuntimeValue<float>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x0)))) + ((RuntimeValue<float>) (RuntimeValue<float>) ((RuntimeValue<float>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x1)))));
		} else {
			VDR[(int) (rd)] = (RuntimeValue<double>) (((RuntimeValue<double>) (RuntimeValue<double>) ((RuntimeValue<double>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<double>(0x0)))) + ((RuntimeValue<double>) (RuntimeValue<double>) ((RuntimeValue<double>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<double>(0x1)))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* FADDP-vector */
bool Recompiler::FADDP_vector(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 22) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto t = (string) (([=](auto temp_685) -> string { switch(temp_685) { case 0x0: return string("2S"); case 0x1: return string("4S"); case 0x3: return string("2D"); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))));
		switch((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))) {
			case 0x0: {
				auto a = ((RuntimeValue<float>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x0))).Store();
				auto b = ((RuntimeValue<float>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x1))).Store();
				auto c = ((RuntimeValue<float>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<float>(0x0))).Store();
				auto d = ((RuntimeValue<float>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<float>(0x1))).Store();
				VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<float>) ((float) ((float) (0x0)))).CreateVector());
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<float>) (((RuntimeValue<float>) (RuntimeValue<float>) (a)) + ((RuntimeValue<float>) (RuntimeValue<float>) (b))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<float>) (((RuntimeValue<float>) (RuntimeValue<float>) (c)) + ((RuntimeValue<float>) (RuntimeValue<float>) (d))));
				break;
			}
			case 0x1: {
				auto a = ((RuntimeValue<float>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x0))).Store();
				auto b = ((RuntimeValue<float>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x1))).Store();
				auto c = ((RuntimeValue<float>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x2))).Store();
				auto d = ((RuntimeValue<float>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x3))).Store();
				auto e = ((RuntimeValue<float>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<float>(0x0))).Store();
				auto f = ((RuntimeValue<float>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<float>(0x1))).Store();
				auto g = ((RuntimeValue<float>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<float>(0x2))).Store();
				auto h = ((RuntimeValue<float>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<float>(0x3))).Store();
				VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<float>) ((float) ((float) (0x0)))).CreateVector());
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<float>) (((RuntimeValue<float>) (RuntimeValue<float>) (a)) + ((RuntimeValue<float>) (RuntimeValue<float>) (b))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<float>) (((RuntimeValue<float>) (RuntimeValue<float>) (c)) + ((RuntimeValue<float>) (RuntimeValue<float>) (d))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (RuntimeValue<float>) (((RuntimeValue<float>) (RuntimeValue<float>) (e)) + ((RuntimeValue<float>) (RuntimeValue<float>) (f))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (RuntimeValue<float>) (((RuntimeValue<float>) (RuntimeValue<float>) (g)) + ((RuntimeValue<float>) (RuntimeValue<float>) (h))));
				break;
			}
			case 0x3: {
				auto a = ((RuntimeValue<double>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<double>(0x0))).Store();
				auto b = ((RuntimeValue<double>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<double>(0x1))).Store();
				auto c = ((RuntimeValue<double>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<double>(0x0))).Store();
				auto d = ((RuntimeValue<double>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<double>(0x1))).Store();
				VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<float>) ((float) ((float) (0x0)))).CreateVector());
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<double>) (((RuntimeValue<double>) (RuntimeValue<double>) (a)) + ((RuntimeValue<double>) (RuntimeValue<double>) (b))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<double>) (((RuntimeValue<double>) (RuntimeValue<double>) (c)) + ((RuntimeValue<double>) (RuntimeValue<double>) (d))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FCCMP */
bool Recompiler::FCCMP(uint inst, ulong pc) {
	{
		auto type = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto cond = (inst >> 12) & 0xFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto nzcv = (inst >> 0) & 0xFU;
		auto r = (string) (([=](auto temp_686) -> string { switch(temp_686) { case 0x3: return string("H"); case 0x0: return string("S"); case 0x1: return string("D"); default: throw "Not implemented"; } })(type));
		auto condstr = (string) (([=](auto temp_687) -> string { switch(temp_687) { case 0x0: return string("EQ"); case 0x1: return string("NE"); case 0x2: return string("CS"); case 0x3: return string("CC"); case 0x4: return string("MI"); case 0x5: return string("PL"); case 0x6: return string("VS"); case 0x7: return string("VC"); case 0x8: return string("HI"); case 0x9: return string("LS"); case 0xA: return string("GE"); case 0xB: return string("LT"); case 0xC: return string("GT"); case 0xD: return string("LE"); default: return string("AL"); } })(cond));
		auto result = ((RuntimeValue<bool>) (([=](auto temp_688) -> RuntimeValue<bool> { switch(temp_688) { case 0x0: return (RuntimeValue<bool>) ((RuntimeValue<bool>) (NZCV_ZR)); case 0x1: return (RuntimeValue<bool>) ((RuntimeValue<bool>) (NZCV_CR)); case 0x2: return (RuntimeValue<bool>) ((RuntimeValue<bool>) (NZCV_NR)); case 0x3: return (RuntimeValue<bool>) ((RuntimeValue<bool>) (NZCV_VR)); case 0x4: return (RuntimeValue<bool>) ((RuntimeValue<bool>) ((((RuntimeValue<bool>) ((RuntimeValue<bool>) (NZCV_CR))) & ((RuntimeValue<bool>) ((RuntimeValue<bool>) (!((RuntimeValue<bool>) (NZCV_ZR)))))))); case 0x5: return (RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<bool>) (NZCV_NR)) == ((RuntimeValue<bool>) (NZCV_VR)))); case 0x6: return (RuntimeValue<bool>) ((RuntimeValue<bool>) ((((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<bool>) (NZCV_NR)) == ((RuntimeValue<bool>) (NZCV_VR))))) & ((RuntimeValue<bool>) ((RuntimeValue<bool>) (!((RuntimeValue<bool>) (NZCV_ZR)))))))); default: return 0x1; } })((byte) ((cond) >> (uint) (0x1))))).Store();
		LabelTag temp_689 = DefineLabel(), temp_691 = DefineLabel(), temp_690 = DefineLabel();
		BranchIf((RuntimeValue<bool>) (((byte) ((((byte) ((byte) ((((ulong) (cond)) & ((ulong) (0x1)))))) & ((byte) ((bool) (((cond) != (0xF)) ? 1U : 0U)))))) != 0 ? ((RuntimeValue<bool>) (!(result))) : (result)), temp_689, temp_691);
		Label(temp_689);
		switch(type) {
			case 0x0: {
				auto __macro_fcmp_a = ((RuntimeValue<float>) (VSR[(int) (rn)])).Store();
				auto __macro_fcmp_b = ((RuntimeValue<float>) (VSR[(int) (rm)])).Store();
				NZCVR = (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<long>) (((RuntimeValue<long>) (Ternary<bool, long>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((((RuntimeValue<bool>) ((RuntimeValue<bool>) ((__macro_fcmp_a).IsNaN()))) | ((RuntimeValue<bool>) ((RuntimeValue<bool>) ((__macro_fcmp_b).IsNaN())))))), 0x3, (RuntimeValue<long>) (Ternary<bool, long>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((__macro_fcmp_a) == (__macro_fcmp_b))), 0x6, (RuntimeValue<long>) (Ternary<bool, long>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((__macro_fcmp_a) < (__macro_fcmp_b))), 0x8, 0x2))))))) << (0x1C))));
				break;
			}
			case 0x1: {
				auto __macro_fcmp_a = ((RuntimeValue<double>) (VDR[(int) (rn)])).Store();
				auto __macro_fcmp_b = ((RuntimeValue<double>) (VDR[(int) (rm)])).Store();
				NZCVR = (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<long>) (((RuntimeValue<long>) (Ternary<bool, long>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((((RuntimeValue<bool>) ((RuntimeValue<bool>) ((__macro_fcmp_a).IsNaN()))) | ((RuntimeValue<bool>) ((RuntimeValue<bool>) ((__macro_fcmp_b).IsNaN())))))), 0x3, (RuntimeValue<long>) (Ternary<bool, long>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((__macro_fcmp_a) == (__macro_fcmp_b))), 0x6, (RuntimeValue<long>) (Ternary<bool, long>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((__macro_fcmp_a) < (__macro_fcmp_b))), 0x8, 0x2))))))) << (0x1C))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		Branch(temp_690);
		Label(temp_691);
		NZCVR = (ulong) (((ulong) ((ulong) (nzcv))) << (uint) (0x1C));
		Branch(temp_690);
		Label(temp_690);
		return true;
	}
unimplemented:
	return false;
}

/* FCMxx-register-vector */
bool Recompiler::FCMxx_register_vector(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto U = (inst >> 29) & 0x1U;
		auto E = (inst >> 23) & 0x1U;
		auto size = (inst >> 22) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto ac = (inst >> 11) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto top = (string) (([=](auto temp_692) -> string { switch(temp_692) { case 0x0: return string("EQ"); case 0x2: return string("GE"); case 0x3: return string("GE"); case 0x6: return string("GT"); case 0x7: return string("GT"); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (byte) (((byte) (((byte) (ac)) << 0)) | ((byte) (((byte) (U)) << 1)))) | ((byte) (((byte) (E)) << 2))))));
		auto t = (string) (([=](auto temp_693) -> string { switch(temp_693) { case 0x0: return string("2S"); case 0x1: return string("4S"); case 0x3: return string("2D"); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))));
		switch((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))) {
			case 0x0: {
				auto a1 = ((RuntimeValue<float>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x0))).Store();
				auto a2 = ((RuntimeValue<float>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x1))).Store();
				auto b1 = ((RuntimeValue<float>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<float>(0x0))).Store();
				auto b2 = ((RuntimeValue<float>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<float>(0x1))).Store();
				VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<int>) ((int) ((int) (0x0)))).CreateVector());
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<float>) (([=](auto temp_694) -> RuntimeValue<float> { switch(temp_694) { case 0x0: return (RuntimeValue<float>) ((RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((a1) == (b1))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0))))))); case 0x2: return (RuntimeValue<float>) ((RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((a1) >= (b1))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0))))))); case 0x3: return (RuntimeValue<float>) ((RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<float>) ((a1).Abs())) >= ((RuntimeValue<float>) ((b1).Abs())))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0))))))); case 0x6: return (RuntimeValue<float>) ((RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((a1) > (b1))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0))))))); case 0x7: return (RuntimeValue<float>) ((RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<float>) ((a1).Abs())) > ((RuntimeValue<float>) ((b1).Abs())))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0))))))); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (byte) (((byte) (((byte) (ac)) << 0)) | ((byte) (((byte) (U)) << 1)))) | ((byte) (((byte) (E)) << 2)))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<float>) (([=](auto temp_695) -> RuntimeValue<float> { switch(temp_695) { case 0x0: return (RuntimeValue<float>) ((RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((a2) == (b2))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0))))))); case 0x2: return (RuntimeValue<float>) ((RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((a2) >= (b2))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0))))))); case 0x3: return (RuntimeValue<float>) ((RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<float>) ((a2).Abs())) >= ((RuntimeValue<float>) ((b2).Abs())))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0))))))); case 0x6: return (RuntimeValue<float>) ((RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((a2) > (b2))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0))))))); case 0x7: return (RuntimeValue<float>) ((RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<float>) ((a2).Abs())) > ((RuntimeValue<float>) ((b2).Abs())))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0))))))); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (byte) (((byte) (((byte) (ac)) << 0)) | ((byte) (((byte) (U)) << 1)))) | ((byte) (((byte) (E)) << 2)))))));
				break;
			}
			case 0x1: {
				auto a1 = ((RuntimeValue<float>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x0))).Store();
				auto a2 = ((RuntimeValue<float>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x1))).Store();
				auto a3 = ((RuntimeValue<float>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x2))).Store();
				auto a4 = ((RuntimeValue<float>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x3))).Store();
				auto b1 = ((RuntimeValue<float>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<float>(0x0))).Store();
				auto b2 = ((RuntimeValue<float>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<float>(0x1))).Store();
				auto b3 = ((RuntimeValue<float>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<float>(0x2))).Store();
				auto b4 = ((RuntimeValue<float>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<float>(0x3))).Store();
				VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<int>) ((int) ((int) (0x0)))).CreateVector());
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<float>) (([=](auto temp_696) -> RuntimeValue<float> { switch(temp_696) { case 0x0: return (RuntimeValue<float>) ((RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((a1) == (b1))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0))))))); case 0x2: return (RuntimeValue<float>) ((RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((a1) >= (b1))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0))))))); case 0x3: return (RuntimeValue<float>) ((RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<float>) ((a1).Abs())) >= ((RuntimeValue<float>) ((b1).Abs())))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0))))))); case 0x6: return (RuntimeValue<float>) ((RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((a1) > (b1))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0))))))); case 0x7: return (RuntimeValue<float>) ((RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<float>) ((a1).Abs())) > ((RuntimeValue<float>) ((b1).Abs())))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0))))))); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (byte) (((byte) (((byte) (ac)) << 0)) | ((byte) (((byte) (U)) << 1)))) | ((byte) (((byte) (E)) << 2)))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<float>) (([=](auto temp_697) -> RuntimeValue<float> { switch(temp_697) { case 0x0: return (RuntimeValue<float>) ((RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((a2) == (b2))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0))))))); case 0x2: return (RuntimeValue<float>) ((RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((a2) >= (b2))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0))))))); case 0x3: return (RuntimeValue<float>) ((RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<float>) ((a2).Abs())) >= ((RuntimeValue<float>) ((b2).Abs())))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0))))))); case 0x6: return (RuntimeValue<float>) ((RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((a2) > (b2))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0))))))); case 0x7: return (RuntimeValue<float>) ((RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<float>) ((a2).Abs())) > ((RuntimeValue<float>) ((b2).Abs())))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0))))))); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (byte) (((byte) (((byte) (ac)) << 0)) | ((byte) (((byte) (U)) << 1)))) | ((byte) (((byte) (E)) << 2)))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (RuntimeValue<float>) (([=](auto temp_698) -> RuntimeValue<float> { switch(temp_698) { case 0x0: return (RuntimeValue<float>) ((RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((a3) == (b3))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0))))))); case 0x2: return (RuntimeValue<float>) ((RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((a3) >= (b3))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0))))))); case 0x3: return (RuntimeValue<float>) ((RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<float>) ((a3).Abs())) >= ((RuntimeValue<float>) ((b3).Abs())))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0))))))); case 0x6: return (RuntimeValue<float>) ((RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((a3) > (b3))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0))))))); case 0x7: return (RuntimeValue<float>) ((RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<float>) ((a3).Abs())) > ((RuntimeValue<float>) ((b3).Abs())))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0))))))); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (byte) (((byte) (((byte) (ac)) << 0)) | ((byte) (((byte) (U)) << 1)))) | ((byte) (((byte) (E)) << 2)))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (RuntimeValue<float>) (([=](auto temp_699) -> RuntimeValue<float> { switch(temp_699) { case 0x0: return (RuntimeValue<float>) ((RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((a4) == (b4))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0))))))); case 0x2: return (RuntimeValue<float>) ((RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((a4) >= (b4))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0))))))); case 0x3: return (RuntimeValue<float>) ((RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<float>) ((a4).Abs())) >= ((RuntimeValue<float>) ((b4).Abs())))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0))))))); case 0x6: return (RuntimeValue<float>) ((RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((a4) > (b4))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0))))))); case 0x7: return (RuntimeValue<float>) ((RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<float>) ((a4).Abs())) > ((RuntimeValue<float>) ((b4).Abs())))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0))))))); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (byte) (((byte) (((byte) (ac)) << 0)) | ((byte) (((byte) (U)) << 1)))) | ((byte) (((byte) (E)) << 2)))))));
				break;
			}
			case 0x3: {
				auto a1 = ((RuntimeValue<double>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<double>(0x0))).Store();
				auto a2 = ((RuntimeValue<double>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<double>(0x1))).Store();
				auto b1 = ((RuntimeValue<double>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<double>(0x0))).Store();
				auto b2 = ((RuntimeValue<double>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<double>(0x1))).Store();
				VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<int>) ((int) ((int) (0x0)))).CreateVector());
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<double>) (([=](auto temp_700) -> RuntimeValue<double> { switch(temp_700) { case 0x0: return (RuntimeValue<double>) ((RuntimeValue<double>) (Ternary<bool, double>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((a1) == (b1))), (double) (Bitcast<long, double>((long) ((long) (-0x1)))), (double) (Bitcast<long, double>((long) ((long) (0x0))))))); case 0x2: return (RuntimeValue<double>) ((RuntimeValue<double>) (Ternary<bool, double>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((a1) >= (b1))), (double) (Bitcast<long, double>((long) ((long) (-0x1)))), (double) (Bitcast<long, double>((long) ((long) (0x0))))))); case 0x3: return (RuntimeValue<double>) ((RuntimeValue<double>) (Ternary<bool, double>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<double>) ((a1).Abs())) >= ((RuntimeValue<double>) ((b1).Abs())))), (double) (Bitcast<long, double>((long) ((long) (-0x1)))), (double) (Bitcast<long, double>((long) ((long) (0x0))))))); case 0x6: return (RuntimeValue<double>) ((RuntimeValue<double>) (Ternary<bool, double>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((a1) > (b1))), (double) (Bitcast<long, double>((long) ((long) (-0x1)))), (double) (Bitcast<long, double>((long) ((long) (0x0))))))); case 0x7: return (RuntimeValue<double>) ((RuntimeValue<double>) (Ternary<bool, double>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<double>) ((a1).Abs())) > ((RuntimeValue<double>) ((b1).Abs())))), (double) (Bitcast<long, double>((long) ((long) (-0x1)))), (double) (Bitcast<long, double>((long) ((long) (0x0))))))); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (byte) (((byte) (((byte) (ac)) << 0)) | ((byte) (((byte) (U)) << 1)))) | ((byte) (((byte) (E)) << 2)))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<double>) (([=](auto temp_701) -> RuntimeValue<double> { switch(temp_701) { case 0x0: return (RuntimeValue<double>) ((RuntimeValue<double>) (Ternary<bool, double>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((a2) == (b2))), (double) (Bitcast<long, double>((long) ((long) (-0x1)))), (double) (Bitcast<long, double>((long) ((long) (0x0))))))); case 0x2: return (RuntimeValue<double>) ((RuntimeValue<double>) (Ternary<bool, double>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((a2) >= (b2))), (double) (Bitcast<long, double>((long) ((long) (-0x1)))), (double) (Bitcast<long, double>((long) ((long) (0x0))))))); case 0x3: return (RuntimeValue<double>) ((RuntimeValue<double>) (Ternary<bool, double>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<double>) ((a2).Abs())) >= ((RuntimeValue<double>) ((b2).Abs())))), (double) (Bitcast<long, double>((long) ((long) (-0x1)))), (double) (Bitcast<long, double>((long) ((long) (0x0))))))); case 0x6: return (RuntimeValue<double>) ((RuntimeValue<double>) (Ternary<bool, double>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((a2) > (b2))), (double) (Bitcast<long, double>((long) ((long) (-0x1)))), (double) (Bitcast<long, double>((long) ((long) (0x0))))))); case 0x7: return (RuntimeValue<double>) ((RuntimeValue<double>) (Ternary<bool, double>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<double>) ((a2).Abs())) > ((RuntimeValue<double>) ((b2).Abs())))), (double) (Bitcast<long, double>((long) ((long) (-0x1)))), (double) (Bitcast<long, double>((long) ((long) (0x0))))))); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (byte) (((byte) (((byte) (ac)) << 0)) | ((byte) (((byte) (U)) << 1)))) | ((byte) (((byte) (E)) << 2)))))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FCMxx-zero-vector */
bool Recompiler::FCMxx_zero_vector(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto U = (inst >> 29) & 0x1U;
		auto size = (inst >> 22) & 0x1U;
		auto op = (inst >> 12) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto top = (string) (([=](auto temp_702) -> string { switch(temp_702) { case 0x0: return string("GT"); case 0x1: return string("GE"); case 0x2: return string("EQ"); default: return string("LE"); } })((byte) ((byte) (((byte) (((byte) (U)) << 0)) | ((byte) (((byte) (op)) << 1))))));
		auto t = (string) (([=](auto temp_703) -> string { switch(temp_703) { case 0x0: return string("2S"); case 0x1: return string("4S"); case 0x3: return string("2D"); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))));
		switch((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))) {
			case 0x0: {
				auto v1 = ((RuntimeValue<float>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x0))).Store();
				auto v2 = ((RuntimeValue<float>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x1))).Store();
				VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<int>) ((int) ((int) (0x0)))).CreateVector());
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<float>) (([=](auto temp_704) -> RuntimeValue<float> { switch(temp_704) { case 0x0: return (RuntimeValue<float>) ((RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((v1) > ((float) ((float) (0x0))))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0))))))); case 0x1: return (RuntimeValue<float>) ((RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((v1) >= ((float) ((float) (0x0))))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0))))))); case 0x2: return (RuntimeValue<float>) ((RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((v1) == ((float) ((float) (0x0))))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0))))))); default: return (RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((v1) <= ((float) ((float) (0x0))))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0)))))); } })((byte) ((byte) (((byte) (((byte) (U)) << 0)) | ((byte) (((byte) (op)) << 1)))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<float>) (([=](auto temp_705) -> RuntimeValue<float> { switch(temp_705) { case 0x0: return (RuntimeValue<float>) ((RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((v2) > ((float) ((float) (0x0))))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0))))))); case 0x1: return (RuntimeValue<float>) ((RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((v2) >= ((float) ((float) (0x0))))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0))))))); case 0x2: return (RuntimeValue<float>) ((RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((v2) == ((float) ((float) (0x0))))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0))))))); default: return (RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((v2) <= ((float) ((float) (0x0))))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0)))))); } })((byte) ((byte) (((byte) (((byte) (U)) << 0)) | ((byte) (((byte) (op)) << 1)))))));
				break;
			}
			case 0x1: {
				auto v1 = ((RuntimeValue<float>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x0))).Store();
				auto v2 = ((RuntimeValue<float>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x1))).Store();
				auto v3 = ((RuntimeValue<float>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x2))).Store();
				auto v4 = ((RuntimeValue<float>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x3))).Store();
				VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<int>) ((int) ((int) (0x0)))).CreateVector());
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<float>) (([=](auto temp_706) -> RuntimeValue<float> { switch(temp_706) { case 0x0: return (RuntimeValue<float>) ((RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((v1) > ((float) ((float) (0x0))))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0))))))); case 0x1: return (RuntimeValue<float>) ((RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((v1) >= ((float) ((float) (0x0))))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0))))))); case 0x2: return (RuntimeValue<float>) ((RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((v1) == ((float) ((float) (0x0))))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0))))))); default: return (RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((v1) <= ((float) ((float) (0x0))))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0)))))); } })((byte) ((byte) (((byte) (((byte) (U)) << 0)) | ((byte) (((byte) (op)) << 1)))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<float>) (([=](auto temp_707) -> RuntimeValue<float> { switch(temp_707) { case 0x0: return (RuntimeValue<float>) ((RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((v2) > ((float) ((float) (0x0))))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0))))))); case 0x1: return (RuntimeValue<float>) ((RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((v2) >= ((float) ((float) (0x0))))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0))))))); case 0x2: return (RuntimeValue<float>) ((RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((v2) == ((float) ((float) (0x0))))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0))))))); default: return (RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((v2) <= ((float) ((float) (0x0))))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0)))))); } })((byte) ((byte) (((byte) (((byte) (U)) << 0)) | ((byte) (((byte) (op)) << 1)))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (RuntimeValue<float>) (([=](auto temp_708) -> RuntimeValue<float> { switch(temp_708) { case 0x0: return (RuntimeValue<float>) ((RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((v3) > ((float) ((float) (0x0))))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0))))))); case 0x1: return (RuntimeValue<float>) ((RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((v3) >= ((float) ((float) (0x0))))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0))))))); case 0x2: return (RuntimeValue<float>) ((RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((v3) == ((float) ((float) (0x0))))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0))))))); default: return (RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((v3) <= ((float) ((float) (0x0))))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0)))))); } })((byte) ((byte) (((byte) (((byte) (U)) << 0)) | ((byte) (((byte) (op)) << 1)))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (RuntimeValue<float>) (([=](auto temp_709) -> RuntimeValue<float> { switch(temp_709) { case 0x0: return (RuntimeValue<float>) ((RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((v4) > ((float) ((float) (0x0))))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0))))))); case 0x1: return (RuntimeValue<float>) ((RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((v4) >= ((float) ((float) (0x0))))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0))))))); case 0x2: return (RuntimeValue<float>) ((RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((v4) == ((float) ((float) (0x0))))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0))))))); default: return (RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((v4) <= ((float) ((float) (0x0))))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0)))))); } })((byte) ((byte) (((byte) (((byte) (U)) << 0)) | ((byte) (((byte) (op)) << 1)))))));
				break;
			}
			case 0x3: {
				auto v1 = ((RuntimeValue<double>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<double>(0x0))).Store();
				auto v2 = ((RuntimeValue<double>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<double>(0x1))).Store();
				VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<int>) ((int) ((int) (0x0)))).CreateVector());
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<double>) (([=](auto temp_710) -> RuntimeValue<double> { switch(temp_710) { case 0x0: return (RuntimeValue<double>) ((RuntimeValue<double>) (Ternary<bool, double>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((v1) > ((double) ((double) (0x0))))), (double) (Bitcast<long, double>((long) ((long) (-0x1)))), (double) (Bitcast<long, double>((long) ((long) (0x0))))))); case 0x1: return (RuntimeValue<double>) ((RuntimeValue<double>) (Ternary<bool, double>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((v1) >= ((double) ((double) (0x0))))), (double) (Bitcast<long, double>((long) ((long) (-0x1)))), (double) (Bitcast<long, double>((long) ((long) (0x0))))))); case 0x2: return (RuntimeValue<double>) ((RuntimeValue<double>) (Ternary<bool, double>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((v1) == ((double) ((double) (0x0))))), (double) (Bitcast<long, double>((long) ((long) (-0x1)))), (double) (Bitcast<long, double>((long) ((long) (0x0))))))); default: return (RuntimeValue<double>) (Ternary<bool, double>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((v1) <= ((double) ((double) (0x0))))), (double) (Bitcast<long, double>((long) ((long) (-0x1)))), (double) (Bitcast<long, double>((long) ((long) (0x0)))))); } })((byte) ((byte) (((byte) (((byte) (U)) << 0)) | ((byte) (((byte) (op)) << 1)))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<double>) (([=](auto temp_711) -> RuntimeValue<double> { switch(temp_711) { case 0x0: return (RuntimeValue<double>) ((RuntimeValue<double>) (Ternary<bool, double>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((v2) > ((double) ((double) (0x0))))), (double) (Bitcast<long, double>((long) ((long) (-0x1)))), (double) (Bitcast<long, double>((long) ((long) (0x0))))))); case 0x1: return (RuntimeValue<double>) ((RuntimeValue<double>) (Ternary<bool, double>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((v2) >= ((double) ((double) (0x0))))), (double) (Bitcast<long, double>((long) ((long) (-0x1)))), (double) (Bitcast<long, double>((long) ((long) (0x0))))))); case 0x2: return (RuntimeValue<double>) ((RuntimeValue<double>) (Ternary<bool, double>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((v2) == ((double) ((double) (0x0))))), (double) (Bitcast<long, double>((long) ((long) (-0x1)))), (double) (Bitcast<long, double>((long) ((long) (0x0))))))); default: return (RuntimeValue<double>) (Ternary<bool, double>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((v2) <= ((double) ((double) (0x0))))), (double) (Bitcast<long, double>((long) ((long) (-0x1)))), (double) (Bitcast<long, double>((long) ((long) (0x0)))))); } })((byte) ((byte) (((byte) (((byte) (U)) << 0)) | ((byte) (((byte) (op)) << 1)))))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FCMLT-zero-vector */
bool Recompiler::FCMLT_zero_vector(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 22) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto t = (string) (([=](auto temp_712) -> string { switch(temp_712) { case 0x0: return string("2S"); case 0x1: return string("4S"); case 0x3: return string("2D"); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))));
		switch((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))) {
			case 0x0: {
				auto v1 = ((RuntimeValue<float>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x0))).Store();
				auto v2 = ((RuntimeValue<float>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x1))).Store();
				VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<int>) ((int) ((int) (0x0)))).CreateVector());
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((v1) < ((float) ((float) (0x0))))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0)))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((v2) < ((float) ((float) (0x0))))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0)))))));
				break;
			}
			case 0x1: {
				auto v1 = ((RuntimeValue<float>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x0))).Store();
				auto v2 = ((RuntimeValue<float>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x1))).Store();
				auto v3 = ((RuntimeValue<float>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x2))).Store();
				auto v4 = ((RuntimeValue<float>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x3))).Store();
				VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<int>) ((int) ((int) (0x0)))).CreateVector());
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((v1) < ((float) ((float) (0x0))))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0)))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((v2) < ((float) ((float) (0x0))))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0)))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((v3) < ((float) ((float) (0x0))))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0)))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((v4) < ((float) ((float) (0x0))))), (float) (Bitcast<int, float>((int) ((int) (-0x1)))), (float) (Bitcast<int, float>((int) ((int) (0x0)))))));
				break;
			}
			case 0x3: {
				auto v1 = ((RuntimeValue<double>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<double>(0x0))).Store();
				auto v2 = ((RuntimeValue<double>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<double>(0x1))).Store();
				VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<int>) ((int) ((int) (0x0)))).CreateVector());
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<double>) (Ternary<bool, double>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((v1) < ((double) ((double) (0x0))))), (double) (Bitcast<long, double>((long) ((long) (-0x1)))), (double) (Bitcast<long, double>((long) ((long) (0x0)))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<double>) (Ternary<bool, double>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((v2) < ((double) ((double) (0x0))))), (double) (Bitcast<long, double>((long) ((long) (-0x1)))), (double) (Bitcast<long, double>((long) ((long) (0x0)))))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FCMP */
bool Recompiler::FCMP(uint inst, ulong pc) {
	{
		auto type = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto opc = (inst >> 3) & 0x1U;
		auto r = (string) (([=](auto temp_713) -> string { switch(temp_713) { case 0x3: return string("H"); case 0x0: return string("S"); case 0x1: return string("D"); default: throw "Not implemented"; } })(type));
		auto zero = (string) (((bool) (((opc) == (0x1)) ? 1U : 0U) != 0) ? (string("/0")) : (string("")));
		switch(type) {
			case 0x0: {
				auto __macro_fcmp_a = ((RuntimeValue<float>) (VSR[(int) (rn)])).Store();
				auto __macro_fcmp_b = ((RuntimeValue<float>) (((bool) (((opc) == (0x1)) ? 1U : 0U)) != 0 ? ((float) ((float) (0x0))) : ((RuntimeValue<float>) (VSR[(int) (rm)])))).Store();
				NZCVR = (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<long>) (((RuntimeValue<long>) (Ternary<bool, long>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((((RuntimeValue<bool>) ((RuntimeValue<bool>) ((__macro_fcmp_a).IsNaN()))) | ((RuntimeValue<bool>) ((RuntimeValue<bool>) ((__macro_fcmp_b).IsNaN())))))), 0x3, (RuntimeValue<long>) (Ternary<bool, long>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((__macro_fcmp_a) == (__macro_fcmp_b))), 0x6, (RuntimeValue<long>) (Ternary<bool, long>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((__macro_fcmp_a) < (__macro_fcmp_b))), 0x8, 0x2))))))) << (0x1C))));
				break;
			}
			case 0x1: {
				auto __macro_fcmp_a = ((RuntimeValue<double>) (VDR[(int) (rn)])).Store();
				auto __macro_fcmp_b = ((RuntimeValue<double>) (((bool) (((opc) == (0x1)) ? 1U : 0U)) != 0 ? ((double) ((double) (0x0))) : ((RuntimeValue<double>) (VDR[(int) (rm)])))).Store();
				NZCVR = (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<long>) (((RuntimeValue<long>) (Ternary<bool, long>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((((RuntimeValue<bool>) ((RuntimeValue<bool>) ((__macro_fcmp_a).IsNaN()))) | ((RuntimeValue<bool>) ((RuntimeValue<bool>) ((__macro_fcmp_b).IsNaN())))))), 0x3, (RuntimeValue<long>) (Ternary<bool, long>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((__macro_fcmp_a) == (__macro_fcmp_b))), 0x6, (RuntimeValue<long>) (Ternary<bool, long>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((__macro_fcmp_a) < (__macro_fcmp_b))), 0x8, 0x2))))))) << (0x1C))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FCSEL */
bool Recompiler::FCSEL(uint inst, ulong pc) {
	{
		auto type = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto cond = (inst >> 12) & 0xFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_714) -> string { switch(temp_714) { case 0x0: return string("S"); case 0x1: return string("D"); default: throw "Not implemented"; } })(type));
		auto condstr = (string) (([=](auto temp_715) -> string { switch(temp_715) { case 0x0: return string("EQ"); case 0x1: return string("NE"); case 0x2: return string("CS"); case 0x3: return string("CC"); case 0x4: return string("MI"); case 0x5: return string("PL"); case 0x6: return string("VS"); case 0x7: return string("VC"); case 0x8: return string("HI"); case 0x9: return string("LS"); case 0xA: return string("GE"); case 0xB: return string("LT"); case 0xC: return string("GT"); case 0xD: return string("LE"); default: return string("AL"); } })(cond));
		auto result = ((RuntimeValue<bool>) (([=](auto temp_716) -> RuntimeValue<bool> { switch(temp_716) { case 0x0: return (RuntimeValue<bool>) ((RuntimeValue<bool>) (NZCV_ZR)); case 0x1: return (RuntimeValue<bool>) ((RuntimeValue<bool>) (NZCV_CR)); case 0x2: return (RuntimeValue<bool>) ((RuntimeValue<bool>) (NZCV_NR)); case 0x3: return (RuntimeValue<bool>) ((RuntimeValue<bool>) (NZCV_VR)); case 0x4: return (RuntimeValue<bool>) ((RuntimeValue<bool>) ((((RuntimeValue<bool>) ((RuntimeValue<bool>) (NZCV_CR))) & ((RuntimeValue<bool>) ((RuntimeValue<bool>) (!((RuntimeValue<bool>) (NZCV_ZR)))))))); case 0x5: return (RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<bool>) (NZCV_NR)) == ((RuntimeValue<bool>) (NZCV_VR)))); case 0x6: return (RuntimeValue<bool>) ((RuntimeValue<bool>) ((((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<bool>) (NZCV_NR)) == ((RuntimeValue<bool>) (NZCV_VR))))) & ((RuntimeValue<bool>) ((RuntimeValue<bool>) (!((RuntimeValue<bool>) (NZCV_ZR)))))))); default: return 0x1; } })((byte) ((cond) >> (uint) (0x1))))).Store();
		LabelTag temp_717 = DefineLabel(), temp_719 = DefineLabel(), temp_718 = DefineLabel();
		BranchIf((RuntimeValue<bool>) (((byte) ((((byte) ((byte) ((((ulong) (cond)) & ((ulong) (0x1)))))) & ((byte) ((bool) (((cond) != (0xF)) ? 1U : 0U)))))) != 0 ? ((RuntimeValue<bool>) (!(result))) : (result)), temp_717, temp_719);
		Label(temp_717);
		switch(type) {
			case 0x0: {
				VSR[(int) (rd)] = (RuntimeValue<float>) (VSR[(int) (rn)]);
				break;
			}
			case 0x1: {
				VDR[(int) (rd)] = (RuntimeValue<double>) (VDR[(int) (rn)]);
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		Branch(temp_718);
		Label(temp_719);
		switch(type) {
			case 0x0: {
				VSR[(int) (rd)] = (RuntimeValue<float>) (VSR[(int) (rm)]);
				break;
			}
			case 0x1: {
				VDR[(int) (rd)] = (RuntimeValue<double>) (VDR[(int) (rm)]);
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		Branch(temp_718);
		Label(temp_718);
		return true;
	}
unimplemented:
	return false;
}

/* FCVT */
bool Recompiler::FCVT(uint inst, ulong pc) {
	{
		auto type = (inst >> 22) & 0x3U;
		auto opc = (inst >> 15) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r1 = string("");
		auto r2 = string("");
		auto tf = (byte) ((byte) (((byte) (((byte) (opc)) << 0)) | ((byte) (((byte) (type)) << 2))));
		switch(tf) {
			case 0xC: {
				r1 = string("S");
				r2 = string("H");
				break;
			}
			case 0xD: {
				r1 = string("D");
				r2 = string("H");
				break;
			}
			case 0x3: {
				r1 = string("H");
				r2 = string("S");
				break;
			}
			case 0x1: {
				r1 = string("D");
				r2 = string("S");
				break;
			}
			case 0x7: {
				r1 = string("H");
				r2 = string("D");
				break;
			}
			case 0x4: {
				r1 = string("S");
				r2 = string("D");
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		switch(tf) {
			case 0xC: {
				VSR[(int) (rd)] = (RuntimeValue<float>) ((RuntimeValue<float>) ((RuntimeValue<ushort>) (VHR[(int) (rn)])));
				break;
			}
			case 0xD: {
				VDR[(int) (rd)] = (RuntimeValue<double>) ((RuntimeValue<double>) ((RuntimeValue<ushort>) (VHR[(int) (rn)])));
				break;
			}
			case 0x3: {
				VHR[(int) (rd)] = (RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((RuntimeValue<float>) (VSR[(int) (rn)])));
				break;
			}
			case 0x1: {
				VDR[(int) (rd)] = (RuntimeValue<double>) ((RuntimeValue<double>) ((RuntimeValue<float>) (VSR[(int) (rn)])));
				break;
			}
			case 0x7: {
				VHR[(int) (rd)] = (RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((RuntimeValue<double>) (VDR[(int) (rn)])));
				break;
			}
			case 0x4: {
				VSR[(int) (rd)] = (RuntimeValue<float>) ((RuntimeValue<float>) ((RuntimeValue<double>) (VDR[(int) (rn)])));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FCVTAS-scalar-integer */
bool Recompiler::FCVTAS_scalar_integer(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto type = (inst >> 22) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto st = (byte) ((byte) (((byte) (((byte) (type)) << 0)) | ((byte) (((byte) (size)) << 2))));
		auto r1 = string("");
		auto r2 = string("");
		switch(st) {
			case 0x3: {
				r1 = string("W");
				r2 = string("H");
				break;
			}
			case 0x7: {
				r1 = string("X");
				r2 = string("H");
				break;
			}
			case 0x0: {
				r1 = string("W");
				r2 = string("S");
				break;
			}
			case 0x4: {
				r1 = string("X");
				r2 = string("S");
				break;
			}
			case 0x1: {
				r1 = string("W");
				r2 = string("D");
				break;
			}
			case 0x5: {
				r1 = string("X");
				r2 = string("D");
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		switch(st) {
			case 0x0: {
				XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<int>) ((RuntimeValue<int>) ((RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<float>) (VSR[(int) (rn)])) >= (0x0))), (RuntimeValue<float>) (((RuntimeValue<float>) (VSR[(int) (rn)])).Ceil()), (RuntimeValue<float>) (((RuntimeValue<float>) (VSR[(int) (rn)])).Floor())))))).Bitcast<uint>()));
				break;
			}
			case 0x4: {
				XR[(int) rd] = (RuntimeValue<ulong>) (((RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<float>) (VSR[(int) (rn)])) >= (0x0))), (RuntimeValue<float>) (((RuntimeValue<float>) (VSR[(int) (rn)])).Ceil()), (RuntimeValue<float>) (((RuntimeValue<float>) (VSR[(int) (rn)])).Floor())))))).Bitcast<ulong>());
				break;
			}
			case 0x1: {
				XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<int>) ((RuntimeValue<int>) ((RuntimeValue<double>) (Ternary<bool, double>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<double>) (VDR[(int) (rn)])) >= (0x0))), (RuntimeValue<double>) (((RuntimeValue<double>) (VDR[(int) (rn)])).Ceil()), (RuntimeValue<double>) (((RuntimeValue<double>) (VDR[(int) (rn)])).Floor())))))).Bitcast<uint>()));
				break;
			}
			case 0x5: {
				XR[(int) rd] = (RuntimeValue<ulong>) (((RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<double>) (Ternary<bool, double>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<double>) (VDR[(int) (rn)])) >= (0x0))), (RuntimeValue<double>) (((RuntimeValue<double>) (VDR[(int) (rn)])).Ceil()), (RuntimeValue<double>) (((RuntimeValue<double>) (VDR[(int) (rn)])).Floor())))))).Bitcast<ulong>());
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FCVTAU-scalar-integer */
bool Recompiler::FCVTAU_scalar_integer(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto type = (inst >> 22) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto st = (byte) ((byte) (((byte) (((byte) (type)) << 0)) | ((byte) (((byte) (size)) << 2))));
		auto r1 = string("");
		auto r2 = string("");
		switch(st) {
			case 0x3: {
				r1 = string("W");
				r2 = string("H");
				break;
			}
			case 0x7: {
				r1 = string("X");
				r2 = string("H");
				break;
			}
			case 0x0: {
				r1 = string("W");
				r2 = string("S");
				break;
			}
			case 0x4: {
				r1 = string("X");
				r2 = string("S");
				break;
			}
			case 0x1: {
				r1 = string("W");
				r2 = string("D");
				break;
			}
			case 0x5: {
				r1 = string("X");
				r2 = string("D");
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		switch(st) {
			case 0x0: {
				XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<float>) (VSR[(int) (rn)])) >= (0x0))), (RuntimeValue<float>) (((RuntimeValue<float>) (VSR[(int) (rn)])).Ceil()), (RuntimeValue<float>) (((RuntimeValue<float>) (VSR[(int) (rn)])).Floor()))))));
				break;
			}
			case 0x4: {
				XR[(int) rd] = (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<float>) (VSR[(int) (rn)])) >= (0x0))), (RuntimeValue<float>) (((RuntimeValue<float>) (VSR[(int) (rn)])).Ceil()), (RuntimeValue<float>) (((RuntimeValue<float>) (VSR[(int) (rn)])).Floor())))));
				break;
			}
			case 0x1: {
				XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<double>) (Ternary<bool, double>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<double>) (VDR[(int) (rn)])) >= (0x0))), (RuntimeValue<double>) (((RuntimeValue<double>) (VDR[(int) (rn)])).Ceil()), (RuntimeValue<double>) (((RuntimeValue<double>) (VDR[(int) (rn)])).Floor()))))));
				break;
			}
			case 0x5: {
				XR[(int) rd] = (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<double>) (Ternary<bool, double>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<double>) (VDR[(int) (rn)])) >= (0x0))), (RuntimeValue<double>) (((RuntimeValue<double>) (VDR[(int) (rn)])).Ceil()), (RuntimeValue<double>) (((RuntimeValue<double>) (VDR[(int) (rn)])).Floor())))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FCVTL[2] */
bool Recompiler::FCVTL_2_(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 22) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto o2 = (string) ((Q != 0) ? (string("2")) : (string("")));
		auto ta = (string) ((size != 0) ? (string("2D")) : (string("4S")));
		auto tb = (string) (([=](auto temp_720) -> string { switch(temp_720) { case 0x0: return string("4H"); case 0x1: return string("8H"); case 0x2: return string("2S"); default: return string("4S"); } })((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))));
		auto n = ((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Store();
		VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<byte>) ((byte) ((byte) (0x0)))).CreateVector());
		switch((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))) {
			case 0x2: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<double>) ((RuntimeValue<double>) ((RuntimeValue<float>) ((n).Element<float>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<double>) ((RuntimeValue<double>) ((RuntimeValue<float>) ((n).Element<float>(0x1)))));
				break;
			}
			case 0x3: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<double>) ((RuntimeValue<double>) ((RuntimeValue<float>) ((n).Element<float>(0x2)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<double>) ((RuntimeValue<double>) ((RuntimeValue<float>) ((n).Element<float>(0x3)))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FCVTMS-scalar-integer */
bool Recompiler::FCVTMS_scalar_integer(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto type = (inst >> 22) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto st = (byte) ((byte) (((byte) (((byte) (type)) << 0)) | ((byte) (((byte) (size)) << 2))));
		auto r1 = string("");
		auto r2 = string("");
		switch(st) {
			case 0x3: {
				r1 = string("W");
				r2 = string("H");
				break;
			}
			case 0x7: {
				r1 = string("X");
				r2 = string("H");
				break;
			}
			case 0x0: {
				r1 = string("W");
				r2 = string("S");
				break;
			}
			case 0x4: {
				r1 = string("X");
				r2 = string("S");
				break;
			}
			case 0x1: {
				r1 = string("W");
				r2 = string("D");
				break;
			}
			case 0x5: {
				r1 = string("X");
				r2 = string("D");
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		switch(st) {
			case 0x0: {
				XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<int>) ((RuntimeValue<int>) ((RuntimeValue<float>) (((RuntimeValue<float>) (VSR[(int) (rn)])).Floor())))).Bitcast<uint>()));
				break;
			}
			case 0x4: {
				XR[(int) rd] = (RuntimeValue<ulong>) (((RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<float>) (((RuntimeValue<float>) (VSR[(int) (rn)])).Floor())))).Bitcast<ulong>());
				break;
			}
			case 0x1: {
				XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<int>) ((RuntimeValue<int>) ((RuntimeValue<double>) (((RuntimeValue<double>) (VDR[(int) (rn)])).Floor())))).Bitcast<uint>()));
				break;
			}
			case 0x5: {
				XR[(int) rd] = (RuntimeValue<ulong>) (((RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<double>) (((RuntimeValue<double>) (VDR[(int) (rn)])).Floor())))).Bitcast<ulong>());
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FCVTMU-scalar-integer */
bool Recompiler::FCVTMU_scalar_integer(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto type = (inst >> 22) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto st = (byte) ((byte) (((byte) (((byte) (type)) << 0)) | ((byte) (((byte) (size)) << 2))));
		auto r1 = string("");
		auto r2 = string("");
		switch(st) {
			case 0x3: {
				r1 = string("W");
				r2 = string("H");
				break;
			}
			case 0x7: {
				r1 = string("X");
				r2 = string("H");
				break;
			}
			case 0x0: {
				r1 = string("W");
				r2 = string("S");
				break;
			}
			case 0x4: {
				r1 = string("X");
				r2 = string("S");
				break;
			}
			case 0x1: {
				r1 = string("W");
				r2 = string("D");
				break;
			}
			case 0x5: {
				r1 = string("X");
				r2 = string("D");
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		switch(st) {
			case 0x0: {
				XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<int>) ((RuntimeValue<int>) ((RuntimeValue<float>) (((RuntimeValue<float>) (VSR[(int) (rn)])).Floor()))))));
				break;
			}
			case 0x4: {
				XR[(int) rd] = (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<float>) (((RuntimeValue<float>) (VSR[(int) (rn)])).Floor())))));
				break;
			}
			case 0x1: {
				XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<int>) ((RuntimeValue<int>) ((RuntimeValue<double>) (((RuntimeValue<double>) (VDR[(int) (rn)])).Floor()))))));
				break;
			}
			case 0x5: {
				XR[(int) rd] = (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<double>) (((RuntimeValue<double>) (VDR[(int) (rn)])).Floor())))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FCVTN */
bool Recompiler::FCVTN(uint inst, ulong pc) {
	{
		auto size = (inst >> 22) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto Ta = string("");
		auto Tb = string("");
		switch(size) {
			case 0x0: {
				Ta = string("4S");
				Tb = string("4H");
				break;
			}
			case 0x1: {
				Ta = string("2D");
				Tb = string("2S");
				break;
			}
		}
		auto sv = ((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Store();
		VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<byte>) ((byte) ((byte) (0x0)))).CreateVector());
		switch(size) {
			case 0x0: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<short>) ((RuntimeValue<short>) ((RuntimeValue<float>) ((sv).Element<float>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<short>) ((RuntimeValue<short>) ((RuntimeValue<float>) ((sv).Element<float>(0x1)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (RuntimeValue<short>) ((RuntimeValue<short>) ((RuntimeValue<float>) ((sv).Element<float>(0x2)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (RuntimeValue<short>) ((RuntimeValue<short>) ((RuntimeValue<float>) ((sv).Element<float>(0x3)))));
				break;
			}
			case 0x1: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<float>) ((RuntimeValue<float>) ((RuntimeValue<double>) ((sv).Element<double>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<float>) ((RuntimeValue<float>) ((RuntimeValue<double>) ((sv).Element<double>(0x1)))));
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FCVTN2 */
bool Recompiler::FCVTN2(uint inst, ulong pc) {
	{
		auto size = (inst >> 22) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto Ta = string("");
		auto Tb = string("");
		switch(size) {
			case 0x0: {
				Ta = string("4S");
				Tb = string("8H");
				break;
			}
			case 0x1: {
				Ta = string("2D");
				Tb = string("4S");
				break;
			}
		}
		auto sv = ((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Store();
		switch(size) {
			case 0x0: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x4, (RuntimeValue<short>) ((RuntimeValue<short>) ((RuntimeValue<float>) ((sv).Element<float>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x5, (RuntimeValue<short>) ((RuntimeValue<short>) ((RuntimeValue<float>) ((sv).Element<float>(0x1)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x6, (RuntimeValue<short>) ((RuntimeValue<short>) ((RuntimeValue<float>) ((sv).Element<float>(0x2)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x7, (RuntimeValue<short>) ((RuntimeValue<short>) ((RuntimeValue<float>) ((sv).Element<float>(0x3)))));
				break;
			}
			case 0x1: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (RuntimeValue<float>) ((RuntimeValue<float>) ((RuntimeValue<double>) ((sv).Element<double>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (RuntimeValue<float>) ((RuntimeValue<float>) ((RuntimeValue<double>) ((sv).Element<double>(0x1)))));
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FCVTPS-scalar-integer */
bool Recompiler::FCVTPS_scalar_integer(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto type = (inst >> 22) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto st = (byte) ((byte) (((byte) (((byte) (type)) << 0)) | ((byte) (((byte) (size)) << 2))));
		auto r1 = string("");
		auto r2 = string("");
		switch(st) {
			case 0x3: {
				r1 = string("W");
				r2 = string("H");
				break;
			}
			case 0x7: {
				r1 = string("X");
				r2 = string("H");
				break;
			}
			case 0x0: {
				r1 = string("W");
				r2 = string("S");
				break;
			}
			case 0x4: {
				r1 = string("X");
				r2 = string("S");
				break;
			}
			case 0x1: {
				r1 = string("W");
				r2 = string("D");
				break;
			}
			case 0x5: {
				r1 = string("X");
				r2 = string("D");
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		switch(st) {
			case 0x0: {
				XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<int>) ((RuntimeValue<int>) ((RuntimeValue<float>) (((RuntimeValue<float>) (VSR[(int) (rn)])).Ceil()))));
				break;
			}
			case 0x4: {
				XR[(int) rd] = (RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<float>) (((RuntimeValue<float>) (VSR[(int) (rn)])).Ceil())));
				break;
			}
			case 0x1: {
				XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<int>) ((RuntimeValue<int>) ((RuntimeValue<double>) (((RuntimeValue<double>) (VDR[(int) (rn)])).Ceil()))));
				break;
			}
			case 0x5: {
				XR[(int) rd] = (RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<double>) (((RuntimeValue<double>) (VDR[(int) (rn)])).Ceil())));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FCVTPU-scalar-integer */
bool Recompiler::FCVTPU_scalar_integer(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto type = (inst >> 22) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto st = (byte) ((byte) (((byte) (((byte) (type)) << 0)) | ((byte) (((byte) (size)) << 2))));
		auto r1 = string("");
		auto r2 = string("");
		switch(st) {
			case 0x3: {
				r1 = string("W");
				r2 = string("H");
				break;
			}
			case 0x7: {
				r1 = string("X");
				r2 = string("H");
				break;
			}
			case 0x0: {
				r1 = string("W");
				r2 = string("S");
				break;
			}
			case 0x4: {
				r1 = string("X");
				r2 = string("S");
				break;
			}
			case 0x1: {
				r1 = string("W");
				r2 = string("D");
				break;
			}
			case 0x5: {
				r1 = string("X");
				r2 = string("D");
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		switch(st) {
			case 0x0: {
				XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<int>) ((RuntimeValue<int>) ((RuntimeValue<float>) (((RuntimeValue<float>) (VSR[(int) (rn)])).Ceil()))))));
				break;
			}
			case 0x4: {
				XR[(int) rd] = (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<float>) (((RuntimeValue<float>) (VSR[(int) (rn)])).Ceil())))));
				break;
			}
			case 0x1: {
				XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<int>) ((RuntimeValue<int>) ((RuntimeValue<double>) (((RuntimeValue<double>) (VDR[(int) (rn)])).Ceil()))))));
				break;
			}
			case 0x5: {
				XR[(int) rd] = (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<double>) (((RuntimeValue<double>) (VDR[(int) (rn)])).Ceil())))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FCVTZS-scalar-fixedpoint */
bool Recompiler::FCVTZS_scalar_fixedpoint(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto type = (inst >> 22) & 0x3U;
		auto scale = (inst >> 10) & 0x3FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto fbits = (ulong) (((ulong) (long) (0x40)) - ((ulong) (byte) (scale)));
		auto r1 = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto r2 = (string) (([=](auto temp_721) -> string { switch(temp_721) { case 0x3: return string("H"); case 0x0: return string("S"); case 0x1: return string("D"); default: throw "Not implemented"; } })(type));
		switch((byte) ((byte) (((byte) (((byte) (type)) << 0)) | ((byte) (((byte) (size)) << 2))))) {
			case 0x0: {
				XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (Call<uint, float, int>(FloatToFixed32, (RuntimeValue<float>) (VSR[(int) (rn)]), (RuntimeValue<int>) (fbits))));
				break;
			}
			case 0x4: {
				XR[(int) rd] = (RuntimeValue<ulong>) (Call<ulong, float, int>(FloatToFixed64, (RuntimeValue<float>) (VSR[(int) (rn)]), (RuntimeValue<int>) (fbits)));
				break;
			}
			case 0x1: {
				XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (Call<uint, double, int>(FloatToFixed32, (RuntimeValue<double>) (VDR[(int) (rn)]), (RuntimeValue<int>) (fbits))));
				break;
			}
			case 0x5: {
				XR[(int) rd] = (RuntimeValue<ulong>) (Call<ulong, double, int>(FloatToFixed64, (RuntimeValue<double>) (VDR[(int) (rn)]), (RuntimeValue<int>) (fbits)));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FCVTZS-scalar-integer */
bool Recompiler::FCVTZS_scalar_integer(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto type = (inst >> 22) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto st = (byte) ((byte) (((byte) (((byte) (type)) << 0)) | ((byte) (((byte) (size)) << 2))));
		auto r1 = string("");
		auto r2 = string("");
		switch(st) {
			case 0x3: {
				r1 = string("W");
				r2 = string("H");
				break;
			}
			case 0x7: {
				r1 = string("X");
				r2 = string("H");
				break;
			}
			case 0x0: {
				r1 = string("W");
				r2 = string("S");
				break;
			}
			case 0x4: {
				r1 = string("X");
				r2 = string("S");
				break;
			}
			case 0x1: {
				r1 = string("W");
				r2 = string("D");
				break;
			}
			case 0x5: {
				r1 = string("X");
				r2 = string("D");
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		switch(st) {
			case 0x0: {
				XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<int>) ((RuntimeValue<int>) ((RuntimeValue<float>) (VSR[(int) (rn)]))))));
				break;
			}
			case 0x4: {
				XR[(int) rd] = (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<float>) (VSR[(int) (rn)])))));
				break;
			}
			case 0x1: {
				XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<int>) ((RuntimeValue<int>) ((RuntimeValue<double>) (VDR[(int) (rn)]))))));
				break;
			}
			case 0x5: {
				XR[(int) rd] = (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<double>) (VDR[(int) (rn)])))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FCVTZU-scalar-fixedpoint */
bool Recompiler::FCVTZU_scalar_fixedpoint(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto type = (inst >> 22) & 0x3U;
		auto scale = (inst >> 10) & 0x3FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto fbits = (ulong) (((ulong) (long) (0x40)) - ((ulong) (byte) (scale)));
		auto r1 = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto r2 = (string) (([=](auto temp_722) -> string { switch(temp_722) { case 0x3: return string("H"); case 0x0: return string("S"); case 0x1: return string("D"); default: throw "Not implemented"; } })(type));
		switch((byte) ((byte) (((byte) (((byte) (type)) << 0)) | ((byte) (((byte) (size)) << 2))))) {
			case 0x0: {
				XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (Call<uint, float, int>(FloatToFixed32, (RuntimeValue<float>) (VSR[(int) (rn)]), (RuntimeValue<int>) (fbits))));
				break;
			}
			case 0x4: {
				XR[(int) rd] = (RuntimeValue<ulong>) (Call<ulong, float, int>(FloatToFixed64, (RuntimeValue<float>) (VSR[(int) (rn)]), (RuntimeValue<int>) (fbits)));
				break;
			}
			case 0x1: {
				XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (Call<uint, double, int>(FloatToFixed32, (RuntimeValue<double>) (VDR[(int) (rn)]), (RuntimeValue<int>) (fbits))));
				break;
			}
			case 0x5: {
				XR[(int) rd] = (RuntimeValue<ulong>) (Call<ulong, double, int>(FloatToFixed64, (RuntimeValue<double>) (VDR[(int) (rn)]), (RuntimeValue<int>) (fbits)));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FCVTZU-scalar-integer */
bool Recompiler::FCVTZU_scalar_integer(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto type = (inst >> 22) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto st = (byte) ((byte) (((byte) (((byte) (type)) << 0)) | ((byte) (((byte) (size)) << 2))));
		auto r1 = string("");
		auto r2 = string("");
		switch(st) {
			case 0x3: {
				r1 = string("W");
				r2 = string("H");
				break;
			}
			case 0x7: {
				r1 = string("X");
				r2 = string("H");
				break;
			}
			case 0x0: {
				r1 = string("W");
				r2 = string("S");
				break;
			}
			case 0x4: {
				r1 = string("X");
				r2 = string("S");
				break;
			}
			case 0x1: {
				r1 = string("W");
				r2 = string("D");
				break;
			}
			case 0x5: {
				r1 = string("X");
				r2 = string("D");
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		switch(st) {
			case 0x0: {
				XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<float>) (VSR[(int) (rn)]))));
				break;
			}
			case 0x4: {
				XR[(int) rd] = (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<float>) (VSR[(int) (rn)])));
				break;
			}
			case 0x1: {
				XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<double>) (VDR[(int) (rn)]))));
				break;
			}
			case 0x5: {
				XR[(int) rd] = (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<double>) (VDR[(int) (rn)])));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FDIV-scalar */
bool Recompiler::FDIV_scalar(uint inst, ulong pc) {
	{
		auto type = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_723) -> string { switch(temp_723) { case 0x3: return string("H"); case 0x0: return string("S"); case 0x1: return string("D"); default: throw "Not implemented"; } })(type));
		switch(type) {
			case 0x3: {
				throw "Not implemented";
				break;
			}
			case 0x0: {
				VSR[(int) (rd)] = (RuntimeValue<float>) (((RuntimeValue<float>) (RuntimeValue<float>) ((RuntimeValue<float>) (VSR[(int) (rn)]))) / ((RuntimeValue<float>) (RuntimeValue<float>) ((RuntimeValue<float>) (VSR[(int) (rm)]))));
				break;
			}
			case 0x1: {
				VDR[(int) (rd)] = (RuntimeValue<double>) (((RuntimeValue<double>) (RuntimeValue<double>) ((RuntimeValue<double>) (VDR[(int) (rn)]))) / ((RuntimeValue<double>) (RuntimeValue<double>) ((RuntimeValue<double>) (VDR[(int) (rm)]))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FDIV-vector */
bool Recompiler::FDIV_vector(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 22) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto ts = (string) (([=](auto temp_724) -> string { switch(temp_724) { case 0x0: return string("2S"); case 0x1: return string("4S"); case 0x3: return string("2D"); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))));
		switch((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))) {
			case 0x0: {
				VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])) / ((RuntimeValue<Vector128<float>>) (VR[(int) (rm)]))));
				break;
			}
			case 0x1: {
				VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])) / ((RuntimeValue<Vector128<float>>) (VR[(int) (rm)])));
				break;
			}
			case 0x3: {
				VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<double>>) ((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])) / (RuntimeValue<Vector128<double>>) ((RuntimeValue<Vector128<float>>) (VR[(int) (rm)]))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FMADD */
bool Recompiler::FMADD(uint inst, ulong pc) {
	{
		auto type = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto ra = (inst >> 10) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto t = (string) (([=](auto temp_725) -> string { switch(temp_725) { case 0x0: return string("S"); case 0x1: return string("D"); case 0x3: return string("H"); default: throw "Not implemented"; } })(type));
		switch(type) {
			case 0x0: {
				VSR[(int) (rd)] = (RuntimeValue<float>) (((RuntimeValue<float>) (RuntimeValue<float>) ((RuntimeValue<float>) (((RuntimeValue<float>) (RuntimeValue<float>) ((RuntimeValue<float>) (VSR[(int) (rn)]))) * ((RuntimeValue<float>) (RuntimeValue<float>) ((RuntimeValue<float>) (VSR[(int) (rm)])))))) + ((RuntimeValue<float>) (RuntimeValue<float>) ((RuntimeValue<float>) (VSR[(int) (ra)]))));
				break;
			}
			case 0x1: {
				VDR[(int) (rd)] = (RuntimeValue<double>) (((RuntimeValue<double>) (RuntimeValue<double>) ((RuntimeValue<double>) (((RuntimeValue<double>) (RuntimeValue<double>) ((RuntimeValue<double>) (VDR[(int) (rn)]))) * ((RuntimeValue<double>) (RuntimeValue<double>) ((RuntimeValue<double>) (VDR[(int) (rm)])))))) + ((RuntimeValue<double>) (RuntimeValue<double>) ((RuntimeValue<double>) (VDR[(int) (ra)]))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FMAX-scalar */
bool Recompiler::FMAX_scalar(uint inst, ulong pc) {
	{
		auto type = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_726) -> string { switch(temp_726) { case 0x0: return string("S"); case 0x1: return string("D"); default: throw "Not implemented"; } })(type));
		switch(type) {
			case 0x0: {
				auto a = ((RuntimeValue<float>) (VSR[(int) (rn)])).Store();
				auto b = ((RuntimeValue<float>) (VSR[(int) (rm)])).Store();
				VSR[(int) (rd)] = (RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((a) > (b))), a, b));
				break;
			}
			case 0x1: {
				auto a = ((RuntimeValue<double>) (VDR[(int) (rn)])).Store();
				auto b = ((RuntimeValue<double>) (VDR[(int) (rm)])).Store();
				VDR[(int) (rd)] = (RuntimeValue<double>) (Ternary<bool, double>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((a) > (b))), a, b));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FMAXNM-scalar */
bool Recompiler::FMAXNM_scalar(uint inst, ulong pc) {
	{
		auto type = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_727) -> string { switch(temp_727) { case 0x3: return string("H"); case 0x0: return string("S"); case 0x1: return string("D"); default: throw "Not implemented"; } })(type));
		switch(type) {
			case 0x0: {
				auto a = ((RuntimeValue<float>) (VSR[(int) (rn)])).Store();
				auto b = ((RuntimeValue<float>) (VSR[(int) (rm)])).Store();
				VSR[(int) (rd)] = (RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((a) > (b))), a, b));
				break;
			}
			case 0x1: {
				auto a = ((RuntimeValue<double>) (VDR[(int) (rn)])).Store();
				auto b = ((RuntimeValue<double>) (VDR[(int) (rm)])).Store();
				VDR[(int) (rd)] = (RuntimeValue<double>) (Ternary<bool, double>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((a) > (b))), a, b));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FMIN-scalar */
bool Recompiler::FMIN_scalar(uint inst, ulong pc) {
	{
		auto type = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_728) -> string { switch(temp_728) { case 0x0: return string("S"); case 0x1: return string("D"); default: throw "Not implemented"; } })(type));
		switch(type) {
			case 0x0: {
				auto a = ((RuntimeValue<float>) (VSR[(int) (rn)])).Store();
				auto b = ((RuntimeValue<float>) (VSR[(int) (rm)])).Store();
				VSR[(int) (rd)] = (RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((a) < (b))), a, b));
				break;
			}
			case 0x1: {
				auto a = ((RuntimeValue<double>) (VDR[(int) (rn)])).Store();
				auto b = ((RuntimeValue<double>) (VDR[(int) (rm)])).Store();
				VDR[(int) (rd)] = (RuntimeValue<double>) (Ternary<bool, double>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((a) < (b))), a, b));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FMINNM-scalar */
bool Recompiler::FMINNM_scalar(uint inst, ulong pc) {
	{
		auto type = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_729) -> string { switch(temp_729) { case 0x3: return string("H"); case 0x0: return string("S"); case 0x1: return string("D"); default: throw "Not implemented"; } })(type));
		switch(type) {
			case 0x0: {
				auto a = ((RuntimeValue<float>) (VSR[(int) (rn)])).Store();
				auto b = ((RuntimeValue<float>) (VSR[(int) (rm)])).Store();
				VSR[(int) (rd)] = (RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((a) < (b))), a, b));
				break;
			}
			case 0x1: {
				auto a = ((RuntimeValue<double>) (VDR[(int) (rn)])).Store();
				auto b = ((RuntimeValue<double>) (VDR[(int) (rm)])).Store();
				VDR[(int) (rd)] = (RuntimeValue<double>) (Ternary<bool, double>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((a) < (b))), a, b));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FMLA-by-element-vector-spdp */
bool Recompiler::FMLA_by_element_vector_spdp(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto sz = (inst >> 22) & 0x1U;
		auto L = (inst >> 21) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto H = (inst >> 11) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto T = (string) (([=](auto temp_730) -> string { switch(temp_730) { case 0x0: return string("2S"); case 0x2: return string("4S"); case 0x3: return string("2D"); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (((byte) (sz)) << 0)) | ((byte) (((byte) (Q)) << 1))))));
		auto Ts = (string) ((sz != 0) ? (string("D")) : (string("S")));
		auto index = (uint) (([=](auto temp_731) -> uint { switch(temp_731) { case 0x2: return (uint) ((uint) (H)); case 0x3: throw "Not implemented"; default: return (uint) ((uint) ((byte) ((byte) (((byte) (((byte) (L)) << 0)) | ((byte) (((byte) (H)) << 1)))))); } })((byte) ((byte) (((byte) (((byte) (L)) << 0)) | ((byte) (((byte) (sz)) << 1))))));
		if((sz) != 0) {
			VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<double>>) ((RuntimeValue<Vector128<float>>) (VR[(int) (rd)])) + (RuntimeValue<Vector128<double>>) ((RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<double>>) ((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])) * (RuntimeValue<Vector128<double>>) ((RuntimeValue<Vector128<float>>) (((RuntimeValue<double>) ((RuntimeValue<double>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<double>(index)))).CreateVector())))))));
		} else {
			VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rd)])) + ((RuntimeValue<Vector128<float>>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])) * ((RuntimeValue<Vector128<float>>) (((RuntimeValue<float>) ((RuntimeValue<float>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<float>(index)))).CreateVector())))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* FMLA-vector */
bool Recompiler::FMLA_vector(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto sz = (inst >> 22) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto T = (string) (([=](auto temp_732) -> string { switch(temp_732) { case 0x0: return string("2S"); case 0x1: return string("4S"); case 0x3: return string("2D"); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (sz)) << 1))))));
		if((sz) != 0) {
			VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<double>>) ((RuntimeValue<Vector128<float>>) (VR[(int) (rd)])) + (RuntimeValue<Vector128<double>>) ((RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<double>>) ((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])) * (RuntimeValue<Vector128<double>>) ((RuntimeValue<Vector128<float>>) (VR[(int) (rm)])))))));
		} else {
			VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rd)])) + ((RuntimeValue<Vector128<float>>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])) * ((RuntimeValue<Vector128<float>>) (VR[(int) (rm)])))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* FMOV-general */
bool Recompiler::FMOV_general(uint inst, ulong pc) {
	{
		auto sf = (inst >> 31) & 0x1U;
		auto type = (inst >> 22) & 0x3U;
		auto mode = (inst >> 19) & 0x1U;
		auto ropc = (inst >> 16) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto opc = (byte) ((byte) (((byte) (((byte) (ropc)) << 0)) | ((byte) (((byte) ((byte) ((byte) (0x3)))) << 1))));
		auto tf = (byte) ((byte) (((byte) (byte) (((byte) (byte) (((byte) (((byte) (opc)) << 0)) | ((byte) (((byte) ((byte) ((byte) (mode)))) << 3)))) | ((byte) (((byte) (type)) << 5)))) | ((byte) (((byte) (sf)) << 7))));
		auto r1 = string("");
		auto r2 = string("");
		switch(tf) {
			case 0x66: {
				r1 = string("W");
				r2 = string("H");
				break;
			}
			case 0xE6: {
				r1 = string("X");
				r2 = string("H");
				break;
			}
			case 0x67: {
				r1 = string("H");
				r2 = string("W");
				break;
			}
			case 0x7: {
				r1 = string("S");
				r2 = string("W");
				break;
			}
			case 0x6: {
				r1 = string("W");
				r2 = string("S");
				break;
			}
			case 0xE7: {
				r1 = string("H");
				r2 = string("X");
				break;
			}
			case 0xA7: {
				r1 = string("D");
				r2 = string("X");
				break;
			}
			case 0xCF: {
				r1 = string("V");
				r2 = string("X");
				break;
			}
			case 0xCE: {
				r1 = string("X");
				r2 = string("V");
				break;
			}
			case 0xA6: {
				r1 = string("X");
				r2 = string("D");
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		auto index1 = (string) (((bool) (((r1) == (string("V"))) ? 1U : 0U) != 0) ? (string(".D[1]")) : (string("")));
		auto index2 = (string) (((bool) (((r2) == (string("V"))) ? 1U : 0U) != 0) ? (string(".D[1]")) : (string("")));
		switch(tf) {
			case 0x66: {
				XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<ushort>) (VHR[(int) (rn)]))));
				break;
			}
			case 0xE6: {
				XR[(int) rd] = (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ushort>) (VHR[(int) (rn)])));
				break;
			}
			case 0x67: {
				VHR[(int) (rd)] = (RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((RuntimeValue<uint>) ((rn) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rn]()))));
				break;
			}
			case 0x7: {
				VSR[(int) (rd)] = (RuntimeValue<float>) (((RuntimeValue<uint>) ((rn) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rn]()))).Bitcast<float>());
				break;
			}
			case 0x6: {
				XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<float>) (VSR[(int) (rn)])).Bitcast<uint>()));
				break;
			}
			case 0xE7: {
				VHR[(int) (rd)] = (RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]())));
				break;
			}
			case 0xA7: {
				VDR[(int) (rd)] = (RuntimeValue<double>) (((RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]())).Bitcast<double>());
				break;
			}
			case 0xA6: {
				XR[(int) rd] = (RuntimeValue<ulong>) (((RuntimeValue<double>) (VDR[(int) (rn)])).Bitcast<ulong>());
				break;
			}
			case 0xCE: {
				XR[(int) rd] = (RuntimeValue<ulong>) (((RuntimeValue<double>) (VDR[(int) ((byte) ((((ulong) ((byte) ((rn) << (uint) (0x1)))) | ((ulong) (0x1)))))])).Bitcast<ulong>());
				break;
			}
			case 0xCF: {
				VDR[(int) ((byte) ((((ulong) ((byte) ((rd) << (uint) (0x1)))) | ((ulong) (0x1)))))] = (RuntimeValue<double>) (((RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]())).Bitcast<double>());
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FMOV-scalar-immediate */
bool Recompiler::FMOV_scalar_immediate(uint inst, ulong pc) {
	{
		auto type = (inst >> 22) & 0x3U;
		auto imm = (inst >> 13) & 0xFFU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_733) -> string { switch(temp_733) { case 0x3: return string("H"); case 0x0: return string("S"); case 0x1: return string("D"); default: throw "Not implemented"; } })(type));
		auto sv = (float) (Bitcast<uint, float>((uint) ((uint) (((uint) (uint) (((uint) (uint) (((uint) (uint) (((uint) (uint) (((uint) (((uint) ((uint) ((uint) (((uint) (uint) (((uint) (uint) (((uint) (uint) (((uint) (uint) (((uint) (uint) (((uint) (uint) (((uint) (uint) (((uint) (uint) (((uint) (uint) (((uint) (uint) (((uint) (uint) (((uint) (uint) (((uint) (uint) (((uint) (uint) (((uint) (uint) (((uint) (uint) (((uint) (uint) (((uint) (((uint) ((bool) ((bool) (0x0)))) << 0)) | ((uint) (((uint) ((bool) ((bool) (0x0)))) << 1)))) | ((uint) (((uint) ((bool) ((bool) (0x0)))) << 2)))) | ((uint) (((uint) ((bool) ((bool) (0x0)))) << 3)))) | ((uint) (((uint) ((bool) ((bool) (0x0)))) << 4)))) | ((uint) (((uint) ((bool) ((bool) (0x0)))) << 5)))) | ((uint) (((uint) ((bool) ((bool) (0x0)))) << 6)))) | ((uint) (((uint) ((bool) ((bool) (0x0)))) << 7)))) | ((uint) (((uint) ((bool) ((bool) (0x0)))) << 8)))) | ((uint) (((uint) ((bool) ((bool) (0x0)))) << 9)))) | ((uint) (((uint) ((bool) ((bool) (0x0)))) << 10)))) | ((uint) (((uint) ((bool) ((bool) (0x0)))) << 11)))) | ((uint) (((uint) ((bool) ((bool) (0x0)))) << 12)))) | ((uint) (((uint) ((bool) ((bool) (0x0)))) << 13)))) | ((uint) (((uint) ((bool) ((bool) (0x0)))) << 14)))) | ((uint) (((uint) ((bool) ((bool) (0x0)))) << 15)))) | ((uint) (((uint) ((bool) ((bool) (0x0)))) << 16)))) | ((uint) (((uint) ((bool) ((bool) (0x0)))) << 17)))) | ((uint) (((uint) ((bool) ((bool) (0x0)))) << 18)))))) << 0)) | ((uint) (((uint) ((byte) ((byte) ((byte) ((((ulong) (imm)) & ((ulong) (0xF)))))))) << 19)))) | ((uint) (((uint) ((byte) ((byte) ((byte) ((((ulong) ((byte) ((imm) >> (uint) (0x4)))) & ((ulong) (0x3)))))))) << 23)))) | ((uint) (((uint) ((byte) ((byte) (((byte) (byte) (((byte) (byte) (((byte) (byte) (((byte) (((byte) ((bool) ((bool) ((byte) ((((ulong) ((byte) ((imm) >> (uint) (0x6)))) & ((ulong) (0x1)))))))) << 0)) | ((byte) (((byte) ((bool) ((bool) ((byte) ((((ulong) ((byte) ((imm) >> (uint) (0x6)))) & ((ulong) (0x1)))))))) << 1)))) | ((byte) (((byte) ((bool) ((bool) ((byte) ((((ulong) ((byte) ((imm) >> (uint) (0x6)))) & ((ulong) (0x1)))))))) << 2)))) | ((byte) (((byte) ((bool) ((bool) ((byte) ((((ulong) ((byte) ((imm) >> (uint) (0x6)))) & ((ulong) (0x1)))))))) << 3)))) | ((byte) (((byte) ((bool) ((bool) ((byte) ((((ulong) ((byte) ((imm) >> (uint) (0x6)))) & ((ulong) (0x1)))))))) << 4)))))) << 25)))) | ((uint) (((uint) ((bool) (((byte) ((((ulong) ((byte) ((imm) >> (uint) (0x6)))) & ((ulong) (0x1))))) != 0 ? 0U : 1U))) << 30)))) | ((uint) (((uint) ((bool) ((bool) ((byte) ((imm) >> (uint) (0x7)))))) << 31))))));
		switch(type) {
			case 0x0: {
				VSR[(int) (rd)] = sv;
				break;
			}
			case 0x1: {
				VDR[(int) (rd)] = (double) (Bitcast<ulong, double>((ulong) ((ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (((ulong) ((ulong) ((ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (((ulong) ((bool) ((bool) (0x0)))) << 0)) | ((ulong) (((ulong) ((bool) ((bool) (0x0)))) << 1)))) | ((ulong) (((ulong) ((bool) ((bool) (0x0)))) << 2)))) | ((ulong) (((ulong) ((bool) ((bool) (0x0)))) << 3)))) | ((ulong) (((ulong) ((bool) ((bool) (0x0)))) << 4)))) | ((ulong) (((ulong) ((bool) ((bool) (0x0)))) << 5)))) | ((ulong) (((ulong) ((bool) ((bool) (0x0)))) << 6)))) | ((ulong) (((ulong) ((bool) ((bool) (0x0)))) << 7)))) | ((ulong) (((ulong) ((bool) ((bool) (0x0)))) << 8)))) | ((ulong) (((ulong) ((bool) ((bool) (0x0)))) << 9)))) | ((ulong) (((ulong) ((bool) ((bool) (0x0)))) << 10)))) | ((ulong) (((ulong) ((bool) ((bool) (0x0)))) << 11)))) | ((ulong) (((ulong) ((bool) ((bool) (0x0)))) << 12)))) | ((ulong) (((ulong) ((bool) ((bool) (0x0)))) << 13)))) | ((ulong) (((ulong) ((bool) ((bool) (0x0)))) << 14)))) | ((ulong) (((ulong) ((bool) ((bool) (0x0)))) << 15)))) | ((ulong) (((ulong) ((bool) ((bool) (0x0)))) << 16)))) | ((ulong) (((ulong) ((bool) ((bool) (0x0)))) << 17)))) | ((ulong) (((ulong) ((bool) ((bool) (0x0)))) << 18)))) | ((ulong) (((ulong) ((bool) ((bool) (0x0)))) << 19)))) | ((ulong) (((ulong) ((bool) ((bool) (0x0)))) << 20)))) | ((ulong) (((ulong) ((bool) ((bool) (0x0)))) << 21)))) | ((ulong) (((ulong) ((bool) ((bool) (0x0)))) << 22)))) | ((ulong) (((ulong) ((bool) ((bool) (0x0)))) << 23)))) | ((ulong) (((ulong) ((bool) ((bool) (0x0)))) << 24)))) | ((ulong) (((ulong) ((bool) ((bool) (0x0)))) << 25)))) | ((ulong) (((ulong) ((bool) ((bool) (0x0)))) << 26)))) | ((ulong) (((ulong) ((bool) ((bool) (0x0)))) << 27)))) | ((ulong) (((ulong) ((bool) ((bool) (0x0)))) << 28)))) | ((ulong) (((ulong) ((bool) ((bool) (0x0)))) << 29)))) | ((ulong) (((ulong) ((bool) ((bool) (0x0)))) << 30)))) | ((ulong) (((ulong) ((bool) ((bool) (0x0)))) << 31)))) | ((ulong) (((ulong) ((bool) ((bool) (0x0)))) << 32)))) | ((ulong) (((ulong) ((bool) ((bool) (0x0)))) << 33)))) | ((ulong) (((ulong) ((bool) ((bool) (0x0)))) << 34)))) | ((ulong) (((ulong) ((bool) ((bool) (0x0)))) << 35)))) | ((ulong) (((ulong) ((bool) ((bool) (0x0)))) << 36)))) | ((ulong) (((ulong) ((bool) ((bool) (0x0)))) << 37)))) | ((ulong) (((ulong) ((bool) ((bool) (0x0)))) << 38)))) | ((ulong) (((ulong) ((bool) ((bool) (0x0)))) << 39)))) | ((ulong) (((ulong) ((bool) ((bool) (0x0)))) << 40)))) | ((ulong) (((ulong) ((bool) ((bool) (0x0)))) << 41)))) | ((ulong) (((ulong) ((bool) ((bool) (0x0)))) << 42)))) | ((ulong) (((ulong) ((bool) ((bool) (0x0)))) << 43)))) | ((ulong) (((ulong) ((bool) ((bool) (0x0)))) << 44)))) | ((ulong) (((ulong) ((bool) ((bool) (0x0)))) << 45)))) | ((ulong) (((ulong) ((bool) ((bool) (0x0)))) << 46)))) | ((ulong) (((ulong) ((bool) ((bool) (0x0)))) << 47)))))) << 0)) | ((ulong) (((ulong) ((byte) ((byte) ((byte) ((((ulong) (imm)) & ((ulong) (0xF)))))))) << 48)))) | ((ulong) (((ulong) ((byte) ((byte) ((byte) ((((ulong) ((byte) ((imm) >> (uint) (0x4)))) & ((ulong) (0x3)))))))) << 52)))) | ((ulong) (((ulong) ((byte) ((byte) (((byte) (byte) (((byte) (byte) (((byte) (byte) (((byte) (byte) (((byte) (byte) (((byte) (byte) (((byte) (((byte) ((bool) ((bool) ((byte) ((((ulong) ((byte) ((imm) >> (uint) (0x6)))) & ((ulong) (0x1)))))))) << 0)) | ((byte) (((byte) ((bool) ((bool) ((byte) ((((ulong) ((byte) ((imm) >> (uint) (0x6)))) & ((ulong) (0x1)))))))) << 1)))) | ((byte) (((byte) ((bool) ((bool) ((byte) ((((ulong) ((byte) ((imm) >> (uint) (0x6)))) & ((ulong) (0x1)))))))) << 2)))) | ((byte) (((byte) ((bool) ((bool) ((byte) ((((ulong) ((byte) ((imm) >> (uint) (0x6)))) & ((ulong) (0x1)))))))) << 3)))) | ((byte) (((byte) ((bool) ((bool) ((byte) ((((ulong) ((byte) ((imm) >> (uint) (0x6)))) & ((ulong) (0x1)))))))) << 4)))) | ((byte) (((byte) ((bool) ((bool) ((byte) ((((ulong) ((byte) ((imm) >> (uint) (0x6)))) & ((ulong) (0x1)))))))) << 5)))) | ((byte) (((byte) ((bool) ((bool) ((byte) ((((ulong) ((byte) ((imm) >> (uint) (0x6)))) & ((ulong) (0x1)))))))) << 6)))) | ((byte) (((byte) ((bool) ((bool) ((byte) ((((ulong) ((byte) ((imm) >> (uint) (0x6)))) & ((ulong) (0x1)))))))) << 7)))))) << 54)))) | ((ulong) (((ulong) ((bool) (((byte) ((((ulong) ((byte) ((imm) >> (uint) (0x6)))) & ((ulong) (0x1))))) != 0 ? 0U : 1U))) << 62)))) | ((ulong) (((ulong) ((bool) ((bool) ((byte) ((imm) >> (uint) (0x7)))))) << 63))))));
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FMOV-vector-immediate-single */
bool Recompiler::FMOV_vector_immediate_single(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto a = (inst >> 18) & 0x1U;
		auto b = (inst >> 17) & 0x1U;
		auto c = (inst >> 16) & 0x1U;
		auto d = (inst >> 9) & 0x1U;
		auto e = (inst >> 8) & 0x1U;
		auto f = (inst >> 7) & 0x1U;
		auto g = (inst >> 6) & 0x1U;
		auto h = (inst >> 5) & 0x1U;
		auto rd = (inst >> 0) & 0x1FU;
		auto T = (string) ((Q != 0) ? (string("4S")) : (string("2S")));
		auto sv = (float) (Bitcast<uint, float>((uint) ((((uint) ((uint) ((uint) (((uint) (uint) (((uint) (uint) (((uint) (uint) (((uint) (uint) (((uint) (uint) (((uint) (uint) (((uint) (uint) (((uint) (uint) (((uint) (uint) (((uint) (uint) (((uint) (uint) (((uint) (uint) (((uint) (((uint) ((uint) ((uint) (0x0)))) << 0)) | ((uint) (((uint) (h)) << 19)))) | ((uint) (((uint) (g)) << 20)))) | ((uint) (((uint) (f)) << 21)))) | ((uint) (((uint) (e)) << 22)))) | ((uint) (((uint) (d)) << 23)))) | ((uint) (((uint) (c)) << 24)))) | ((uint) (((uint) (b)) << 25)))) | ((uint) (((uint) (b)) << 26)))) | ((uint) (((uint) (b)) << 27)))) | ((uint) (((uint) (b)) << 28)))) | ((uint) (((uint) (b)) << 29)))) | ((uint) (((uint) (b)) << 30)))) | ((uint) (((uint) (a)) << 31)))))) ^ ((uint) ((uint) (((uint) ((uint) (0x1))) << (uint) (0x1E))))))));
		auto avec = ((RuntimeValue<Vector128<float>>) (((RuntimeValue<float>) (sv)).CreateVector())).Store();
		if((Q) != 0) {
			VR[(int) (rd)] = avec;
		} else {
			VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) (avec);
		}
		return true;
	}
unimplemented:
	return false;
}

/* FMOV-vector-immediate-double */
bool Recompiler::FMOV_vector_immediate_double(uint inst, ulong pc) {
	{
		auto a = (inst >> 18) & 0x1U;
		auto b = (inst >> 17) & 0x1U;
		auto c = (inst >> 16) & 0x1U;
		auto d = (inst >> 9) & 0x1U;
		auto e = (inst >> 8) & 0x1U;
		auto f = (inst >> 7) & 0x1U;
		auto g = (inst >> 6) & 0x1U;
		auto h = (inst >> 5) & 0x1U;
		auto rd = (inst >> 0) & 0x1FU;
		auto sv = (double) (Bitcast<ulong, double>((ulong) ((((ulong) ((ulong) ((ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (((ulong) ((ulong) ((ulong) (0x0)))) << 0)) | ((ulong) (((ulong) (h)) << 48)))) | ((ulong) (((ulong) (g)) << 49)))) | ((ulong) (((ulong) (f)) << 50)))) | ((ulong) (((ulong) (e)) << 51)))) | ((ulong) (((ulong) (d)) << 52)))) | ((ulong) (((ulong) (c)) << 53)))) | ((ulong) (((ulong) (b)) << 54)))) | ((ulong) (((ulong) (b)) << 55)))) | ((ulong) (((ulong) (b)) << 56)))) | ((ulong) (((ulong) (b)) << 57)))) | ((ulong) (((ulong) (b)) << 58)))) | ((ulong) (((ulong) (b)) << 59)))) | ((ulong) (((ulong) (b)) << 60)))) | ((ulong) (((ulong) (b)) << 61)))) | ((ulong) (((ulong) (b)) << 62)))) | ((ulong) (((ulong) (a)) << 63)))))) ^ ((ulong) ((ulong) (((ulong) ((ulong) (0x1))) << (uint) (0x3E))))))));
		VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<double>) (sv)).CreateVector());
		return true;
	}
unimplemented:
	return false;
}

/* FMSUB */
bool Recompiler::FMSUB(uint inst, ulong pc) {
	{
		auto type = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto ra = (inst >> 10) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto t = (string) (([=](auto temp_734) -> string { switch(temp_734) { case 0x0: return string("S"); case 0x1: return string("D"); case 0x3: return string("H"); default: throw "Not implemented"; } })(type));
		switch(type) {
			case 0x0: {
				VSR[(int) (rd)] = (RuntimeValue<float>) (((RuntimeValue<float>) (RuntimeValue<float>) ((RuntimeValue<float>) (VSR[(int) (ra)]))) - ((RuntimeValue<float>) (RuntimeValue<float>) ((RuntimeValue<float>) (((RuntimeValue<float>) (RuntimeValue<float>) ((RuntimeValue<float>) (VSR[(int) (rn)]))) * ((RuntimeValue<float>) (RuntimeValue<float>) ((RuntimeValue<float>) (VSR[(int) (rm)])))))));
				break;
			}
			case 0x1: {
				VDR[(int) (rd)] = (RuntimeValue<double>) (((RuntimeValue<double>) (RuntimeValue<float>) ((RuntimeValue<float>) (VSR[(int) (ra)]))) - ((RuntimeValue<double>) (RuntimeValue<double>) ((RuntimeValue<double>) (((RuntimeValue<double>) (RuntimeValue<double>) ((RuntimeValue<double>) (VDR[(int) (rn)]))) * ((RuntimeValue<double>) (RuntimeValue<double>) ((RuntimeValue<double>) (VDR[(int) (rm)])))))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FMUL-by-element-scalar-spdp */
bool Recompiler::FMUL_by_element_scalar_spdp(uint inst, ulong pc) {
	{
		auto sz = (inst >> 22) & 0x1U;
		auto L = (inst >> 21) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto H = (inst >> 11) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto Ts = (string) ((sz != 0) ? (string("D")) : (string("S")));
		auto index = (uint) (([=](auto temp_735) -> uint { switch(temp_735) { case 0x2: return (uint) ((uint) (H)); case 0x3: throw "Not implemented"; default: return (uint) ((uint) ((byte) ((byte) (((byte) (((byte) (L)) << 0)) | ((byte) (((byte) (H)) << 1)))))); } })((byte) ((byte) (((byte) (((byte) (L)) << 0)) | ((byte) (((byte) (sz)) << 1))))));
		if((sz) != 0) {
			VDR[(int) (rd)] = (RuntimeValue<double>) (((RuntimeValue<double>) (RuntimeValue<double>) ((RuntimeValue<double>) (VDR[(int) (rn)]))) * ((RuntimeValue<double>) (RuntimeValue<double>) ((RuntimeValue<double>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<double>(index)))));
		} else {
			VSR[(int) (rd)] = (RuntimeValue<float>) (((RuntimeValue<float>) (RuntimeValue<float>) ((RuntimeValue<float>) (VSR[(int) (rn)]))) * ((RuntimeValue<float>) (RuntimeValue<float>) ((RuntimeValue<float>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<float>(index)))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* FMUL-by-element-vector-spdp */
bool Recompiler::FMUL_by_element_vector_spdp(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto sz = (inst >> 22) & 0x1U;
		auto L = (inst >> 21) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto H = (inst >> 11) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto T = (string) (([=](auto temp_736) -> string { switch(temp_736) { case 0x0: return string("2S"); case 0x2: return string("4S"); case 0x3: return string("2D"); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (((byte) (sz)) << 0)) | ((byte) (((byte) (Q)) << 1))))));
		auto Ts = (string) ((sz != 0) ? (string("D")) : (string("S")));
		auto index = (uint) (([=](auto temp_737) -> uint { switch(temp_737) { case 0x2: return (uint) ((uint) (H)); case 0x3: throw "Not implemented"; default: return (uint) ((uint) ((byte) ((byte) (((byte) (((byte) (L)) << 0)) | ((byte) (((byte) (H)) << 1)))))); } })((byte) ((byte) (((byte) (((byte) (L)) << 0)) | ((byte) (((byte) (sz)) << 1))))));
		if((sz) != 0) {
			VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<double>>) ((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])) * (RuntimeValue<Vector128<double>>) ((RuntimeValue<Vector128<float>>) (((RuntimeValue<double>) ((RuntimeValue<double>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<double>(index)))).CreateVector()))));
		} else {
			VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])) * ((RuntimeValue<Vector128<float>>) (((RuntimeValue<float>) ((RuntimeValue<float>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<float>(index)))).CreateVector())));
		}
		return true;
	}
unimplemented:
	return false;
}

/* FMUL-scalar */
bool Recompiler::FMUL_scalar(uint inst, ulong pc) {
	{
		auto type = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_738) -> string { switch(temp_738) { case 0x3: return string("H"); case 0x0: return string("S"); case 0x1: return string("D"); default: throw "Not implemented"; } })(type));
		switch(type) {
			case 0x0: {
				VSR[(int) (rd)] = (RuntimeValue<float>) (((RuntimeValue<float>) (RuntimeValue<float>) ((RuntimeValue<float>) (VSR[(int) (rn)]))) * ((RuntimeValue<float>) (RuntimeValue<float>) ((RuntimeValue<float>) (VSR[(int) (rm)]))));
				break;
			}
			case 0x1: {
				VDR[(int) (rd)] = (RuntimeValue<double>) (((RuntimeValue<double>) (RuntimeValue<double>) ((RuntimeValue<double>) (VDR[(int) (rn)]))) * ((RuntimeValue<double>) (RuntimeValue<double>) ((RuntimeValue<double>) (VDR[(int) (rm)]))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FMUL-vector */
bool Recompiler::FMUL_vector(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 22) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto ts = (string) (([=](auto temp_739) -> string { switch(temp_739) { case 0x0: return string("2S"); case 0x1: return string("4S"); case 0x3: return string("2D"); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))));
		switch((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))) {
			case 0x0: {
				VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])) * ((RuntimeValue<Vector128<float>>) (VR[(int) (rm)]))));
				break;
			}
			case 0x1: {
				VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])) * ((RuntimeValue<Vector128<float>>) (VR[(int) (rm)])));
				break;
			}
			case 0x3: {
				VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<double>>) ((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])) * (RuntimeValue<Vector128<double>>) ((RuntimeValue<Vector128<float>>) (VR[(int) (rm)]))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FNEG-scalar */
bool Recompiler::FNEG_scalar(uint inst, ulong pc) {
	{
		auto type = (inst >> 22) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_740) -> string { switch(temp_740) { case 0x3: return string("H"); case 0x0: return string("S"); case 0x1: return string("D"); default: throw "Not implemented"; } })(type));
		switch(type) {
			case 0x0: {
				VSR[(int) (rd)] = (RuntimeValue<float>) (-((RuntimeValue<float>) (VSR[(int) (rn)])));
				break;
			}
			case 0x1: {
				VDR[(int) (rd)] = (RuntimeValue<double>) (-((RuntimeValue<double>) (VDR[(int) (rn)])));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FNEG-vector */
bool Recompiler::FNEG_vector(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 22) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto T = (string) (([=](auto temp_741) -> string { switch(temp_741) { case 0x0: return string("2S"); case 0x1: return string("4S"); case 0x3: return string("2D"); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))));
		auto sv = ((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Store();
		VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<byte>) ((byte) ((byte) (0x0)))).CreateVector());
		switch((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))) {
			case 0x0: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<float>) (-((RuntimeValue<float>) ((sv).Element<float>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<float>) (-((RuntimeValue<float>) ((sv).Element<float>(0x1)))));
				break;
			}
			case 0x1: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<float>) (-((RuntimeValue<float>) ((sv).Element<float>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<float>) (-((RuntimeValue<float>) ((sv).Element<float>(0x1)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (RuntimeValue<float>) (-((RuntimeValue<float>) ((sv).Element<float>(0x2)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (RuntimeValue<float>) (-((RuntimeValue<float>) ((sv).Element<float>(0x3)))));
				break;
			}
			case 0x3: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<double>) (-((RuntimeValue<double>) ((sv).Element<double>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<double>) (-((RuntimeValue<double>) ((sv).Element<double>(0x1)))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FNMADD */
bool Recompiler::FNMADD(uint inst, ulong pc) {
	{
		auto type = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto ra = (inst >> 10) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_742) -> string { switch(temp_742) { case 0x3: return string("H"); case 0x0: return string("S"); case 0x1: return string("D"); default: throw "Not implemented"; } })(type));
		switch(type) {
			case 0x0: {
				VSR[(int) (rd)] = (RuntimeValue<float>) (((RuntimeValue<float>) (RuntimeValue<float>) ((RuntimeValue<float>) (-((RuntimeValue<float>) (((RuntimeValue<float>) (RuntimeValue<float>) ((RuntimeValue<float>) (VSR[(int) (rn)]))) * ((RuntimeValue<float>) (RuntimeValue<float>) ((RuntimeValue<float>) (VSR[(int) (rm)])))))))) - ((RuntimeValue<float>) (RuntimeValue<float>) ((RuntimeValue<float>) (VSR[(int) (ra)]))));
				break;
			}
			case 0x1: {
				VDR[(int) (rd)] = (RuntimeValue<double>) (((RuntimeValue<double>) (RuntimeValue<double>) ((RuntimeValue<double>) (-((RuntimeValue<double>) (((RuntimeValue<double>) (RuntimeValue<double>) ((RuntimeValue<double>) (VDR[(int) (rn)]))) * ((RuntimeValue<double>) (RuntimeValue<double>) ((RuntimeValue<double>) (VDR[(int) (rm)])))))))) - ((RuntimeValue<double>) (RuntimeValue<double>) ((RuntimeValue<double>) (VDR[(int) (ra)]))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FNMSUB */
bool Recompiler::FNMSUB(uint inst, ulong pc) {
	{
		auto type = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto ra = (inst >> 10) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_743) -> string { switch(temp_743) { case 0x3: return string("H"); case 0x0: return string("S"); case 0x1: return string("D"); default: throw "Not implemented"; } })(type));
		switch(type) {
			case 0x0: {
				VSR[(int) (rd)] = (RuntimeValue<float>) (((RuntimeValue<float>) (RuntimeValue<float>) ((RuntimeValue<float>) (((RuntimeValue<float>) (RuntimeValue<float>) ((RuntimeValue<float>) (VSR[(int) (rn)]))) * ((RuntimeValue<float>) (RuntimeValue<float>) ((RuntimeValue<float>) (VSR[(int) (rm)])))))) - ((RuntimeValue<float>) (RuntimeValue<float>) ((RuntimeValue<float>) (VSR[(int) (ra)]))));
				break;
			}
			case 0x1: {
				VDR[(int) (rd)] = (RuntimeValue<double>) (((RuntimeValue<double>) (RuntimeValue<double>) ((RuntimeValue<double>) (((RuntimeValue<double>) (RuntimeValue<double>) ((RuntimeValue<double>) (VDR[(int) (rn)]))) * ((RuntimeValue<double>) (RuntimeValue<double>) ((RuntimeValue<double>) (VDR[(int) (rm)])))))) - ((RuntimeValue<double>) (RuntimeValue<double>) ((RuntimeValue<double>) (VDR[(int) (ra)]))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FNMUL-scalar */
bool Recompiler::FNMUL_scalar(uint inst, ulong pc) {
	{
		auto type = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_744) -> string { switch(temp_744) { case 0x3: return string("H"); case 0x0: return string("S"); case 0x1: return string("D"); default: throw "Not implemented"; } })(type));
		switch(type) {
			case 0x0: {
				VSR[(int) (rd)] = (RuntimeValue<float>) (-((RuntimeValue<float>) (((RuntimeValue<float>) (RuntimeValue<float>) ((RuntimeValue<float>) (VSR[(int) (rn)]))) * ((RuntimeValue<float>) (RuntimeValue<float>) ((RuntimeValue<float>) (VSR[(int) (rm)]))))));
				break;
			}
			case 0x1: {
				VDR[(int) (rd)] = (RuntimeValue<double>) (-((RuntimeValue<double>) (((RuntimeValue<double>) (RuntimeValue<double>) ((RuntimeValue<double>) (VDR[(int) (rn)]))) * ((RuntimeValue<double>) (RuntimeValue<double>) ((RuntimeValue<double>) (VDR[(int) (rm)]))))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FRINTA-scalar */
bool Recompiler::FRINTA_scalar(uint inst, ulong pc) {
	{
		auto type = (inst >> 22) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_745) -> string { switch(temp_745) { case 0x3: return string("H"); case 0x0: return string("S"); case 0x1: return string("D"); default: throw "Not implemented"; } })(type));
		switch(type) {
			case 0x0: {
				VSR[(int) (rd)] = (RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<float>) (VSR[(int) (rn)])) < (0x0))), (RuntimeValue<float>) (((RuntimeValue<float>) (VSR[(int) (rn)])).RoundHalfDown()), (RuntimeValue<float>) (((RuntimeValue<float>) (VSR[(int) (rn)])).RoundHalfUp())));
				break;
			}
			case 0x1: {
				VDR[(int) (rd)] = (RuntimeValue<double>) (Ternary<bool, double>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<double>) (VDR[(int) (rn)])) < (0x0))), (RuntimeValue<double>) (((RuntimeValue<double>) (VDR[(int) (rn)])).RoundHalfDown()), (RuntimeValue<double>) (((RuntimeValue<double>) (VDR[(int) (rn)])).RoundHalfUp())));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FRINTI-scalar */
bool Recompiler::FRINTI_scalar(uint inst, ulong pc) {
	{
		auto type = (inst >> 22) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_746) -> string { switch(temp_746) { case 0x3: return string("H"); case 0x0: return string("S"); case 0x1: return string("D"); default: throw "Not implemented"; } })(type));
		switch(type) {
			case 0x0: {
				VSR[(int) (rd)] = (RuntimeValue<float>) (((RuntimeValue<float>) (VSR[(int) (rn)])).Round());
				break;
			}
			case 0x1: {
				VDR[(int) (rd)] = (RuntimeValue<double>) (((RuntimeValue<double>) (VDR[(int) (rn)])).Round());
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FRINTM-scalar */
bool Recompiler::FRINTM_scalar(uint inst, ulong pc) {
	{
		auto type = (inst >> 22) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_747) -> string { switch(temp_747) { case 0x3: return string("H"); case 0x0: return string("S"); case 0x1: return string("D"); default: throw "Not implemented"; } })(type));
		switch(type) {
			case 0x0: {
				VSR[(int) (rd)] = (RuntimeValue<float>) (((RuntimeValue<float>) (VSR[(int) (rn)])).RoundHalfDown());
				break;
			}
			case 0x1: {
				VDR[(int) (rd)] = (RuntimeValue<double>) (((RuntimeValue<double>) (VDR[(int) (rn)])).RoundHalfDown());
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FRINTP-scalar */
bool Recompiler::FRINTP_scalar(uint inst, ulong pc) {
	{
		auto type = (inst >> 22) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_748) -> string { switch(temp_748) { case 0x3: return string("H"); case 0x0: return string("S"); case 0x1: return string("D"); default: throw "Not implemented"; } })(type));
		switch(type) {
			case 0x0: {
				VSR[(int) (rd)] = (RuntimeValue<float>) (((RuntimeValue<float>) (VSR[(int) (rn)])).RoundHalfUp());
				break;
			}
			case 0x1: {
				VDR[(int) (rd)] = (RuntimeValue<double>) (((RuntimeValue<double>) (VDR[(int) (rn)])).RoundHalfUp());
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FRINTX-scalar */
bool Recompiler::FRINTX_scalar(uint inst, ulong pc) {
	{
		auto type = (inst >> 22) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_749) -> string { switch(temp_749) { case 0x3: return string("H"); case 0x0: return string("S"); case 0x1: return string("D"); default: throw "Not implemented"; } })(type));
		switch(type) {
			case 0x0: {
				VSR[(int) (rd)] = (RuntimeValue<float>) (((RuntimeValue<float>) (VSR[(int) (rn)])).Round());
				break;
			}
			case 0x1: {
				VDR[(int) (rd)] = (RuntimeValue<double>) (((RuntimeValue<double>) (VDR[(int) (rn)])).Round());
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FRINTZ-scalar */
bool Recompiler::FRINTZ_scalar(uint inst, ulong pc) {
	{
		auto type = (inst >> 22) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_750) -> string { switch(temp_750) { case 0x3: return string("H"); case 0x0: return string("S"); case 0x1: return string("D"); default: throw "Not implemented"; } })(type));
		switch(type) {
			case 0x0: {
				VSR[(int) (rd)] = (RuntimeValue<float>) (Ternary<bool, float>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<float>) (VSR[(int) (rn)])) < (0x0))), (RuntimeValue<float>) (((RuntimeValue<float>) (VSR[(int) (rn)])).RoundHalfUp()), (RuntimeValue<float>) (((RuntimeValue<float>) (VSR[(int) (rn)])).RoundHalfDown())));
				break;
			}
			case 0x1: {
				VDR[(int) (rd)] = (RuntimeValue<double>) (Ternary<bool, double>((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<double>) (VDR[(int) (rn)])) < (0x0))), (RuntimeValue<double>) (((RuntimeValue<double>) (VDR[(int) (rn)])).RoundHalfUp()), (RuntimeValue<double>) (((RuntimeValue<double>) (VDR[(int) (rn)])).RoundHalfDown())));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FRSQRTE-vector */
bool Recompiler::FRSQRTE_vector(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 22) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto t = (string) (([=](auto temp_751) -> string { switch(temp_751) { case 0x0: return string("2S"); case 0x1: return string("4S"); case 0x3: return string("2D"); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))));
		VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) (([=](auto temp_752) -> RuntimeValue<Vector128<float>> { switch(temp_752) { case 0x0: return (RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) (Call<Vector128<float>, Vector128<float>, int, int>(VectorFrsqrte, (RuntimeValue<Vector128<float>>) (VR[(int) (rn)]), 0x20, 0x2))); case 0x1: return (RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) (Call<Vector128<float>, Vector128<float>, int, int>(VectorFrsqrte, (RuntimeValue<Vector128<float>>) (VR[(int) (rn)]), 0x20, 0x4))); case 0x3: return (RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) (Call<Vector128<float>, Vector128<float>, int, int>(VectorFrsqrte, (RuntimeValue<Vector128<float>>) (VR[(int) (rn)]), 0x40, 0x2))); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))));
		return true;
	}
unimplemented:
	return false;
}

/* FRSQRTS-vector */
bool Recompiler::FRSQRTS_vector(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 22) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto t = (string) (([=](auto temp_753) -> string { switch(temp_753) { case 0x0: return string("2S"); case 0x1: return string("4S"); case 0x3: return string("2D"); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))));
		switch((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))) {
			case 0x0: {
				VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) (((RuntimeValue<Vector128<float>>) (((RuntimeValue<Vector128<float>>) (((RuntimeValue<float>) ((float) ((float) (0x3)))).CreateVector())) - ((RuntimeValue<Vector128<float>>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])) * ((RuntimeValue<Vector128<float>>) (VR[(int) (rm)])))))) / ((RuntimeValue<Vector128<float>>) (((RuntimeValue<float>) ((float) ((float) (0x2)))).CreateVector()))));
				break;
			}
			case 0x1: {
				VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<Vector128<float>>) (((RuntimeValue<Vector128<float>>) (((RuntimeValue<float>) ((float) ((float) (0x3)))).CreateVector())) - ((RuntimeValue<Vector128<float>>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])) * ((RuntimeValue<Vector128<float>>) (VR[(int) (rm)])))))) / ((RuntimeValue<Vector128<float>>) (((RuntimeValue<float>) ((float) ((float) (0x2)))).CreateVector())));
				break;
			}
			case 0x3: {
				VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<double>>) ((RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<double>>) ((RuntimeValue<Vector128<float>>) (((RuntimeValue<double>) ((double) ((double) (0x3)))).CreateVector())) - (RuntimeValue<Vector128<double>>) ((RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<double>>) ((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])) * (RuntimeValue<Vector128<double>>) ((RuntimeValue<Vector128<float>>) (VR[(int) (rm)])))))))) / (RuntimeValue<Vector128<double>>) ((RuntimeValue<Vector128<float>>) (((RuntimeValue<double>) ((double) ((double) (0x2)))).CreateVector()))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FSQRT-scalar */
bool Recompiler::FSQRT_scalar(uint inst, ulong pc) {
	{
		auto type = (inst >> 22) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_754) -> string { switch(temp_754) { case 0x3: return string("H"); case 0x0: return string("S"); case 0x1: return string("D"); default: throw "Not implemented"; } })(type));
		switch(type) {
			case 0x0: {
				VSR[(int) (rd)] = (RuntimeValue<float>) ((RuntimeValue<float>) ((RuntimeValue<double>) ((RuntimeValue<float>) (VSR[(int) (rn)]))).Sqrt());
				break;
			}
			case 0x1: {
				VDR[(int) (rd)] = (RuntimeValue<double>) ((RuntimeValue<double>) ((RuntimeValue<double>) ((RuntimeValue<double>) (VDR[(int) (rn)]))).Sqrt());
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FSUB-scalar */
bool Recompiler::FSUB_scalar(uint inst, ulong pc) {
	{
		auto type = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_755) -> string { switch(temp_755) { case 0x3: return string("H"); case 0x0: return string("S"); case 0x1: return string("D"); default: throw "Not implemented"; } })(type));
		switch(type) {
			case 0x0: {
				VSR[(int) (rd)] = (RuntimeValue<float>) (((RuntimeValue<float>) (RuntimeValue<float>) ((RuntimeValue<float>) (VSR[(int) (rn)]))) - ((RuntimeValue<float>) (RuntimeValue<float>) ((RuntimeValue<float>) (VSR[(int) (rm)]))));
				break;
			}
			case 0x1: {
				VDR[(int) (rd)] = (RuntimeValue<double>) (((RuntimeValue<double>) (RuntimeValue<double>) ((RuntimeValue<double>) (VDR[(int) (rn)]))) - ((RuntimeValue<double>) (RuntimeValue<double>) ((RuntimeValue<double>) (VDR[(int) (rm)]))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FSUB-vector */
bool Recompiler::FSUB_vector(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 22) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto ts = (string) (([=](auto temp_756) -> string { switch(temp_756) { case 0x0: return string("2S"); case 0x1: return string("4S"); case 0x3: return string("2D"); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))));
		switch((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))) {
			case 0x0: {
				VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])) - ((RuntimeValue<Vector128<float>>) (VR[(int) (rm)]))));
				break;
			}
			case 0x1: {
				VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])) - ((RuntimeValue<Vector128<float>>) (VR[(int) (rm)])));
				break;
			}
			case 0x3: {
				VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<double>>) ((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])) - (RuntimeValue<Vector128<double>>) ((RuntimeValue<Vector128<float>>) (VR[(int) (rm)]))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* INS-general */
bool Recompiler::INS_general(uint inst, ulong pc) {
	{
		auto imm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto ts = string("");
		auto index = (uint) ((uint) (0x0));
		auto r = string("W");
		if(((bool) ((((byte) ((((ulong) (imm)) & ((ulong) (0x1))))) == (0x1)) ? 1U : 0U)) != 0) {
			ts = string("B");
			index = (byte) ((imm) >> (uint) (0x1));
		} else {
			if(((bool) ((((byte) ((((ulong) (imm)) & ((ulong) (0x2))))) == (0x2)) ? 1U : 0U)) != 0) {
				ts = string("H");
				index = (byte) ((imm) >> (uint) (0x2));
			} else {
				if(((bool) ((((byte) ((((ulong) (imm)) & ((ulong) (0x4))))) == (0x4)) ? 1U : 0U)) != 0) {
					ts = string("S");
					index = (byte) ((imm) >> (uint) (0x3));
				} else {
					ts = string("D");
					index = (byte) ((imm) >> (uint) (0x4));
					r = string("X");
				}
			}
		}
		if(((bool) ((((byte) ((((ulong) (imm)) & ((ulong) (0x1))))) == (0x1)) ? 1U : 0U)) != 0) {
			VR[(int) (rd)] = VR[(int) (rd)]().Insert(index, (RuntimeValue<byte>) ((RuntimeValue<byte>) ((RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]()))));
		} else {
			if(((bool) ((((byte) ((((ulong) (imm)) & ((ulong) (0x2))))) == (0x2)) ? 1U : 0U)) != 0) {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(index, (RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]()))));
			} else {
				if(((bool) ((((byte) ((((ulong) (imm)) & ((ulong) (0x4))))) == (0x4)) ? 1U : 0U)) != 0) {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(index, (RuntimeValue<float>) (((RuntimeValue<uint>) ((rn) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rn]()))).Bitcast<float>()));
				} else {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(index, (RuntimeValue<double>) (((RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]())).Bitcast<double>()));
				}
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* INS-vector */
bool Recompiler::INS_vector(uint inst, ulong pc) {
	{
		auto imm5 = (inst >> 16) & 0x1FU;
		auto imm4 = (inst >> 11) & 0xFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto ts = string("");
		auto index1 = (uint) ((uint) (0x0));
		auto index2 = (uint) ((uint) (0x0));
		if(((bool) ((((byte) ((((ulong) (imm5)) & ((ulong) (0x1))))) == (0x1)) ? 1U : 0U)) != 0) {
			ts = string("B");
			index1 = (byte) ((imm5) >> (uint) (0x1));
			index2 = imm4;
		} else {
			if(((bool) ((((byte) ((((ulong) (imm5)) & ((ulong) (0x2))))) == (0x2)) ? 1U : 0U)) != 0) {
				ts = string("H");
				index1 = (byte) ((imm5) >> (uint) (0x2));
				index2 = (byte) ((imm4) >> (uint) (0x1));
			} else {
				if(((bool) ((((byte) ((((ulong) (imm5)) & ((ulong) (0x4))))) == (0x4)) ? 1U : 0U)) != 0) {
					ts = string("S");
					index1 = (byte) ((imm5) >> (uint) (0x3));
					index2 = (byte) ((imm4) >> (uint) (0x2));
				} else {
					ts = string("D");
					index1 = (byte) ((imm5) >> (uint) (0x4));
					index2 = (byte) ((imm4) >> (uint) (0x3));
				}
			}
		}
		if(((bool) ((((byte) ((((ulong) (imm5)) & ((ulong) (0x1))))) == (0x1)) ? 1U : 0U)) != 0) {
			VR[(int) (rd)] = VR[(int) (rd)]().Insert(index1, (RuntimeValue<byte>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<byte>(index2)));
		} else {
			if(((bool) ((((byte) ((((ulong) (imm5)) & ((ulong) (0x2))))) == (0x2)) ? 1U : 0U)) != 0) {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(index1, (RuntimeValue<ushort>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<ushort>(index2)));
			} else {
				if(((bool) ((((byte) ((((ulong) (imm5)) & ((ulong) (0x4))))) == (0x4)) ? 1U : 0U)) != 0) {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(index1, (RuntimeValue<float>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(index2)));
				} else {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(index1, (RuntimeValue<double>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<double>(index2)));
				}
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* LD1-single-no-offset */
bool Recompiler::LD1_single_no_offset(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto opc = (inst >> 14) & 0x3U;
		auto S = (inst >> 12) & 0x1U;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		if(!((bool) (((opc) != (0x3)) ? 1U : 0U)))
			goto unimplemented;
		auto t = (string) (((bool) (((opc) == (0x0)) ? 1U : 0U) != 0) ? (string("B")) : ((string) (((bool) ((((bool) ((bool) (((opc) == (0x1)) ? 1U : 0U))) & ((bool) ((bool) ((((byte) ((((ulong) (size)) & ((ulong) (0x1))))) == (0x0)) ? 1U : 0U))))) != 0) ? (string("H")) : ((string) (((bool) (((opc) == (0x2)) ? 1U : 0U) != 0) ? ((string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("S")) : ((string) (((bool) ((((bool) ((bool) (((size) == (0x1)) ? 1U : 0U))) & ((bool) ((bool) (((S) == (0x0)) ? 1U : 0U))))) != 0) ? (string("D")) : throw "Not implemented")))) : throw "Not implemented")))));
		auto index = (uint) (([=](auto temp_757) -> uint { switch(temp_757) { case 0x0: return (uint) ((uint) ((byte) ((byte) (((byte) (byte) (((byte) (((byte) (size)) << 0)) | ((byte) (((byte) (S)) << 2)))) | ((byte) (((byte) (Q)) << 3)))))); case 0x1: return (uint) (((uint) ((uint) ((byte) ((byte) (((byte) (byte) (((byte) (((byte) (size)) << 0)) | ((byte) (((byte) (S)) << 2)))) | ((byte) (((byte) (Q)) << 3))))))) >> (uint) (0x1)); case 0x2: return (uint) (((bool) ((((byte) ((((ulong) (size)) & ((ulong) (0x1))))) == (0x0)) ? 1U : 0U) != 0) ? ((uint) ((uint) ((byte) ((byte) (((byte) (((byte) (S)) << 0)) | ((byte) (((byte) (Q)) << 1))))))) : (Q)); default: throw "Not implemented"; } })(opc));
		auto address = ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		switch(opc) {
			case 0x0: {
				VR[(int) (rt)] = VR[(int) (rt)]().Insert(index, (RuntimeValue<byte>) (((RuntimePointer<byte>) (address)).value()));
				break;
			}
			case 0x1: {
				VR[(int) (rt)] = VR[(int) (rt)]().Insert(index, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) (address)).value()));
				break;
			}
			case 0x2: {
				if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(index, (RuntimeValue<float>) (((RuntimePointer<float>) (address)).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(index, (RuntimeValue<double>) (((RuntimePointer<double>) (address)).value()));
				}
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* LD1-multi-one-no-offset */
bool Recompiler::LD1_multi_one_no_offset(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto t = (string) (([=](auto temp_758) -> string { switch(temp_758) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x6: return string("1D"); default: return string("2D"); } })((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))));
		auto address = ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		VR[(int) (rt)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<byte>) ((byte) ((byte) (0x0)))).CreateVector());
		switch(size) {
			case 0x0: {
				VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) (address)).value()));
				VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x1))))).value()));
				VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x2))))).value()));
				VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x3))))).value()));
				VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x4))))).value()));
				VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x5))))).value()));
				VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x6))))).value()));
				VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x7))))).value()));
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x8, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x8))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x9, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x9))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xA, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0xA))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xB, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0xB))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xC, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0xC))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xD, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0xD))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xE, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0xE))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xF, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0xF))))).value()));
				}
				break;
			}
			case 0x1: {
				VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) (address)).value()));
				VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x2))))).value()));
				VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x4))))).value()));
				VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x6))))).value()));
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x8))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0xA))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0xC))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0xE))))).value()));
				}
				break;
			}
			case 0x2: {
				VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<uint>) (((RuntimePointer<uint>) (address)).value()));
				VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<uint>) (((RuntimePointer<uint>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x4))))).value()));
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (RuntimeValue<uint>) (((RuntimePointer<uint>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x8))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (RuntimeValue<uint>) (((RuntimePointer<uint>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0xC))))).value()));
				}
				break;
			}
			default: {
				VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<ulong>) (((RuntimePointer<ulong>) (address)).value()));
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<ulong>) (((RuntimePointer<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x8))))).value()));
				}
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* LD1R-single-no-offset */
bool Recompiler::LD1R_single_no_offset(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto t = (string) (([=](auto temp_759) -> string { switch(temp_759) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x6: return string("1D"); default: return string("2D"); } })((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))));
		auto address = ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		auto sv = ((RuntimeValue<Vector128<float>>) (([=](auto temp_760) -> RuntimeValue<Vector128<float>> { switch(temp_760) { case 0x0: return (RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) (((RuntimeValue<byte>) ((RuntimeValue<byte>) (((RuntimePointer<byte>) (address)).value()))).CreateVector())); case 0x1: return (RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) (((RuntimeValue<ushort>) ((RuntimeValue<ushort>) (((RuntimePointer<ushort>) (address)).value()))).CreateVector())); case 0x2: return (RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) (((RuntimeValue<float>) ((RuntimeValue<float>) (((RuntimePointer<float>) (address)).value()))).CreateVector())); default: return (RuntimeValue<Vector128<float>>) (((RuntimeValue<double>) ((RuntimeValue<double>) (((RuntimePointer<double>) (address)).value()))).CreateVector()); } })(size))).Store();
		VR[(int) (rt)] = (RuntimeValue<Vector128<float>>) ((Q) != 0 ? (sv) : ((RuntimeValue<Vector128<float>>) (sv)));
		return true;
	}
unimplemented:
	return false;
}

/* LD1R-single-postindex-immediate */
bool Recompiler::LD1R_single_postindex_immediate(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		if(!((bool) (((rm) == (0x1F)) ? 1U : 0U)))
			goto unimplemented;
		auto t = (string) (([=](auto temp_761) -> string { switch(temp_761) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x6: return string("1D"); default: return string("2D"); } })((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))));
		auto imm = (long) (([=](auto temp_762) -> long { switch(temp_762) { case 0x0: return 0x1; case 0x1: return 0x2; case 0x2: return 0x4; default: return 0x8; } })(size));
		auto address = ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		auto sv = ((RuntimeValue<Vector128<float>>) (([=](auto temp_763) -> RuntimeValue<Vector128<float>> { switch(temp_763) { case 0x0: return (RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) (((RuntimeValue<byte>) ((RuntimeValue<byte>) (((RuntimePointer<byte>) (address)).value()))).CreateVector())); case 0x1: return (RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) (((RuntimeValue<ushort>) ((RuntimeValue<ushort>) (((RuntimePointer<ushort>) (address)).value()))).CreateVector())); case 0x2: return (RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) (((RuntimeValue<float>) ((RuntimeValue<float>) (((RuntimePointer<float>) (address)).value()))).CreateVector())); default: return (RuntimeValue<Vector128<float>>) (((RuntimeValue<double>) ((RuntimeValue<double>) (((RuntimePointer<double>) (address)).value()))).CreateVector()); } })(size))).Store();
		VR[(int) (rt)] = (RuntimeValue<Vector128<float>>) ((Q) != 0 ? (sv) : ((RuntimeValue<Vector128<float>>) (sv)));
		if(rn == 31)
			SPR = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (imm)));
		else
			XR[(int) rn] = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (imm)));
		return true;
	}
unimplemented:
	return false;
}

/* LD1R-single-postindex-register */
bool Recompiler::LD1R_single_postindex_register(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		if(!((bool) (((rm) != (0x1F)) ? 1U : 0U)))
			goto unimplemented;
		auto t = (string) (([=](auto temp_764) -> string { switch(temp_764) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x6: return string("1D"); default: return string("2D"); } })((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))));
		auto address = ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		auto sv = ((RuntimeValue<Vector128<float>>) (([=](auto temp_765) -> RuntimeValue<Vector128<float>> { switch(temp_765) { case 0x0: return (RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) (((RuntimeValue<byte>) ((RuntimeValue<byte>) (((RuntimePointer<byte>) (address)).value()))).CreateVector())); case 0x1: return (RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) (((RuntimeValue<ushort>) ((RuntimeValue<ushort>) (((RuntimePointer<ushort>) (address)).value()))).CreateVector())); case 0x2: return (RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) (((RuntimeValue<float>) ((RuntimeValue<float>) (((RuntimePointer<float>) (address)).value()))).CreateVector())); default: return (RuntimeValue<Vector128<float>>) (((RuntimeValue<double>) ((RuntimeValue<double>) (((RuntimePointer<double>) (address)).value()))).CreateVector()); } })(size))).Store();
		VR[(int) (rt)] = (RuntimeValue<Vector128<float>>) ((Q) != 0 ? (sv) : ((RuntimeValue<Vector128<float>>) (sv)));
		if(rn == 31)
			SPR = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]()))));
		else
			XR[(int) rn] = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]()))));
		return true;
	}
unimplemented:
	return false;
}

/* LD2-multi-no-offset */
bool Recompiler::LD2_multi_no_offset(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto rt2 = (ulong) (((ulong) (ulong) ((ulong) (((ulong) (byte) (rt)) + ((ulong) (long) (0x1))))) % ((ulong) (long) (0x20)));
		auto T = (string) (([=](auto temp_766) -> string { switch(temp_766) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))));
		auto address = ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		VR[(int) (rt)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<byte>) ((byte) ((byte) (0x0)))).CreateVector());
		VR[(int) (rt2)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<byte>) ((byte) ((byte) (0x0)))).CreateVector());
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x5)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x7)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x9)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xB)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xD)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xF)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x8, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x8, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x11)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x9, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x9, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x13)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xA, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xA, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x15)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xB, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xB, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x17)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xC, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xC, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x19)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xD, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1A)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xD, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1B)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xE, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xE, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1D)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xF, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1E)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xF, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1F)))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x5)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x7)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x9)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xB)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xD)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xF)))))).value()));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1A)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1E)))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value()));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value()));
				}
				break;
			}
			default: {
				VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
				VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
				VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value()));
				VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value()));
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* LD2-multi-postindex-immediate */
bool Recompiler::LD2_multi_postindex_immediate(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto rt2 = (ulong) (((ulong) (ulong) ((ulong) (((ulong) (byte) (rt)) + ((ulong) (long) (0x1))))) % ((ulong) (long) (0x20)));
		auto imm = (byte) ((byte) ((long) ((Q != 0) ? (0x20) : (0x10))));
		if(!((bool) (((rm) == (0x1F)) ? 1U : 0U)))
			goto unimplemented;
		auto T = (string) (([=](auto temp_767) -> string { switch(temp_767) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))));
		auto address = ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		VR[(int) (rt)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<byte>) ((byte) ((byte) (0x0)))).CreateVector());
		VR[(int) (rt2)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<byte>) ((byte) ((byte) (0x0)))).CreateVector());
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x5)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x7)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x9)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xB)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xD)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xF)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x8, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x8, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x11)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x9, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x9, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x13)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xA, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xA, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x15)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xB, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xB, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x17)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xC, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xC, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x19)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xD, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1A)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xD, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1B)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xE, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xE, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1D)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xF, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1E)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xF, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1F)))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x5)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x7)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x9)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xB)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xD)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xF)))))).value()));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1A)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1E)))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value()));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value()));
				}
				break;
			}
			default: {
				VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
				VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
				VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value()));
				VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value()));
				break;
			}
		}
		if(rn == 31)
			SPR = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<byte>) (imm)));
		else
			XR[(int) rn] = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<byte>) (imm)));
		return true;
	}
unimplemented:
	return false;
}

/* LD2-multi-postindex-register */
bool Recompiler::LD2_multi_postindex_register(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto rt2 = (ulong) (((ulong) (ulong) ((ulong) (((ulong) (byte) (rt)) + ((ulong) (long) (0x1))))) % ((ulong) (long) (0x20)));
		if(!((bool) (((rm) != (0x1F)) ? 1U : 0U)))
			goto unimplemented;
		auto T = (string) (([=](auto temp_768) -> string { switch(temp_768) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))));
		auto address = ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		VR[(int) (rt)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<byte>) ((byte) ((byte) (0x0)))).CreateVector());
		VR[(int) (rt2)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<byte>) ((byte) ((byte) (0x0)))).CreateVector());
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x5)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x7)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x9)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xB)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xD)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xF)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x8, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x8, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x11)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x9, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x9, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x13)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xA, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xA, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x15)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xB, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xB, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x17)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xC, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xC, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x19)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xD, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1A)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xD, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1B)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xE, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xE, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1D)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xF, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1E)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xF, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1F)))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x5)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x7)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x9)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xB)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xD)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xF)))))).value()));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1A)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1E)))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value()));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value()));
				}
				break;
			}
			default: {
				VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
				VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
				VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value()));
				VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value()));
				break;
			}
		}
		if(rn == 31)
			SPR = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]()))));
		else
			XR[(int) rn] = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]()))));
		return true;
	}
unimplemented:
	return false;
}

/* LD3-multi-no-offset */
bool Recompiler::LD3_multi_no_offset(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto rt2 = (ulong) (((ulong) (ulong) ((ulong) (((ulong) (byte) (rt)) + ((ulong) (long) (0x1))))) % ((ulong) (long) (0x20)));
		auto rt3 = (ulong) (((ulong) (ulong) ((ulong) (((ulong) (byte) (rt)) + ((ulong) (long) (0x2))))) % ((ulong) (long) (0x20)));
		auto T = (string) (([=](auto temp_769) -> string { switch(temp_769) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))));
		auto address = ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		VR[(int) (rt)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<byte>) ((byte) ((byte) (0x0)))).CreateVector());
		VR[(int) (rt2)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<byte>) ((byte) ((byte) (0x0)))).CreateVector());
		VR[(int) (rt3)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<byte>) ((byte) ((byte) (0x0)))).CreateVector());
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x5)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x7)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x9)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xB)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xD)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xF)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x11)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x13)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x15)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x17)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x8, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x8, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x19)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x8, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1A)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x9, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1B)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x9, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x9, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1D)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xA, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1E)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xA, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1F)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xA, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x20)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xB, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x21)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xB, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x22)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xB, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x23)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xC, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x24)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xC, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x25)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xC, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x26)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xD, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x27)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xD, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x28)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xD, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x29)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xE, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2A)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xE, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2B)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xE, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2C)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xF, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2D)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xF, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2E)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xF, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2F)))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x5)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x7)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x9)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xB)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xD)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xF)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x11)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x13)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x15)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x17)))))).value()));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1A)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x4, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1E)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x20)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x5, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x22)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x24)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x26)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x6, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x28)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2A)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2C)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x7, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2E)))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value()));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x20)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x24)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x28)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2C)))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value()));
				}
				break;
			}
			default: {
				VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
				VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
				VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value()));
				VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value()));
				VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x20)))))).value()));
				VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x28)))))).value()));
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* LD3-multi-postindex-immediate */
bool Recompiler::LD3_multi_postindex_immediate(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto rt2 = (ulong) (((ulong) (ulong) ((ulong) (((ulong) (byte) (rt)) + ((ulong) (long) (0x1))))) % ((ulong) (long) (0x20)));
		auto rt3 = (ulong) (((ulong) (ulong) ((ulong) (((ulong) (byte) (rt)) + ((ulong) (long) (0x2))))) % ((ulong) (long) (0x20)));
		auto imm = (byte) ((byte) ((long) ((Q != 0) ? (0x30) : (0x18))));
		if(!((bool) (((rm) == (0x1F)) ? 1U : 0U)))
			goto unimplemented;
		auto T = (string) (([=](auto temp_770) -> string { switch(temp_770) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))));
		auto address = ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		VR[(int) (rt)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<byte>) ((byte) ((byte) (0x0)))).CreateVector());
		VR[(int) (rt2)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<byte>) ((byte) ((byte) (0x0)))).CreateVector());
		VR[(int) (rt3)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<byte>) ((byte) ((byte) (0x0)))).CreateVector());
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x5)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x7)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x9)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xB)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xD)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xF)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x11)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x13)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x15)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x17)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x8, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x8, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x19)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x8, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1A)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x9, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1B)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x9, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x9, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1D)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xA, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1E)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xA, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1F)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xA, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x20)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xB, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x21)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xB, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x22)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xB, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x23)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xC, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x24)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xC, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x25)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xC, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x26)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xD, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x27)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xD, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x28)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xD, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x29)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xE, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2A)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xE, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2B)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xE, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2C)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xF, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2D)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xF, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2E)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xF, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2F)))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x5)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x7)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x9)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xB)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xD)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xF)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x11)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x13)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x15)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x17)))))).value()));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1A)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x4, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1E)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x20)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x5, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x22)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x24)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x26)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x6, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x28)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2A)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2C)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x7, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2E)))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value()));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x20)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x24)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x28)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2C)))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value()));
				}
				break;
			}
			default: {
				VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
				VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
				VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value()));
				VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value()));
				VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x20)))))).value()));
				VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x28)))))).value()));
				break;
			}
		}
		if(rn == 31)
			SPR = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<byte>) (imm)));
		else
			XR[(int) rn] = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<byte>) (imm)));
		return true;
	}
unimplemented:
	return false;
}

/* LD3-multi-postindex-register */
bool Recompiler::LD3_multi_postindex_register(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto rt2 = (ulong) (((ulong) (ulong) ((ulong) (((ulong) (byte) (rt)) + ((ulong) (long) (0x1))))) % ((ulong) (long) (0x20)));
		auto rt3 = (ulong) (((ulong) (ulong) ((ulong) (((ulong) (byte) (rt)) + ((ulong) (long) (0x2))))) % ((ulong) (long) (0x20)));
		if(!((bool) (((rm) != (0x1F)) ? 1U : 0U)))
			goto unimplemented;
		auto T = (string) (([=](auto temp_771) -> string { switch(temp_771) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))));
		auto address = ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		VR[(int) (rt)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<byte>) ((byte) ((byte) (0x0)))).CreateVector());
		VR[(int) (rt2)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<byte>) ((byte) ((byte) (0x0)))).CreateVector());
		VR[(int) (rt3)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<byte>) ((byte) ((byte) (0x0)))).CreateVector());
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x5)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x7)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x9)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xB)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xD)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xF)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x11)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x13)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x15)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x17)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x8, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x8, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x19)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x8, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1A)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x9, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1B)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x9, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x9, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1D)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xA, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1E)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xA, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1F)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xA, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x20)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xB, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x21)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xB, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x22)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xB, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x23)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xC, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x24)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xC, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x25)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xC, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x26)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xD, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x27)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xD, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x28)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xD, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x29)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xE, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2A)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xE, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2B)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xE, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2C)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xF, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2D)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xF, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2E)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xF, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2F)))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x5)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x7)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x9)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xB)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xD)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xF)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x11)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x13)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x15)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x17)))))).value()));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1A)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x4, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1E)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x20)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x5, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x22)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x24)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x26)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x6, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x28)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2A)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2C)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x7, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2E)))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value()));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x20)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x24)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x28)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2C)))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value()));
				}
				break;
			}
			default: {
				VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
				VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
				VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value()));
				VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value()));
				VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x20)))))).value()));
				VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x28)))))).value()));
				break;
			}
		}
		if(rn == 31)
			SPR = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]()))));
		else
			XR[(int) rn] = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]()))));
		return true;
	}
unimplemented:
	return false;
}

/* LD4-multi-no-offset */
bool Recompiler::LD4_multi_no_offset(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto rt2 = (ulong) (((ulong) (ulong) ((ulong) (((ulong) (byte) (rt)) + ((ulong) (long) (0x1))))) % ((ulong) (long) (0x20)));
		auto rt3 = (ulong) (((ulong) (ulong) ((ulong) (((ulong) (byte) (rt)) + ((ulong) (long) (0x2))))) % ((ulong) (long) (0x20)));
		auto rt4 = (ulong) (((ulong) (ulong) ((ulong) (((ulong) (byte) (rt)) + ((ulong) (long) (0x3))))) % ((ulong) (long) (0x20)));
		auto T = (string) (([=](auto temp_772) -> string { switch(temp_772) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))));
		auto address = ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		VR[(int) (rt)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<byte>) ((byte) ((byte) (0x0)))).CreateVector());
		VR[(int) (rt2)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<byte>) ((byte) ((byte) (0x0)))).CreateVector());
		VR[(int) (rt3)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<byte>) ((byte) ((byte) (0x0)))).CreateVector());
		VR[(int) (rt4)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<byte>) ((byte) ((byte) (0x0)))).CreateVector());
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x5)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x7)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x9)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xB)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xD)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xF)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x11)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x13)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x15)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x17)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x19)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1A)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1B)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1D)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1E)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1F)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x8, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x20)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x8, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x21)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x8, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x22)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x8, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x23)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x9, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x24)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x9, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x25)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x9, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x26)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x9, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x27)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xA, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x28)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xA, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x29)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xA, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2A)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0xA, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2B)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xB, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2C)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xB, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2D)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xB, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2E)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0xB, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2F)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xC, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x30)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xC, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x31)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xC, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x32)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0xC, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x33)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xD, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x34)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xD, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x35)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xD, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x36)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0xD, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x37)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xE, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x38)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xE, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x39)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xE, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3A)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0xE, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3B)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xF, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3C)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xF, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3D)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xF, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3E)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0xF, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3F)))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x5)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x7)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x9)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xB)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xD)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xF)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x11)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x13)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x15)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x17)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x19)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1A)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1B)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1D)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1E)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1F)))))).value()));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1A)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1E)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x20)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x22)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x4, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x24)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x4, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x26)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x28)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2A)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x5, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2C)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x5, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2E)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x30)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x32)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x6, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x34)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x6, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x36)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x38)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3A)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x7, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3C)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x7, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3E)))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1A)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1E)))))).value()));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x0, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x1, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x20)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x24)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x28)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x2, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2C)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x30)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x34)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x38)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x3, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3C)))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x0, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x1, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value()));
				}
				break;
			}
			default: {
				VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
				VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
				VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value()));
				VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x0, (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value()));
				VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x20)))))).value()));
				VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x28)))))).value()));
				VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x30)))))).value()));
				VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x1, (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x38)))))).value()));
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* LD4-multi-postindex-immediate */
bool Recompiler::LD4_multi_postindex_immediate(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto rt2 = (ulong) (((ulong) (ulong) ((ulong) (((ulong) (byte) (rt)) + ((ulong) (long) (0x1))))) % ((ulong) (long) (0x20)));
		auto rt3 = (ulong) (((ulong) (ulong) ((ulong) (((ulong) (byte) (rt)) + ((ulong) (long) (0x2))))) % ((ulong) (long) (0x20)));
		auto rt4 = (ulong) (((ulong) (ulong) ((ulong) (((ulong) (byte) (rt)) + ((ulong) (long) (0x3))))) % ((ulong) (long) (0x20)));
		auto imm = (byte) ((byte) ((long) ((Q != 0) ? (0x30) : (0x18))));
		if(!((bool) (((rm) == (0x1F)) ? 1U : 0U)))
			goto unimplemented;
		auto T = (string) (([=](auto temp_773) -> string { switch(temp_773) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))));
		auto address = ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		VR[(int) (rt)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<byte>) ((byte) ((byte) (0x0)))).CreateVector());
		VR[(int) (rt2)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<byte>) ((byte) ((byte) (0x0)))).CreateVector());
		VR[(int) (rt3)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<byte>) ((byte) ((byte) (0x0)))).CreateVector());
		VR[(int) (rt4)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<byte>) ((byte) ((byte) (0x0)))).CreateVector());
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x5)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x7)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x9)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xB)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xD)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xF)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x11)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x13)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x15)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x17)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x19)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1A)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1B)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1D)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1E)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1F)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x8, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x20)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x8, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x21)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x8, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x22)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x8, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x23)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x9, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x24)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x9, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x25)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x9, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x26)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x9, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x27)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xA, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x28)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xA, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x29)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xA, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2A)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0xA, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2B)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xB, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2C)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xB, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2D)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xB, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2E)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0xB, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2F)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xC, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x30)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xC, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x31)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xC, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x32)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0xC, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x33)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xD, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x34)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xD, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x35)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xD, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x36)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0xD, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x37)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xE, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x38)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xE, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x39)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xE, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3A)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0xE, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3B)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xF, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3C)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xF, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3D)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xF, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3E)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0xF, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3F)))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x5)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x7)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x9)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xB)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xD)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xF)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x11)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x13)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x15)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x17)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x19)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1A)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1B)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1D)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1E)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1F)))))).value()));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1A)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1E)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x20)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x22)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x4, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x24)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x4, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x26)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x28)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2A)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x5, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2C)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x5, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2E)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x30)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x32)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x6, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x34)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x6, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x36)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x38)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3A)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x7, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3C)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x7, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3E)))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1A)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1E)))))).value()));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x0, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x1, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x20)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x24)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x28)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x2, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2C)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x30)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x34)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x38)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x3, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3C)))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x0, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x1, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value()));
				}
				break;
			}
			default: {
				VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
				VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
				VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value()));
				VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x0, (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value()));
				VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x20)))))).value()));
				VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x28)))))).value()));
				VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x30)))))).value()));
				VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x1, (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x38)))))).value()));
				break;
			}
		}
		if(rn == 31)
			SPR = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<byte>) (imm)));
		else
			XR[(int) rn] = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<byte>) (imm)));
		return true;
	}
unimplemented:
	return false;
}

/* LD4-multi-postindex-register */
bool Recompiler::LD4_multi_postindex_register(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto rt2 = (ulong) (((ulong) (ulong) ((ulong) (((ulong) (byte) (rt)) + ((ulong) (long) (0x1))))) % ((ulong) (long) (0x20)));
		auto rt3 = (ulong) (((ulong) (ulong) ((ulong) (((ulong) (byte) (rt)) + ((ulong) (long) (0x2))))) % ((ulong) (long) (0x20)));
		auto rt4 = (ulong) (((ulong) (ulong) ((ulong) (((ulong) (byte) (rt)) + ((ulong) (long) (0x3))))) % ((ulong) (long) (0x20)));
		if(!((bool) (((rm) != (0x1F)) ? 1U : 0U)))
			goto unimplemented;
		auto T = (string) (([=](auto temp_774) -> string { switch(temp_774) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))));
		auto address = ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		VR[(int) (rt)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<byte>) ((byte) ((byte) (0x0)))).CreateVector());
		VR[(int) (rt2)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<byte>) ((byte) ((byte) (0x0)))).CreateVector());
		VR[(int) (rt3)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<byte>) ((byte) ((byte) (0x0)))).CreateVector());
		VR[(int) (rt4)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<byte>) ((byte) ((byte) (0x0)))).CreateVector());
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x5)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x7)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x9)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xB)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xD)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xF)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x11)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x13)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x15)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x17)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x19)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1A)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1B)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1D)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1E)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1F)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x8, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x20)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x8, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x21)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x8, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x22)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x8, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x23)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x9, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x24)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x9, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x25)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x9, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x26)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x9, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x27)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xA, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x28)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xA, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x29)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xA, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2A)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0xA, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2B)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xB, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2C)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xB, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2D)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xB, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2E)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0xB, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2F)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xC, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x30)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xC, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x31)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xC, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x32)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0xC, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x33)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xD, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x34)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xD, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x35)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xD, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x36)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0xD, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x37)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xE, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x38)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xE, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x39)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xE, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3A)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0xE, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3B)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xF, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3C)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xF, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3D)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xF, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3E)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0xF, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3F)))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x5)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x7)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x9)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xB)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xD)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xF)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x11)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x13)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x15)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x17)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x19)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1A)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1B)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1D)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1E)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1F)))))).value()));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1A)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1E)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x20)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x22)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x4, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x24)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x4, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x26)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x28)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2A)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x5, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2C)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x5, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2E)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x30)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x32)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x6, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x34)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x6, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x36)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x38)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3A)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x7, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3C)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x7, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3E)))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1A)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1E)))))).value()));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x0, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x1, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x20)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x24)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x28)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x2, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2C)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x30)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x34)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x38)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x3, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3C)))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x0, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x1, (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value()));
				}
				break;
			}
			default: {
				VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value()));
				VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value()));
				VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value()));
				VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x0, (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value()));
				VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x20)))))).value()));
				VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x28)))))).value()));
				VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x30)))))).value()));
				VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x1, (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x38)))))).value()));
				break;
			}
		}
		if(rn == 31)
			SPR = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]()))));
		else
			XR[(int) rn] = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]()))));
		return true;
	}
unimplemented:
	return false;
}

/* LDAR */
bool Recompiler::LDAR(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			auto address = ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
			XR[(int) rt] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimePointer<uint>) (address)).value()));
		} else {
			auto address = ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
			XR[(int) rt] = (RuntimeValue<ulong>) (((RuntimePointer<ulong>) (address)).value());
		}
		return true;
	}
unimplemented:
	return false;
}

/* LDARB */
bool Recompiler::LDARB(uint inst, ulong pc) {
	{
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto address = ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		XR[(int) rt] = (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<byte>) (((RuntimePointer<byte>) (address)).value())));
		return true;
	}
unimplemented:
	return false;
}

/* LDARH */
bool Recompiler::LDARH(uint inst, ulong pc) {
	{
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto address = ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		XR[(int) rt] = (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ushort>) (((RuntimePointer<ushort>) (address)).value())));
		return true;
	}
unimplemented:
	return false;
}

/* LDAXB */
bool Recompiler::LDAXB(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto address = ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rt] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (Exclusive32R = ((RuntimePointer<uint>) (address)).value()));
		} else {
			XR[(int) rt] = (RuntimeValue<ulong>) (Exclusive64R = ((RuntimePointer<ulong>) (address)).value());
		}
		return true;
	}
unimplemented:
	return false;
}

/* LDAXRB */
bool Recompiler::LDAXRB(uint inst, ulong pc) {
	{
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto address = ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		XR[(int) rt] = (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<byte>) (Exclusive8R = ((RuntimePointer<byte>) (address)).value())));
		return true;
	}
unimplemented:
	return false;
}

/* LDAXRH */
bool Recompiler::LDAXRH(uint inst, ulong pc) {
	{
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto address = ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		XR[(int) rt] = (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ushort>) (Exclusive16R = ((RuntimePointer<ushort>) (address)).value())));
		return true;
	}
unimplemented:
	return false;
}

/* LDP-immediate-postindex */
bool Recompiler::LDP_immediate_postindex(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto imm = (inst >> 15) & 0x7FU;
		auto rt2 = (inst >> 10) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt1 = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto simm = (long) (((long) (SignExt<long>(imm, 7))) << (uint) ((long) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (0x2) : (0x3))));
		auto address = ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rt1] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimePointer<uint>) (address)).value()));
			XR[(int) rt2] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimePointer<uint>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x4))))).value()));
		} else {
			XR[(int) rt1] = (RuntimeValue<ulong>) (((RuntimePointer<ulong>) (address)).value());
			XR[(int) rt2] = (RuntimeValue<ulong>) (((RuntimePointer<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x8))))).value());
		}
		if(rn == 31)
			SPR = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (simm)));
		else
			XR[(int) rn] = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (simm)));
		return true;
	}
unimplemented:
	return false;
}

/* LDP-immediate-signed-offset */
bool Recompiler::LDP_immediate_signed_offset(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto imm = (inst >> 15) & 0x7FU;
		auto rt2 = (inst >> 10) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt1 = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto simm = (long) (((long) (SignExt<long>(imm, 7))) << (uint) ((long) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (0x2) : (0x3))));
		auto address = ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (simm)))).Store();
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rt1] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimePointer<uint>) (address)).value()));
			XR[(int) rt2] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimePointer<uint>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x4))))).value()));
		} else {
			XR[(int) rt1] = (RuntimeValue<ulong>) (((RuntimePointer<ulong>) (address)).value());
			XR[(int) rt2] = (RuntimeValue<ulong>) (((RuntimePointer<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x8))))).value());
		}
		return true;
	}
unimplemented:
	return false;
}

/* LDP-simd-postindex */
bool Recompiler::LDP_simd_postindex(uint inst, ulong pc) {
	{
		auto opc = (inst >> 30) & 0x3U;
		auto imm = (inst >> 15) & 0x7FU;
		auto rt2 = (inst >> 10) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt1 = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_775) -> string { switch(temp_775) { case 0x0: return string("S"); case 0x1: return string("D"); default: return string("Q"); } })(opc));
		auto simm = (long) (((long) (SignExt<long>(imm, 7))) << (uint) ((long) (([=](auto temp_776) -> long { switch(temp_776) { case 0x0: return 0x2; case 0x1: return 0x3; default: return 0x4; } })(opc))));
		auto address = ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		switch(opc) {
			case 0x0: {
				VSR[(int) (rt1)] = (RuntimeValue<float>) (((RuntimePointer<float>) (address)).value());
				VSR[(int) (rt2)] = (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x4))))).value());
				break;
			}
			case 0x1: {
				VDR[(int) (rt1)] = (RuntimeValue<double>) (((RuntimePointer<double>) (address)).value());
				VDR[(int) (rt2)] = (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x8))))).value());
				break;
			}
			default: {
				VR[(int) (rt1)] = (RuntimeValue<Vector128<float>>) (((RuntimePointer<Vector128<float>>) (address)).value());
				VR[(int) (rt2)] = (RuntimeValue<Vector128<float>>) (((RuntimePointer<Vector128<float>>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x10))))).value());
				break;
			}
		}
		if(rn == 31)
			SPR = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (simm)));
		else
			XR[(int) rn] = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (simm)));
		return true;
	}
unimplemented:
	return false;
}

/* LDP-simd-preindex */
bool Recompiler::LDP_simd_preindex(uint inst, ulong pc) {
	{
		auto opc = (inst >> 30) & 0x3U;
		auto imm = (inst >> 15) & 0x7FU;
		auto rt2 = (inst >> 10) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt1 = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_777) -> string { switch(temp_777) { case 0x0: return string("S"); case 0x1: return string("D"); default: return string("Q"); } })(opc));
		auto simm = (long) (((long) (SignExt<long>(imm, 7))) << (uint) ((long) (([=](auto temp_778) -> long { switch(temp_778) { case 0x0: return 0x2; case 0x1: return 0x3; default: return 0x4; } })(opc))));
		auto address = ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (simm)))).Store();
		if(rn == 31)
			SPR = address;
		else
			XR[(int) rn] = address;
		switch(opc) {
			case 0x0: {
				VSR[(int) (rt1)] = (RuntimeValue<float>) (((RuntimePointer<float>) (address)).value());
				VSR[(int) (rt2)] = (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x4))))).value());
				break;
			}
			case 0x1: {
				VDR[(int) (rt1)] = (RuntimeValue<double>) (((RuntimePointer<double>) (address)).value());
				VDR[(int) (rt2)] = (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x8))))).value());
				break;
			}
			default: {
				VR[(int) (rt1)] = (RuntimeValue<Vector128<float>>) (((RuntimePointer<Vector128<float>>) (address)).value());
				VR[(int) (rt2)] = (RuntimeValue<Vector128<float>>) (((RuntimePointer<Vector128<float>>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x10))))).value());
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* LDP-simd-signed-offset */
bool Recompiler::LDP_simd_signed_offset(uint inst, ulong pc) {
	{
		auto opc = (inst >> 30) & 0x3U;
		auto imm = (inst >> 15) & 0x7FU;
		auto rt2 = (inst >> 10) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt1 = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_779) -> string { switch(temp_779) { case 0x0: return string("S"); case 0x1: return string("D"); default: return string("Q"); } })(opc));
		auto simm = (long) (((long) (SignExt<long>(imm, 7))) << (uint) ((long) (([=](auto temp_780) -> long { switch(temp_780) { case 0x0: return 0x2; case 0x1: return 0x3; default: return 0x4; } })(opc))));
		auto address = ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (simm)))).Store();
		switch(opc) {
			case 0x0: {
				VSR[(int) (rt1)] = (RuntimeValue<float>) (((RuntimePointer<float>) (address)).value());
				VSR[(int) (rt2)] = (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x4))))).value());
				break;
			}
			case 0x1: {
				VDR[(int) (rt1)] = (RuntimeValue<double>) (((RuntimePointer<double>) (address)).value());
				VDR[(int) (rt2)] = (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x8))))).value());
				break;
			}
			default: {
				VR[(int) (rt1)] = (RuntimeValue<Vector128<float>>) (((RuntimePointer<Vector128<float>>) (address)).value());
				VR[(int) (rt2)] = (RuntimeValue<Vector128<float>>) (((RuntimePointer<Vector128<float>>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x10))))).value());
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* LDPSW-immediate-signed-offset */
bool Recompiler::LDPSW_immediate_signed_offset(uint inst, ulong pc) {
	{
		auto imm = (inst >> 15) & 0x7FU;
		auto rt2 = (inst >> 10) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt1 = (inst >> 0) & 0x1FU;
		auto simm = (long) (((long) (SignExt<long>(imm, 7))) << (uint) (0x2));
		auto address = ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (simm)))).Store();
		XR[(int) rt1] = (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (SignExtRuntime<long>((RuntimeValue<uint>) (((RuntimePointer<uint>) (address)).value()), 32))));
		XR[(int) rt2] = (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (SignExtRuntime<long>((RuntimeValue<uint>) (((RuntimePointer<uint>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x4))))).value()), 32))));
		return true;
	}
unimplemented:
	return false;
}

/* LDR-immediate-preindex */
bool Recompiler::LDR_immediate_preindex(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x1U;
		auto rawimm = (inst >> 12) & 0x1FFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto imm = (long) (SignExt<long>(rawimm, 9));
		auto address = ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (imm)))).Store();
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimePointer<uint>) (address)).value()));
		} else {
			XR[(int) rd] = (RuntimeValue<ulong>) (((RuntimePointer<ulong>) (address)).value());
		}
		if(rn == 31)
			SPR = address;
		else
			XR[(int) rn] = address;
		return true;
	}
unimplemented:
	return false;
}

/* LDR-immediate-postindex */
bool Recompiler::LDR_immediate_postindex(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x1U;
		auto rawimm = (inst >> 12) & 0x1FFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto imm = (long) (SignExt<long>(rawimm, 9));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimePointer<uint>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))).value()));
		} else {
			XR[(int) rd] = (RuntimeValue<ulong>) (((RuntimePointer<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))).value());
		}
		if(rn == 31)
			SPR = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (imm)));
		else
			XR[(int) rn] = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (imm)));
		return true;
	}
unimplemented:
	return false;
}

/* LDR-immediate-unsigned-offset */
bool Recompiler::LDR_immediate_unsigned_offset(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x1U;
		auto rawimm = (inst >> 10) & 0xFFFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto imm = (ushort) ((rawimm) << (uint) ((long) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (0x2) : (0x3))));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimePointer<uint>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<ushort>) (imm))))).value()));
		} else {
			XR[(int) rd] = (RuntimeValue<ulong>) (((RuntimePointer<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<ushort>) (imm))))).value());
		}
		return true;
	}
unimplemented:
	return false;
}

/* LDR-literal */
bool Recompiler::LDR_literal(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x1U;
		auto rawimm = (inst >> 5) & 0x7FFFFU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto offset = (long) (SignExt<long>((uint) ((uint) ((uint) ((rawimm) << (uint) (0x2)))), 21));
		auto addr = (ulong) (((ulong) (ulong) ((ulong) (pc))) + ((ulong) (long) (offset)));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rt] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimePointer<uint>) (addr)).value()));
		} else {
			XR[(int) rt] = (RuntimeValue<ulong>) (((RuntimePointer<ulong>) (addr)).value());
		}
		return true;
	}
unimplemented:
	return false;
}

/* LDR-simd-immediate-postindex */
bool Recompiler::LDR_simd_immediate_postindex(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x3U;
		auto opc = (inst >> 23) & 0x1U;
		auto imm = (inst >> 12) & 0x1FFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto simm = (long) (SignExt<long>(imm, 9));
		auto r = (string) (([=](auto temp_781) -> string { switch(temp_781) { case 0x0: return string("B"); case 0x2: return string("H"); case 0x4: return string("S"); case 0x6: return string("D"); case 0x1: return string("Q"); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (((byte) (opc)) << 0)) | ((byte) (((byte) (size)) << 1))))));
		auto address = ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		switch((byte) ((byte) (((byte) (((byte) (opc)) << 0)) | ((byte) (((byte) (size)) << 1))))) {
			case 0x0: {
				VBR[(int) (rt)] = (RuntimeValue<byte>) (((RuntimePointer<byte>) (address)).value());
				break;
			}
			case 0x2: {
				VHR[(int) (rt)] = (RuntimeValue<ushort>) (((RuntimePointer<ushort>) (address)).value());
				break;
			}
			case 0x4: {
				VSR[(int) (rt)] = (RuntimeValue<float>) (((RuntimePointer<float>) (address)).value());
				break;
			}
			case 0x6: {
				VDR[(int) (rt)] = (RuntimeValue<double>) (((RuntimePointer<double>) (address)).value());
				break;
			}
			case 0x1: {
				VR[(int) (rt)] = (RuntimeValue<Vector128<float>>) (((RuntimePointer<Vector128<float>>) (address)).value());
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		if(rn == 31)
			SPR = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (simm)));
		else
			XR[(int) rn] = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (simm)));
		return true;
	}
unimplemented:
	return false;
}

/* LDR-simd-immediate-preindex */
bool Recompiler::LDR_simd_immediate_preindex(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x3U;
		auto opc = (inst >> 23) & 0x1U;
		auto imm = (inst >> 12) & 0x1FFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto simm = (long) (SignExt<long>(imm, 9));
		auto r = (string) (([=](auto temp_782) -> string { switch(temp_782) { case 0x0: return string("B"); case 0x2: return string("H"); case 0x4: return string("S"); case 0x6: return string("D"); case 0x1: return string("Q"); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (((byte) (opc)) << 0)) | ((byte) (((byte) (size)) << 1))))));
		auto address = ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (simm)))).Store();
		switch((byte) ((byte) (((byte) (((byte) (opc)) << 0)) | ((byte) (((byte) (size)) << 1))))) {
			case 0x0: {
				VBR[(int) (rt)] = (RuntimeValue<byte>) (((RuntimePointer<byte>) (address)).value());
				break;
			}
			case 0x2: {
				VHR[(int) (rt)] = (RuntimeValue<ushort>) (((RuntimePointer<ushort>) (address)).value());
				break;
			}
			case 0x4: {
				VSR[(int) (rt)] = (RuntimeValue<float>) (((RuntimePointer<float>) (address)).value());
				break;
			}
			case 0x6: {
				VDR[(int) (rt)] = (RuntimeValue<double>) (((RuntimePointer<double>) (address)).value());
				break;
			}
			case 0x1: {
				VR[(int) (rt)] = (RuntimeValue<Vector128<float>>) (((RuntimePointer<Vector128<float>>) (address)).value());
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		if(rn == 31)
			SPR = address;
		else
			XR[(int) rn] = address;
		return true;
	}
unimplemented:
	return false;
}

/* LDR-simd-immediate-unsigned-offset */
bool Recompiler::LDR_simd_immediate_unsigned_offset(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x3U;
		auto ropc = (inst >> 23) & 0x1U;
		auto rawimm = (inst >> 10) & 0xFFFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto opc = (byte) ((byte) (((byte) (((byte) ((bool) ((bool) (0x1)))) << 0)) | ((byte) (((byte) (ropc)) << 1))));
		auto m = (byte) ((byte) (((byte) (((byte) (opc)) << 0)) | ((byte) (((byte) (size)) << 2))));
		auto r = (string) (([=](auto temp_783) -> string { switch(temp_783) { case 0x1: return string("B"); case 0x5: return string("H"); case 0x9: return string("S"); case 0xD: return string("D"); default: return string("Q"); } })(m));
		auto imm = (uint) (((uint) ((uint) (rawimm))) << (uint) ((long) (([=](auto temp_784) -> long { switch(temp_784) { case 0x1: return 0x0; case 0x5: return 0x1; case 0x9: return 0x2; case 0xD: return 0x3; default: return 0x4; } })(m))));
		switch(m) {
			case 0x1: {
				VBR[(int) (rt)] = (RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<uint>) (imm))))).value());
				break;
			}
			case 0x5: {
				VHR[(int) (rt)] = (RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<uint>) (imm))))).value());
				break;
			}
			case 0x9: {
				VSR[(int) (rt)] = (RuntimeValue<float>) (((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<uint>) (imm))))).value());
				break;
			}
			case 0xD: {
				VDR[(int) (rt)] = (RuntimeValue<double>) (((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<uint>) (imm))))).value());
				break;
			}
			default: {
				VR[(int) (rt)] = (RuntimeValue<Vector128<float>>) (((RuntimePointer<Vector128<float>>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<uint>) (imm))))).value());
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* LDR-simd-literal */
bool Recompiler::LDR_simd_literal(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x3U;
		auto imm = (inst >> 5) & 0x7FFFFU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_785) -> string { switch(temp_785) { case 0x0: return string("S"); case 0x1: return string("D"); case 0x2: return string("Q"); default: throw "Not implemented"; } })(size));
		auto addr = (ulong) (((ulong) (ulong) ((ulong) (pc))) + ((ulong) (long) ((long) (SignExt<long>((uint) ((uint) (((uint) (((uint) ((byte) ((byte) (0x0)))) << 0)) | ((uint) (((uint) (imm)) << 2)))), 21)))));
		switch(size) {
			case 0x0: {
				VSR[(int) (rt)] = (RuntimeValue<float>) (((RuntimePointer<float>) (addr)).value());
				break;
			}
			case 0x1: {
				VDR[(int) (rt)] = (RuntimeValue<double>) (((RuntimePointer<double>) (addr)).value());
				break;
			}
			case 0x2: {
				VR[(int) (rt)] = (RuntimeValue<Vector128<float>>) (((RuntimePointer<Vector128<float>>) (addr)).value());
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* LDR-simd-register */
bool Recompiler::LDR_simd_register(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x3U;
		auto opc = (inst >> 23) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto option = (inst >> 13) & 0x7U;
		auto scale = (inst >> 12) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r1 = (string) (((bool) ((((bool) ((bool) (((size) == (0x0)) ? 1U : 0U))) & ((bool) ((bool) (((opc) == (0x1)) ? 1U : 0U))))) != 0) ? (string("Q")) : ((string) (([=](auto temp_786) -> string { switch(temp_786) { case 0x0: return string("B"); case 0x1: return string("H"); case 0x2: return string("S"); case 0x3: return string("D"); default: throw "Not implemented"; } })(size))));
		auto r2 = (string) (((byte) ((((ulong) (option)) & ((ulong) (0x1)))) != 0) ? (string("X")) : (string("W")));
		auto extend = (string) (([=](auto temp_787) -> string { switch(temp_787) { case 0x2: return string("UXTW"); case 0x3: return string("LSL"); case 0x6: return string("SXTW"); case 0x7: return string("SXTX"); default: throw "Not implemented"; } })(option));
		auto amount = (ulong) (((ulong) (bool) (scale)) * ((ulong) (long) ((long) (((bool) ((((bool) ((bool) (((size) == (0x0)) ? 1U : 0U))) & ((bool) ((bool) (((opc) == (0x1)) ? 1U : 0U))))) != 0) ? (0x4) : ((long) (([=](auto temp_788) -> long { switch(temp_788) { case 0x0: return 0x1; case 0x1: return 0x1; case 0x2: return 0x2; case 0x3: return 0x3; default: throw "Not implemented"; } })(size)))))));
		auto offset = ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (([=](auto temp_789) -> RuntimeValue<ulong> { switch(temp_789) { case 0x2: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))))); case 0x3: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())); case 0x6: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (SignExtRuntime<long>((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]())), 32))))); case 0x7: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())); default: throw "Not implemented"; } })(option))) << (amount))).Store();
		auto address = ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) (offset)))).Store();
		switch((byte) ((byte) (((byte) (((byte) (opc)) << 0)) | ((byte) (((byte) (size)) << 1))))) {
			case 0x0: {
				VBR[(int) (rt)] = (RuntimeValue<byte>) (((RuntimePointer<byte>) (address)).value());
				break;
			}
			case 0x4: {
				VSR[(int) (rt)] = (RuntimeValue<float>) (((RuntimePointer<float>) (address)).value());
				break;
			}
			case 0x6: {
				VDR[(int) (rt)] = (RuntimeValue<double>) (((RuntimePointer<double>) (address)).value());
				break;
			}
			case 0x1: {
				VR[(int) (rt)] = (RuntimeValue<Vector128<float>>) (((RuntimePointer<Vector128<float>>) (address)).value());
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* LDR-register */
bool Recompiler::LDR_register(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto option = (inst >> 13) & 0x7U;
		auto scale = (inst >> 12) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r1 = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto r2 = (string) (((byte) ((((ulong) (option)) & ((ulong) (0x1)))) != 0) ? (string("X")) : (string("W")));
		auto amount = (long) (((bool) (((scale) == (0x0)) ? 1U : 0U) != 0) ? (0x0) : ((long) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (0x2) : (0x3))));
		auto extend = (string) (([=](auto temp_790) -> string { switch(temp_790) { case 0x2: return string("UXTW"); case 0x6: return string("SXTW"); case 0x7: return string("SXTX"); default: return string("LSL"); } })(option));
		auto offset = ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (((bool) (((option) == (0x6)) ? 1U : 0U)) != 0 ? ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (SignExtRuntime<long>((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]())), 32))))) : ((RuntimeValue<ulong>) (((byte) ((((ulong) (option)) & ((ulong) (0x1))))) != 0 ? ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())) : ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))))))))) << (amount))).Store();
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rt] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimePointer<uint>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) (offset))))).value()));
		} else {
			XR[(int) rt] = (RuntimeValue<ulong>) (((RuntimePointer<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) (offset))))).value());
		}
		return true;
	}
unimplemented:
	return false;
}

/* LDRB-immediate-postindex */
bool Recompiler::LDRB_immediate_postindex(uint inst, ulong pc) {
	{
		auto rawimm = (inst >> 12) & 0x1FFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto imm = (long) (SignExt<long>(rawimm, 9));
		XR[(int) rt] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))).value()))));
		if(rn == 31)
			SPR = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (imm)));
		else
			XR[(int) rn] = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (imm)));
		return true;
	}
unimplemented:
	return false;
}

/* LDRB-immediate-preindex */
bool Recompiler::LDRB_immediate_preindex(uint inst, ulong pc) {
	{
		auto rawimm = (inst >> 12) & 0x1FFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto imm = (long) (SignExt<long>(rawimm, 9));
		auto address = ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (imm)))).Store();
		XR[(int) rt] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<byte>) (((RuntimePointer<byte>) (address)).value()))));
		if(rn == 31)
			SPR = address;
		else
			XR[(int) rn] = address;
		return true;
	}
unimplemented:
	return false;
}

/* LDRB-immediate-unsigned-offset */
bool Recompiler::LDRB_immediate_unsigned_offset(uint inst, ulong pc) {
	{
		auto imm = (inst >> 10) & 0xFFFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		XR[(int) rt] = (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<ushort>) (imm))))).value())));
		return true;
	}
unimplemented:
	return false;
}

/* LDRB-register */
bool Recompiler::LDRB_register(uint inst, ulong pc) {
	{
		auto rm = (inst >> 16) & 0x1FU;
		auto option = (inst >> 13) & 0x7U;
		auto amount = (inst >> 12) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r = (string) (((byte) ((((ulong) (option)) & ((ulong) (0x1)))) != 0) ? (string("X")) : (string("W")));
		auto str = (string) (([=](auto temp_791) -> string { switch(temp_791) { case 0x2: return string("UXTW"); case 0x3: return string("LSL"); case 0x6: return string("SXTW"); case 0x7: return string("SXTX"); default: throw "Not implemented"; } })(option));
		auto offset = ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (((bool) (((option) == (0x6)) ? 1U : 0U)) != 0 ? ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (SignExtRuntime<long>((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]())), 32))))) : ((RuntimeValue<ulong>) (((byte) ((((ulong) (option)) & ((ulong) (0x1))))) != 0 ? ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())) : ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))))))))) << (amount))).Store();
		XR[(int) rt] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) (offset))))).value()));
		return true;
	}
unimplemented:
	return false;
}

/* LDRH-immediate-postindex */
bool Recompiler::LDRH_immediate_postindex(uint inst, ulong pc) {
	{
		auto rawimm = (inst >> 12) & 0x1FFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto imm = (long) (SignExt<long>(rawimm, 9));
		auto address = ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		XR[(int) rt] = (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ushort>) (((RuntimePointer<ushort>) (address)).value())));
		if(rn == 31)
			SPR = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (imm)));
		else
			XR[(int) rn] = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (imm)));
		return true;
	}
unimplemented:
	return false;
}

/* LDRH-immediate-preindex */
bool Recompiler::LDRH_immediate_preindex(uint inst, ulong pc) {
	{
		auto rawimm = (inst >> 12) & 0x1FFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto imm = (long) (SignExt<long>(rawimm, 9));
		auto address = ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (imm)))).Store();
		XR[(int) rt] = (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ushort>) (((RuntimePointer<ushort>) (address)).value())));
		if(rn == 31)
			SPR = address;
		else
			XR[(int) rn] = address;
		return true;
	}
unimplemented:
	return false;
}

/* LDRH-immediate-unsigned-offset */
bool Recompiler::LDRH_immediate_unsigned_offset(uint inst, ulong pc) {
	{
		auto rawimm = (inst >> 10) & 0xFFFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto imm = (ushort) ((rawimm) << (uint) (0x1));
		XR[(int) rt] = (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<ushort>) (imm))))).value())));
		return true;
	}
unimplemented:
	return false;
}

/* LDRH-register */
bool Recompiler::LDRH_register(uint inst, ulong pc) {
	{
		auto rm = (inst >> 16) & 0x1FU;
		auto option = (inst >> 13) & 0x7U;
		auto amount = (inst >> 12) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r = (string) (((byte) ((((ulong) (option)) & ((ulong) (0x1)))) != 0) ? (string("X")) : (string("W")));
		auto str = (string) (([=](auto temp_792) -> string { switch(temp_792) { case 0x2: return string("UXTW"); case 0x3: return string("LSL"); case 0x6: return string("SXTW"); case 0x7: return string("SXTX"); default: throw "Not implemented"; } })(option));
		auto offset = ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (((bool) (((option) == (0x6)) ? 1U : 0U)) != 0 ? ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (SignExtRuntime<long>((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]())), 32))))) : ((RuntimeValue<ulong>) (((byte) ((((ulong) (option)) & ((ulong) (0x1))))) != 0 ? ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())) : ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))))))))) << (amount))).Store();
		XR[(int) rt] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) (offset))))).value()));
		return true;
	}
unimplemented:
	return false;
}

/* LDRSB-immediate-postindex */
bool Recompiler::LDRSB_immediate_postindex(uint inst, ulong pc) {
	{
		auto opc = (inst >> 22) & 0x1U;
		auto rawimm = (inst >> 12) & 0x1FFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto imm = (long) (SignExt<long>(rawimm, 9));
		auto r = (string) (((bool) (((opc) == (0x1)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto address = ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		if(((bool) (((opc) == (0x1)) ? 1U : 0U)) != 0) {
			XR[(int) rt] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<int>) (SignExtRuntime<int>((RuntimeValue<byte>) (((RuntimePointer<byte>) (address)).value()), 8)))));
		} else {
			XR[(int) rt] = (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (SignExtRuntime<long>((RuntimeValue<byte>) (((RuntimePointer<byte>) (address)).value()), 8))));
		}
		if(rn == 31)
			SPR = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (imm)));
		else
			XR[(int) rn] = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (imm)));
		return true;
	}
unimplemented:
	return false;
}

/* LDRSB-immediate-preindex */
bool Recompiler::LDRSB_immediate_preindex(uint inst, ulong pc) {
	{
		auto opc = (inst >> 22) & 0x1U;
		auto rawimm = (inst >> 12) & 0x1FFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto imm = (long) (SignExt<long>(rawimm, 9));
		auto r = (string) (((bool) (((opc) == (0x1)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto address = ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (imm)))).Store();
		if(((bool) (((opc) == (0x1)) ? 1U : 0U)) != 0) {
			XR[(int) rt] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<int>) (SignExtRuntime<int>((RuntimeValue<byte>) (((RuntimePointer<byte>) (address)).value()), 8)))));
		} else {
			XR[(int) rt] = (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (SignExtRuntime<long>((RuntimeValue<byte>) (((RuntimePointer<byte>) (address)).value()), 8))));
		}
		if(rn == 31)
			SPR = address;
		else
			XR[(int) rn] = address;
		return true;
	}
unimplemented:
	return false;
}

/* LDRSB-immediate-unsigned-offset */
bool Recompiler::LDRSB_immediate_unsigned_offset(uint inst, ulong pc) {
	{
		auto opc = (inst >> 22) & 0x1U;
		auto imm = (inst >> 10) & 0xFFFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((opc) == (0x1)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		if(((bool) (((opc) == (0x1)) ? 1U : 0U)) != 0) {
			XR[(int) rt] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<int>) (SignExtRuntime<int>((RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<ushort>) (imm))))).value()), 8)))));
		} else {
			XR[(int) rt] = (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (SignExtRuntime<long>((RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<ushort>) (imm))))).value()), 8))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* LDRSB-register */
bool Recompiler::LDRSB_register(uint inst, ulong pc) {
	{
		auto opc = (inst >> 22) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto option = (inst >> 13) & 0x7U;
		auto amount = (inst >> 12) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((opc) == (0x0)) ? 1U : 0U) != 0) ? (string("X")) : (string("W")));
		auto str = (string) (([=](auto temp_793) -> string { switch(temp_793) { case 0x2: return string("UXTW"); case 0x3: return string("LSL"); case 0x6: return string("SXTW"); case 0x7: return string("SXTX"); default: throw "Not implemented"; } })(option));
		auto offset = ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (((bool) (((option) == (0x6)) ? 1U : 0U)) != 0 ? ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (SignExtRuntime<long>((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]())), 32))))) : ((RuntimeValue<ulong>) (((byte) ((((ulong) (option)) & ((ulong) (0x1))))) != 0 ? ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())) : ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))))))))) << (amount))).Store();
		if(((bool) (((opc) == (0x1)) ? 1U : 0U)) != 0) {
			XR[(int) rt] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<int>) (SignExtRuntime<int>((RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) (offset))))).value()), 8)))));
		} else {
			XR[(int) rt] = (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (SignExtRuntime<long>((RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) (offset))))).value()), 8))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* LDRSH-immediate-postindex */
bool Recompiler::LDRSH_immediate_postindex(uint inst, ulong pc) {
	{
		auto opc = (inst >> 22) & 0x1U;
		auto rawimm = (inst >> 12) & 0x1FFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto imm = (long) (SignExt<long>(rawimm, 9));
		auto r = (string) (((bool) (((opc) == (0x1)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto address = ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		if(((bool) (((opc) == (0x1)) ? 1U : 0U)) != 0) {
			XR[(int) rt] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<int>) (SignExtRuntime<int>((RuntimeValue<ushort>) (((RuntimePointer<ushort>) (address)).value()), 16)))));
		} else {
			XR[(int) rt] = (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (SignExtRuntime<long>((RuntimeValue<ushort>) (((RuntimePointer<ushort>) (address)).value()), 16))));
		}
		if(rn == 31)
			SPR = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (imm)));
		else
			XR[(int) rn] = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (imm)));
		return true;
	}
unimplemented:
	return false;
}

/* LDRSH-immediate-preindex */
bool Recompiler::LDRSH_immediate_preindex(uint inst, ulong pc) {
	{
		auto opc = (inst >> 22) & 0x1U;
		auto rawimm = (inst >> 12) & 0x1FFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto imm = (long) (SignExt<long>(rawimm, 9));
		auto r = (string) (((bool) (((opc) == (0x1)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto address = ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (imm)))).Store();
		if(((bool) (((opc) == (0x1)) ? 1U : 0U)) != 0) {
			XR[(int) rt] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<int>) (SignExtRuntime<int>((RuntimeValue<ushort>) (((RuntimePointer<ushort>) (address)).value()), 16)))));
		} else {
			XR[(int) rt] = (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (SignExtRuntime<long>((RuntimeValue<ushort>) (((RuntimePointer<ushort>) (address)).value()), 16))));
		}
		if(rn == 31)
			SPR = address;
		else
			XR[(int) rn] = address;
		return true;
	}
unimplemented:
	return false;
}

/* LDRSH-immediate-unsigned-offset */
bool Recompiler::LDRSH_immediate_unsigned_offset(uint inst, ulong pc) {
	{
		auto opc = (inst >> 22) & 0x1U;
		auto rawimm = (inst >> 10) & 0xFFFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((opc) == (0x1)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto imm = (ushort) ((rawimm) << (uint) (0x1));
		if(((bool) (((opc) == (0x1)) ? 1U : 0U)) != 0) {
			XR[(int) rt] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<int>) (SignExtRuntime<int>((RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<ushort>) (imm))))).value()), 16)))));
		} else {
			XR[(int) rt] = (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (SignExtRuntime<long>((RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<ushort>) (imm))))).value()), 16))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* LDRSH-register */
bool Recompiler::LDRSH_register(uint inst, ulong pc) {
	{
		auto opc = (inst >> 22) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto option = (inst >> 13) & 0x7U;
		auto amount = (inst >> 12) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((opc) == (0x0)) ? 1U : 0U) != 0) ? (string("X")) : (string("W")));
		auto str = (string) (([=](auto temp_794) -> string { switch(temp_794) { case 0x2: return string("UXTW"); case 0x3: return string("LSL"); case 0x6: return string("SXTW"); case 0x7: return string("SXTX"); default: throw "Not implemented"; } })(option));
		auto offset = ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (((bool) (((option) == (0x6)) ? 1U : 0U)) != 0 ? ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (SignExtRuntime<long>((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]())), 32))))) : ((RuntimeValue<ulong>) (((byte) ((((ulong) (option)) & ((ulong) (0x1))))) != 0 ? ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())) : ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))))))))) << (amount))).Store();
		if(((bool) (((opc) == (0x1)) ? 1U : 0U)) != 0) {
			XR[(int) rt] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<int>) (SignExtRuntime<int>((RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) (offset))))).value()), 16)))));
		} else {
			XR[(int) rt] = (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (SignExtRuntime<long>((RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) (offset))))).value()), 16))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* LDRSW-immediate-postindex */
bool Recompiler::LDRSW_immediate_postindex(uint inst, ulong pc) {
	{
		auto rawimm = (inst >> 12) & 0x1FFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto imm = (long) (SignExt<long>(rawimm, 9));
		auto address = ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		XR[(int) rt] = (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (SignExtRuntime<long>((RuntimeValue<uint>) (((RuntimePointer<uint>) (address)).value()), 32))));
		if(rn == 31)
			SPR = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (imm)));
		else
			XR[(int) rn] = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (imm)));
		return true;
	}
unimplemented:
	return false;
}

/* LDRSW-immediate-preindex */
bool Recompiler::LDRSW_immediate_preindex(uint inst, ulong pc) {
	{
		auto rawimm = (inst >> 12) & 0x1FFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto imm = (long) (SignExt<long>(rawimm, 9));
		auto address = ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (imm)))).Store();
		XR[(int) rt] = (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (SignExtRuntime<long>((RuntimeValue<uint>) (((RuntimePointer<uint>) (address)).value()), 32))));
		if(rn == 31)
			SPR = address;
		else
			XR[(int) rn] = address;
		return true;
	}
unimplemented:
	return false;
}

/* LDRSW-immediate-unsigned-offset */
bool Recompiler::LDRSW_immediate_unsigned_offset(uint inst, ulong pc) {
	{
		auto rawimm = (inst >> 10) & 0xFFFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto imm = (ushort) ((rawimm) << (uint) (0x2));
		XR[(int) rt] = (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (SignExtRuntime<long>((RuntimeValue<uint>) (((RuntimePointer<uint>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<ushort>) (imm))))).value()), 32))));
		return true;
	}
unimplemented:
	return false;
}

/* LDRSW-literal */
bool Recompiler::LDRSW_literal(uint inst, ulong pc) {
	{
		auto imm = (inst >> 5) & 0x7FFFFU;
		auto rt = (inst >> 0) & 0x1FU;
		auto addr = (ulong) (((ulong) (ulong) ((ulong) (pc))) + ((ulong) (long) ((long) (SignExt<long>((uint) ((uint) (((uint) (((uint) ((byte) ((byte) (0x0)))) << 0)) | ((uint) (((uint) (imm)) << 2)))), 21)))));
		XR[(int) rt] = (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (SignExtRuntime<long>((RuntimeValue<uint>) (((RuntimePointer<uint>) (addr)).value()), 32))));
		return true;
	}
unimplemented:
	return false;
}

/* LDRSW-register */
bool Recompiler::LDRSW_register(uint inst, ulong pc) {
	{
		auto rm = (inst >> 16) & 0x1FU;
		auto option = (inst >> 13) & 0x7U;
		auto scale = (inst >> 12) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r = (string) (((byte) ((((ulong) (option)) & ((ulong) (0x1)))) != 0) ? (string("X")) : (string("W")));
		auto amount = (long) (((bool) (((scale) == (0x0)) ? 1U : 0U) != 0) ? (0x0) : (0x2));
		auto extend = (string) (([=](auto temp_795) -> string { switch(temp_795) { case 0x2: return string("UXTW"); case 0x6: return string("SXTW"); case 0x7: return string("SXTX"); default: return string("LSL"); } })(option));
		auto offset = ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (((bool) (((option) == (0x6)) ? 1U : 0U)) != 0 ? ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (SignExtRuntime<long>((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]())), 32))))) : ((RuntimeValue<ulong>) (((byte) ((((ulong) (option)) & ((ulong) (0x1))))) != 0 ? ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())) : ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))))))))) << (amount))).Store();
		XR[(int) rt] = (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (SignExtRuntime<long>((RuntimeValue<uint>) (((RuntimePointer<uint>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) (offset))))).value()), 32))));
		return true;
	}
unimplemented:
	return false;
}

/* LDUR */
bool Recompiler::LDUR(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x1U;
		auto rawimm = (inst >> 12) & 0x1FFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto imm = (long) (SignExt<long>(rawimm, 9));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimePointer<uint>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (imm))))).value()));
		} else {
			XR[(int) rd] = (RuntimeValue<ulong>) (((RuntimePointer<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (imm))))).value());
		}
		return true;
	}
unimplemented:
	return false;
}

/* LDURB */
bool Recompiler::LDURB(uint inst, ulong pc) {
	{
		auto rawimm = (inst >> 12) & 0x1FFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto imm = (long) (SignExt<long>(rawimm, 9));
		XR[(int) rd] = (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (imm))))).value())));
		return true;
	}
unimplemented:
	return false;
}

/* LDURH */
bool Recompiler::LDURH(uint inst, ulong pc) {
	{
		auto rawimm = (inst >> 12) & 0x1FFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto imm = (long) (SignExt<long>(rawimm, 9));
		XR[(int) rd] = (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (imm))))).value())));
		return true;
	}
unimplemented:
	return false;
}

/* LDURSB */
bool Recompiler::LDURSB(uint inst, ulong pc) {
	{
		auto opc = (inst >> 22) & 0x1U;
		auto rawimm = (inst >> 12) & 0x1FFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((opc) == (0x1)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto imm = (long) (SignExt<long>(rawimm, 9));
		if(((bool) (((opc) == (0x1)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<int>) (SignExtRuntime<int>((RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (imm))))).value()), 8)))));
		} else {
			XR[(int) rd] = (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (SignExtRuntime<long>((RuntimeValue<byte>) (((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (imm))))).value()), 8))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* LDURSH */
bool Recompiler::LDURSH(uint inst, ulong pc) {
	{
		auto opc = (inst >> 22) & 0x1U;
		auto rawimm = (inst >> 12) & 0x1FFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((opc) == (0x1)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto imm = (long) (SignExt<long>(rawimm, 9));
		if(((bool) (((opc) == (0x1)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<int>) (SignExtRuntime<int>((RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (imm))))).value()), 16)))));
		} else {
			XR[(int) rd] = (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (SignExtRuntime<long>((RuntimeValue<ushort>) (((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (imm))))).value()), 16))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* LDURSW */
bool Recompiler::LDURSW(uint inst, ulong pc) {
	{
		auto rawimm = (inst >> 12) & 0x1FFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto imm = (long) (SignExt<long>(rawimm, 9));
		XR[(int) rt] = (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (SignExtRuntime<long>((RuntimeValue<uint>) (((RuntimePointer<uint>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (imm))))).value()), 32))));
		return true;
	}
unimplemented:
	return false;
}

/* LDUR-simd */
bool Recompiler::LDUR_simd(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x3U;
		auto opc = (inst >> 23) & 0x1U;
		auto rawimm = (inst >> 12) & 0x1FFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_796) -> string { switch(temp_796) { case 0x0: return string("B"); case 0x2: return string("H"); case 0x4: return string("S"); case 0x6: return string("D"); case 0x1: return string("Q"); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (((byte) (opc)) << 0)) | ((byte) (((byte) (size)) << 1))))));
		auto imm = (long) (SignExt<long>(rawimm, 9));
		auto address = ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (imm)))).Store();
		switch((byte) ((byte) (((byte) (((byte) (opc)) << 0)) | ((byte) (((byte) (size)) << 1))))) {
			case 0x0: {
				VBR[(int) (rt)] = (RuntimeValue<byte>) (((RuntimePointer<byte>) (address)).value());
				break;
			}
			case 0x4: {
				VSR[(int) (rt)] = (RuntimeValue<float>) (((RuntimePointer<float>) (address)).value());
				break;
			}
			case 0x6: {
				VDR[(int) (rt)] = (RuntimeValue<double>) (((RuntimePointer<double>) (address)).value());
				break;
			}
			case 0x1: {
				VR[(int) (rt)] = (RuntimeValue<Vector128<float>>) (((RuntimePointer<Vector128<float>>) (address)).value());
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* LDXR */
bool Recompiler::LDXR(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rt] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (Exclusive32R = ((RuntimePointer<uint>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))).value()));
		} else {
			XR[(int) rt] = (RuntimeValue<ulong>) (Exclusive64R = ((RuntimePointer<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))).value());
		}
		return true;
	}
unimplemented:
	return false;
}

/* LDXRB */
bool Recompiler::LDXRB(uint inst, ulong pc) {
	{
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		XR[(int) rt] = (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<byte>) (Exclusive8R = ((RuntimePointer<byte>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))).value())));
		return true;
	}
unimplemented:
	return false;
}

/* LDXRH */
bool Recompiler::LDXRH(uint inst, ulong pc) {
	{
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		XR[(int) rt] = (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ushort>) (Exclusive16R = ((RuntimePointer<ushort>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))).value())));
		return true;
	}
unimplemented:
	return false;
}

/* LSL-register */
bool Recompiler::LSL_register(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) ((rn) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rn]()))) << ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]())))) % ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x20))))));
		} else {
			XR[(int) rd] = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]())) << ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]()))) % ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x40)))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* LSRV */
bool Recompiler::LSRV(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) ((rn) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rn]()))) >> ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]())))) % ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x20))))));
		} else {
			XR[(int) rd] = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]())) >> ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]()))) % ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x40)))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* MADD */
bool Recompiler::MADD(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto ra = (inst >> 10) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((rn) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rn]())))) * ((RuntimeValue<uint>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))))))) + ((RuntimeValue<uint>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((ra) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) ra]()))))));
		} else {
			XR[(int) rd] = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]()))) * ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())))))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((ra) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) ra]()))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* MOVI-scalar-64bit */
bool Recompiler::MOVI_scalar_64bit(uint inst, ulong pc) {
	{
		auto a = (inst >> 18) & 0x1U;
		auto b = (inst >> 17) & 0x1U;
		auto c = (inst >> 16) & 0x1U;
		auto d = (inst >> 9) & 0x1U;
		auto e = (inst >> 8) & 0x1U;
		auto f = (inst >> 7) & 0x1U;
		auto g = (inst >> 6) & 0x1U;
		auto h = (inst >> 5) & 0x1U;
		auto rd = (inst >> 0) & 0x1FU;
		auto imm8a = (byte) ((byte) ((long) ((a != 0) ? (0xFF) : (0x0))));
		auto imm8b = (byte) ((byte) ((long) ((b != 0) ? (0xFF) : (0x0))));
		auto imm8c = (byte) ((byte) ((long) ((c != 0) ? (0xFF) : (0x0))));
		auto imm8d = (byte) ((byte) ((long) ((d != 0) ? (0xFF) : (0x0))));
		auto imm8e = (byte) ((byte) ((long) ((e != 0) ? (0xFF) : (0x0))));
		auto imm8f = (byte) ((byte) ((long) ((f != 0) ? (0xFF) : (0x0))));
		auto imm8g = (byte) ((byte) ((long) ((g != 0) ? (0xFF) : (0x0))));
		auto imm8h = (byte) ((byte) ((long) ((h != 0) ? (0xFF) : (0x0))));
		auto imm = (ulong) ((ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (((ulong) (imm8h)) << 0)) | ((ulong) (((ulong) (imm8g)) << 8)))) | ((ulong) (((ulong) (imm8f)) << 16)))) | ((ulong) (((ulong) (imm8e)) << 24)))) | ((ulong) (((ulong) (imm8d)) << 32)))) | ((ulong) (((ulong) (imm8c)) << 40)))) | ((ulong) (((ulong) (imm8b)) << 48)))) | ((ulong) (((ulong) (imm8a)) << 56))));
		VDR[(int) (rd)] = (double) (Bitcast<ulong, double>(imm));
		return true;
	}
unimplemented:
	return false;
}

/* MOVI-vector-8bit */
bool Recompiler::MOVI_vector_8bit(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto a = (inst >> 18) & 0x1U;
		auto b = (inst >> 17) & 0x1U;
		auto c = (inst >> 16) & 0x1U;
		auto d = (inst >> 9) & 0x1U;
		auto e = (inst >> 8) & 0x1U;
		auto f = (inst >> 7) & 0x1U;
		auto g = (inst >> 6) & 0x1U;
		auto h = (inst >> 5) & 0x1U;
		auto rd = (inst >> 0) & 0x1FU;
		auto t = (string) ((Q != 0) ? (string("16B")) : (string("8B")));
		auto imm = (byte) ((byte) (((byte) (byte) (((byte) (byte) (((byte) (byte) (((byte) (byte) (((byte) (byte) (((byte) (byte) (((byte) (((byte) (h)) << 0)) | ((byte) (((byte) (g)) << 1)))) | ((byte) (((byte) (f)) << 2)))) | ((byte) (((byte) (e)) << 3)))) | ((byte) (((byte) (d)) << 4)))) | ((byte) (((byte) (c)) << 5)))) | ((byte) (((byte) (b)) << 6)))) | ((byte) (((byte) (a)) << 7))));
		auto avec = ((RuntimeValue<Vector128<float>>) (((RuntimeValue<byte>) ((byte) ((byte) (imm)))).CreateVector())).Store();
		VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) ((Q) != 0 ? (avec) : ((RuntimeValue<Vector128<float>>) (avec)));
		return true;
	}
unimplemented:
	return false;
}

/* MOVI-vector-16bit */
bool Recompiler::MOVI_vector_16bit(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto a = (inst >> 18) & 0x1U;
		auto b = (inst >> 17) & 0x1U;
		auto c = (inst >> 16) & 0x1U;
		auto cmode = (inst >> 13) & 0x1U;
		auto d = (inst >> 9) & 0x1U;
		auto e = (inst >> 8) & 0x1U;
		auto f = (inst >> 7) & 0x1U;
		auto g = (inst >> 6) & 0x1U;
		auto h = (inst >> 5) & 0x1U;
		auto rd = (inst >> 0) & 0x1FU;
		auto t = (string) ((Q != 0) ? (string("8H")) : (string("4H")));
		auto imm = (byte) ((byte) (((byte) (byte) (((byte) (byte) (((byte) (byte) (((byte) (byte) (((byte) (byte) (((byte) (byte) (((byte) (((byte) (h)) << 0)) | ((byte) (((byte) (g)) << 1)))) | ((byte) (((byte) (f)) << 2)))) | ((byte) (((byte) (e)) << 3)))) | ((byte) (((byte) (d)) << 4)))) | ((byte) (((byte) (c)) << 5)))) | ((byte) (((byte) (b)) << 6)))) | ((byte) (((byte) (a)) << 7))));
		auto avec = ((RuntimeValue<Vector128<float>>) (((RuntimeValue<ushort>) ((ushort) ((cmode != 0) ? ((ushort) ((ushort) ((ushort) (((ushort) ((ushort) (imm))) << (uint) (0x8))))) : ((ushort) ((ushort) (imm)))))).CreateVector())).Store();
		VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) ((Q) != 0 ? (avec) : ((RuntimeValue<Vector128<float>>) (avec)));
		return true;
	}
unimplemented:
	return false;
}

/* MOVI-vector-32bit */
bool Recompiler::MOVI_vector_32bit(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto a = (inst >> 18) & 0x1U;
		auto b = (inst >> 17) & 0x1U;
		auto c = (inst >> 16) & 0x1U;
		auto cmode = (inst >> 13) & 0x3U;
		auto d = (inst >> 9) & 0x1U;
		auto e = (inst >> 8) & 0x1U;
		auto f = (inst >> 7) & 0x1U;
		auto g = (inst >> 6) & 0x1U;
		auto h = (inst >> 5) & 0x1U;
		auto rd = (inst >> 0) & 0x1FU;
		auto t = (string) ((Q != 0) ? (string("4S")) : (string("2S")));
		auto amount = (long) (([=](auto temp_797) -> long { switch(temp_797) { case 0x0: return 0x0; case 0x1: return 0x8; case 0x2: return 0x10; case 0x3: return 0x18; default: throw "Not implemented"; } })(cmode));
		auto imm = (byte) ((byte) (((byte) (byte) (((byte) (byte) (((byte) (byte) (((byte) (byte) (((byte) (byte) (((byte) (byte) (((byte) (((byte) (h)) << 0)) | ((byte) (((byte) (g)) << 1)))) | ((byte) (((byte) (f)) << 2)))) | ((byte) (((byte) (e)) << 3)))) | ((byte) (((byte) (d)) << 4)))) | ((byte) (((byte) (c)) << 5)))) | ((byte) (((byte) (b)) << 6)))) | ((byte) (((byte) (a)) << 7))));
		auto avec = ((RuntimeValue<Vector128<float>>) (((RuntimeValue<float>) ((float) (Bitcast<uint, float>((uint) (((uint) ((uint) (imm))) << (uint) (amount)))))).CreateVector())).Store();
		VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) ((Q) != 0 ? (avec) : ((RuntimeValue<Vector128<float>>) (avec)));
		return true;
	}
unimplemented:
	return false;
}

/* MOVI-Vx.2D */
bool Recompiler::MOVI_Vx_2D(uint inst, ulong pc) {
	{
		auto a = (inst >> 18) & 0x1U;
		auto b = (inst >> 17) & 0x1U;
		auto c = (inst >> 16) & 0x1U;
		auto d = (inst >> 9) & 0x1U;
		auto e = (inst >> 8) & 0x1U;
		auto f = (inst >> 7) & 0x1U;
		auto g = (inst >> 6) & 0x1U;
		auto h = (inst >> 5) & 0x1U;
		auto rd = (inst >> 0) & 0x1FU;
		auto imm = (ulong) ((ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (ulong) (((ulong) (((ulong) ((byte) ((byte) (((byte) (byte) (((byte) (byte) (((byte) (byte) (((byte) (byte) (((byte) (byte) (((byte) (byte) (((byte) (((byte) (h)) << 0)) | ((byte) (((byte) (h)) << 1)))) | ((byte) (((byte) (h)) << 2)))) | ((byte) (((byte) (h)) << 3)))) | ((byte) (((byte) (h)) << 4)))) | ((byte) (((byte) (h)) << 5)))) | ((byte) (((byte) (h)) << 6)))) | ((byte) (((byte) (h)) << 7)))))) << 0)) | ((ulong) (((ulong) ((byte) ((byte) (((byte) (byte) (((byte) (byte) (((byte) (byte) (((byte) (byte) (((byte) (byte) (((byte) (byte) (((byte) (((byte) (g)) << 0)) | ((byte) (((byte) (g)) << 1)))) | ((byte) (((byte) (g)) << 2)))) | ((byte) (((byte) (g)) << 3)))) | ((byte) (((byte) (g)) << 4)))) | ((byte) (((byte) (g)) << 5)))) | ((byte) (((byte) (g)) << 6)))) | ((byte) (((byte) (g)) << 7)))))) << 8)))) | ((ulong) (((ulong) ((byte) ((byte) (((byte) (byte) (((byte) (byte) (((byte) (byte) (((byte) (byte) (((byte) (byte) (((byte) (byte) (((byte) (((byte) (f)) << 0)) | ((byte) (((byte) (f)) << 1)))) | ((byte) (((byte) (f)) << 2)))) | ((byte) (((byte) (f)) << 3)))) | ((byte) (((byte) (f)) << 4)))) | ((byte) (((byte) (f)) << 5)))) | ((byte) (((byte) (f)) << 6)))) | ((byte) (((byte) (f)) << 7)))))) << 16)))) | ((ulong) (((ulong) ((byte) ((byte) (((byte) (byte) (((byte) (byte) (((byte) (byte) (((byte) (byte) (((byte) (byte) (((byte) (byte) (((byte) (((byte) (e)) << 0)) | ((byte) (((byte) (e)) << 1)))) | ((byte) (((byte) (e)) << 2)))) | ((byte) (((byte) (e)) << 3)))) | ((byte) (((byte) (e)) << 4)))) | ((byte) (((byte) (e)) << 5)))) | ((byte) (((byte) (e)) << 6)))) | ((byte) (((byte) (e)) << 7)))))) << 24)))) | ((ulong) (((ulong) ((byte) ((byte) (((byte) (byte) (((byte) (byte) (((byte) (byte) (((byte) (byte) (((byte) (byte) (((byte) (byte) (((byte) (((byte) (d)) << 0)) | ((byte) (((byte) (d)) << 1)))) | ((byte) (((byte) (d)) << 2)))) | ((byte) (((byte) (d)) << 3)))) | ((byte) (((byte) (d)) << 4)))) | ((byte) (((byte) (d)) << 5)))) | ((byte) (((byte) (d)) << 6)))) | ((byte) (((byte) (d)) << 7)))))) << 32)))) | ((ulong) (((ulong) ((byte) ((byte) (((byte) (byte) (((byte) (byte) (((byte) (byte) (((byte) (byte) (((byte) (byte) (((byte) (byte) (((byte) (((byte) (c)) << 0)) | ((byte) (((byte) (c)) << 1)))) | ((byte) (((byte) (c)) << 2)))) | ((byte) (((byte) (c)) << 3)))) | ((byte) (((byte) (c)) << 4)))) | ((byte) (((byte) (c)) << 5)))) | ((byte) (((byte) (c)) << 6)))) | ((byte) (((byte) (c)) << 7)))))) << 40)))) | ((ulong) (((ulong) ((byte) ((byte) (((byte) (byte) (((byte) (byte) (((byte) (byte) (((byte) (byte) (((byte) (byte) (((byte) (byte) (((byte) (((byte) (b)) << 0)) | ((byte) (((byte) (b)) << 1)))) | ((byte) (((byte) (b)) << 2)))) | ((byte) (((byte) (b)) << 3)))) | ((byte) (((byte) (b)) << 4)))) | ((byte) (((byte) (b)) << 5)))) | ((byte) (((byte) (b)) << 6)))) | ((byte) (((byte) (b)) << 7)))))) << 48)))) | ((ulong) (((ulong) ((byte) ((byte) (((byte) (byte) (((byte) (byte) (((byte) (byte) (((byte) (byte) (((byte) (byte) (((byte) (byte) (((byte) (((byte) (a)) << 0)) | ((byte) (((byte) (a)) << 1)))) | ((byte) (((byte) (a)) << 2)))) | ((byte) (((byte) (a)) << 3)))) | ((byte) (((byte) (a)) << 4)))) | ((byte) (((byte) (a)) << 5)))) | ((byte) (((byte) (a)) << 6)))) | ((byte) (((byte) (a)) << 7)))))) << 56))));
		VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<ulong>) (imm)).CreateVector());
		return true;
	}
unimplemented:
	return false;
}

/* MOVK */
bool Recompiler::MOVK(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto hw = (inst >> 21) & 0x3U;
		auto imm = (inst >> 5) & 0xFFFFU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto shift = (byte) ((hw) << (uint) (0x4));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((((RuntimeValue<uint>) ((RuntimeValue<uint>) ((((RuntimeValue<uint>) ((RuntimeValue<uint>) ((rd) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rd]())))) & ((RuntimeValue<uint>) ((uint) ((((uint) ((uint) ((uint) (-0x1)))) ^ ((uint) ((uint) (((uint) ((uint) (0xFFFF))) << (uint) (shift)))))))))))) | ((RuntimeValue<uint>) ((uint) (((uint) ((uint) (imm))) << (uint) (shift)))))));
		} else {
			XR[(int) rd] = (RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rd) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rd]()))) & ((RuntimeValue<ulong>) ((ulong) ((((ulong) ((ulong) ((ulong) (-0x1)))) ^ ((ulong) ((ulong) (((ulong) ((ulong) (0xFFFF))) << (uint) (shift)))))))))))) | ((RuntimeValue<ulong>) ((ulong) (((ulong) ((ulong) (imm))) << (uint) (shift))))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* MOVN */
bool Recompiler::MOVN(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto hw = (inst >> 21) & 0x3U;
		auto imm = (inst >> 5) & 0xFFFFU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto shift = (byte) ((hw) << (uint) (0x4));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((uint) (~((uint) (((uint) ((uint) (imm))) << (uint) (shift)))));
		} else {
			XR[(int) rd] = (ulong) (~((ulong) (((ulong) ((ulong) (imm))) << (uint) (shift))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* MOVZ */
bool Recompiler::MOVZ(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto hw = (inst >> 21) & 0x3U;
		auto imm = (inst >> 5) & 0xFFFFU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto shift = (byte) ((hw) << (uint) (0x4));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((uint) (((uint) ((uint) (imm))) << (uint) (shift)));
		} else {
			XR[(int) rd] = (ulong) (((ulong) ((ulong) (imm))) << (uint) (shift));
		}
		return true;
	}
unimplemented:
	return false;
}

/* MRS */
bool Recompiler::MRS(uint inst, ulong pc) {
	{
		auto op0 = (inst >> 19) & 0x1U;
		auto op1 = (inst >> 16) & 0x7U;
		auto cn = (inst >> 12) & 0xFU;
		auto cm = (inst >> 8) & 0xFU;
		auto op2 = (inst >> 5) & 0x7U;
		auto rt = (inst >> 0) & 0x1FU;
		XR[(int) rt] = (RuntimeValue<ulong>) (Call<ulong, ulong, uint, uint, uint, uint, uint>(SR, (ulong) this, op0, op1, cn, cm, op2));
		return true;
	}
unimplemented:
	return false;
}

/* MSR-register */
bool Recompiler::MSR_register(uint inst, ulong pc) {
	{
		auto op0 = (inst >> 19) & 0x1U;
		auto op1 = (inst >> 16) & 0x7U;
		auto cn = (inst >> 12) & 0xFU;
		auto cm = (inst >> 8) & 0xFU;
		auto op2 = (inst >> 5) & 0x7U;
		auto rt = (inst >> 0) & 0x1FU;
		Call<void, ulong, uint, uint, uint, uint, uint, ulong>(SR, (ulong) this, op0, op1, cn, cm, op2, (RuntimeValue<ulong>) ((rt) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rt]()));
		return true;
	}
unimplemented:
	return false;
}

/* MSUB */
bool Recompiler::MSUB(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto ra = (inst >> 10) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((ra) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) ra]())))) - ((RuntimeValue<uint>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((rn) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rn]())))) * ((RuntimeValue<uint>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]())))))))));
		} else {
			XR[(int) rd] = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((ra) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) ra]()))) - ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]()))) * ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())))))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* MUL-by-element */
bool Recompiler::MUL_by_element(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 22) & 0x3U;
		auto L = (inst >> 21) & 0x1U;
		auto M = (inst >> 20) & 0x1U;
		auto rv = (inst >> 16) & 0xFU;
		auto H = (inst >> 11) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto rm = (byte) (((bool) (((size) == (0x2)) ? 1U : 0U) != 0) ? ((byte) ((byte) (((byte) (((byte) (rv)) << 0)) | ((byte) (((byte) (M)) << 4))))) : (rv));
		auto t = (string) (([=](auto temp_798) -> string { switch(temp_798) { case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))));
		auto ts = (string) (([=](auto temp_799) -> string { switch(temp_799) { case 0x1: return string("H"); case 0x2: return string("S"); default: throw "Not implemented"; } })(size));
		auto index = (byte) (([=](auto temp_800) -> byte { switch(temp_800) { case 0x1: return (byte) ((byte) (((byte) (byte) (((byte) (((byte) (M)) << 0)) | ((byte) (((byte) (L)) << 1)))) | ((byte) (((byte) (H)) << 2)))); case 0x2: return (byte) ((byte) (((byte) (((byte) (L)) << 0)) | ((byte) (((byte) (H)) << 1)))); default: throw "Not implemented"; } })(size));
		auto v = ((RuntimeValue<Vector128<float>>) (([=](auto temp_801) -> RuntimeValue<Vector128<float>> { switch(temp_801) { case 0x1: return (RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<ushort>>) ((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])) * ((RuntimeValue<ushort>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<ushort>(index)))))); case 0x2: return (RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<uint>>) ((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])) * ((RuntimeValue<uint>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint>(index)))))); default: throw "Not implemented"; } })(size))).Store();
		VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) ((Q) != 0 ? (v) : ((RuntimeValue<Vector128<float>>) (v)));
		return true;
	}
unimplemented:
	return false;
}

/* MUL-vector */
bool Recompiler::MUL_vector(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto t = (string) (([=](auto temp_802) -> string { switch(temp_802) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))));
		auto v = ((RuntimeValue<Vector128<float>>) (([=](auto temp_803) -> RuntimeValue<Vector128<float>> { switch(temp_803) { case 0x0: return (RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<byte>>) ((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])) * ((RuntimeValue<Vector128<byte>>) ((RuntimeValue<Vector128<float>>) (VR[(int) (rm)])))))); case 0x1: return (RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<ushort>>) ((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])) * ((RuntimeValue<Vector128<ushort>>) ((RuntimeValue<Vector128<float>>) (VR[(int) (rm)])))))); case 0x2: return (RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<uint>>) ((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])) * ((RuntimeValue<Vector128<uint>>) ((RuntimeValue<Vector128<float>>) (VR[(int) (rm)])))))); default: throw "Not implemented"; } })(size))).Store();
		VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) ((Q) != 0 ? (v) : ((RuntimeValue<Vector128<float>>) (v)));
		return true;
	}
unimplemented:
	return false;
}

/* NEG-vector */
bool Recompiler::NEG_vector(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 22) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto t = (string) (([=](auto temp_804) -> string { switch(temp_804) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))));
		auto n = ((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Store();
		VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<byte>) ((byte) ((byte) (0x0)))).CreateVector());
		switch((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))) {
			case 0x0: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<sbyte>) (-((RuntimeValue<sbyte>) ((n).Element<sbyte>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<sbyte>) (-((RuntimeValue<sbyte>) ((n).Element<sbyte>(0x1)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (RuntimeValue<sbyte>) (-((RuntimeValue<sbyte>) ((n).Element<sbyte>(0x2)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (RuntimeValue<sbyte>) (-((RuntimeValue<sbyte>) ((n).Element<sbyte>(0x3)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x4, (RuntimeValue<sbyte>) (-((RuntimeValue<sbyte>) ((n).Element<sbyte>(0x4)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x5, (RuntimeValue<sbyte>) (-((RuntimeValue<sbyte>) ((n).Element<sbyte>(0x5)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x6, (RuntimeValue<sbyte>) (-((RuntimeValue<sbyte>) ((n).Element<sbyte>(0x6)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x7, (RuntimeValue<sbyte>) (-((RuntimeValue<sbyte>) ((n).Element<sbyte>(0x7)))));
				break;
			}
			case 0x1: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<sbyte>) (-((RuntimeValue<sbyte>) ((n).Element<sbyte>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<sbyte>) (-((RuntimeValue<sbyte>) ((n).Element<sbyte>(0x1)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (RuntimeValue<sbyte>) (-((RuntimeValue<sbyte>) ((n).Element<sbyte>(0x2)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (RuntimeValue<sbyte>) (-((RuntimeValue<sbyte>) ((n).Element<sbyte>(0x3)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x4, (RuntimeValue<sbyte>) (-((RuntimeValue<sbyte>) ((n).Element<sbyte>(0x4)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x5, (RuntimeValue<sbyte>) (-((RuntimeValue<sbyte>) ((n).Element<sbyte>(0x5)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x6, (RuntimeValue<sbyte>) (-((RuntimeValue<sbyte>) ((n).Element<sbyte>(0x6)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x7, (RuntimeValue<sbyte>) (-((RuntimeValue<sbyte>) ((n).Element<sbyte>(0x7)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x8, (RuntimeValue<sbyte>) (-((RuntimeValue<sbyte>) ((n).Element<sbyte>(0x8)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x9, (RuntimeValue<sbyte>) (-((RuntimeValue<sbyte>) ((n).Element<sbyte>(0x9)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xA, (RuntimeValue<sbyte>) (-((RuntimeValue<sbyte>) ((n).Element<sbyte>(0xA)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xB, (RuntimeValue<sbyte>) (-((RuntimeValue<sbyte>) ((n).Element<sbyte>(0xB)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xC, (RuntimeValue<sbyte>) (-((RuntimeValue<sbyte>) ((n).Element<sbyte>(0xC)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xD, (RuntimeValue<sbyte>) (-((RuntimeValue<sbyte>) ((n).Element<sbyte>(0xD)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xE, (RuntimeValue<sbyte>) (-((RuntimeValue<sbyte>) ((n).Element<sbyte>(0xE)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xF, (RuntimeValue<sbyte>) (-((RuntimeValue<sbyte>) ((n).Element<sbyte>(0xF)))));
				break;
			}
			case 0x2: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<short>) (-((RuntimeValue<short>) ((n).Element<short>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<short>) (-((RuntimeValue<short>) ((n).Element<short>(0x1)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (RuntimeValue<short>) (-((RuntimeValue<short>) ((n).Element<short>(0x2)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (RuntimeValue<short>) (-((RuntimeValue<short>) ((n).Element<short>(0x3)))));
				break;
			}
			case 0x3: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<short>) (-((RuntimeValue<short>) ((n).Element<short>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<short>) (-((RuntimeValue<short>) ((n).Element<short>(0x1)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (RuntimeValue<short>) (-((RuntimeValue<short>) ((n).Element<short>(0x2)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (RuntimeValue<short>) (-((RuntimeValue<short>) ((n).Element<short>(0x3)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x4, (RuntimeValue<short>) (-((RuntimeValue<short>) ((n).Element<short>(0x4)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x5, (RuntimeValue<short>) (-((RuntimeValue<short>) ((n).Element<short>(0x5)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x6, (RuntimeValue<short>) (-((RuntimeValue<short>) ((n).Element<short>(0x6)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x7, (RuntimeValue<short>) (-((RuntimeValue<short>) ((n).Element<short>(0x7)))));
				break;
			}
			case 0x4: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<float>) (-((RuntimeValue<float>) ((n).Element<float>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<float>) (-((RuntimeValue<float>) ((n).Element<float>(0x1)))));
				break;
			}
			case 0x5: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<float>) (-((RuntimeValue<float>) ((n).Element<float>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<float>) (-((RuntimeValue<float>) ((n).Element<float>(0x1)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (RuntimeValue<float>) (-((RuntimeValue<float>) ((n).Element<float>(0x2)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (RuntimeValue<float>) (-((RuntimeValue<float>) ((n).Element<float>(0x3)))));
				break;
			}
			case 0x7: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<double>) (-((RuntimeValue<double>) ((n).Element<double>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<double>) (-((RuntimeValue<double>) ((n).Element<double>(0x1)))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* NOP */
bool Recompiler::NOP(uint inst, ulong pc) {
	{
		return true;
	}
unimplemented:
	return false;
}

/* ORN-shifted-register */
bool Recompiler::ORN_shifted_register(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto shift = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto imm = (inst >> 10) & 0x3FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto shiftstr = (string) (([=](auto temp_805) -> string { switch(temp_805) { case 0x0: return string("LSL"); case 0x1: return string("LSR"); case 0x2: return string("ASR"); default: return string("ROR"); } })(shift));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((((RuntimeValue<uint>) ((RuntimeValue<uint>) ((rn) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rn]())))) | ((RuntimeValue<uint>) ((RuntimeValue<uint>) (~((RuntimeValue<uint>) (([=](auto temp_806) -> RuntimeValue<uint> { switch(temp_806) { case 0x0: return (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))))) << (imm))); case 0x1: return (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))) >> (imm))); case 0x2: return (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<int>) (((RuntimeValue<int>) ((RuntimeValue<int>) ((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))))) >> (imm))))); default: return (RuntimeValue<uint>) ((((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))) << ((RuntimeValue<uint>) (32 - (imm)))) | (((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))) >> ((RuntimeValue<uint>) (imm)))); } })(shift)))))))));
		} else {
			XR[(int) rd] = (RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]()))) | ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (~((RuntimeValue<ulong>) (([=](auto temp_807) -> RuntimeValue<ulong> { switch(temp_807) { case 0x0: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())))) << (imm))); case 0x1: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())) >> (imm))); case 0x2: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (((RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())))) >> (imm))))); default: return (RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())) << ((RuntimeValue<uint>) (64 - (imm)))) | (((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())) >> ((RuntimeValue<uint>) (imm)))); } })(shift))))))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* ORR-immediate */
bool Recompiler::ORR_immediate(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto up = (inst >> 22) & 0x1U;
		auto immr = (inst >> 16) & 0x3FU;
		auto imms = (inst >> 10) & 0x3FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto imm = (ulong) (MakeWMask(up, imms, immr, (long) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (0x20) : (0x40)), 0x1));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			if(rd == 31)
				SPR = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((((RuntimeValue<uint>) ((RuntimeValue<uint>) ((rn) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rn]())))) | ((RuntimeValue<uint>) ((uint) ((uint) (imm)))))));
			else
				XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((((RuntimeValue<uint>) ((RuntimeValue<uint>) ((rn) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rn]())))) | ((RuntimeValue<uint>) ((uint) ((uint) (imm)))))));
		} else {
			if(rd == 31)
				SPR = (RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]()))) | ((RuntimeValue<ulong>) (imm))));
			else
				XR[(int) rd] = (RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]()))) | ((RuntimeValue<ulong>) (imm))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* ORR-shifted-register */
bool Recompiler::ORR_shifted_register(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto shift = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto imm = (inst >> 10) & 0x3FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto shiftstr = (string) (([=](auto temp_808) -> string { switch(temp_808) { case 0x0: return string("LSL"); case 0x1: return string("LSR"); case 0x2: return string("ASR"); default: return string("ROR"); } })(shift));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((((RuntimeValue<uint>) ((RuntimeValue<uint>) ((rn) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rn]())))) | ((RuntimeValue<uint>) ((RuntimeValue<uint>) (([=](auto temp_809) -> RuntimeValue<uint> { switch(temp_809) { case 0x0: return (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))))) << (imm))); case 0x1: return (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))) >> (imm))); case 0x2: return (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<int>) (((RuntimeValue<int>) ((RuntimeValue<int>) ((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))))) >> (imm))))); default: return (RuntimeValue<uint>) ((((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))) << ((RuntimeValue<uint>) (32 - (imm)))) | (((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))) >> ((RuntimeValue<uint>) (imm)))); } })(shift)))))));
		} else {
			XR[(int) rd] = (RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]()))) | ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (([=](auto temp_810) -> RuntimeValue<ulong> { switch(temp_810) { case 0x0: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())))) << (imm))); case 0x1: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())) >> (imm))); case 0x2: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (((RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())))) >> (imm))))); default: return (RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())) << ((RuntimeValue<uint>) (64 - (imm)))) | (((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())) >> ((RuntimeValue<uint>) (imm)))); } })(shift))))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* ORR-simd-register */
bool Recompiler::ORR_simd_register(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto t = (string) (((bool) (((Q) == (0x0)) ? 1U : 0U) != 0) ? (string("8B")) : (string("16B")));
		if(((bool) (((rm) == (rn)) ? 1U : 0U)) != 0) {
			VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) (VR[(int) (rn)]);
		} else {
			auto tv = ((RuntimeValue<Vector128<float>>) ((RuntimeValue<Vector128<float>>) ((((RuntimeValue<Vector128<byte>>) ((RuntimeValue<Vector128<float>>) (VR[(int) (rn)]))) | ((RuntimeValue<Vector128<byte>>) ((RuntimeValue<Vector128<float>>) (VR[(int) (rm)]))))))).Store();
			VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) ((Q) != 0 ? (tv) : ((RuntimeValue<Vector128<float>>) (tv)));
		}
		return true;
	}
unimplemented:
	return false;
}

/* PRFM-immediate */
bool Recompiler::PRFM_immediate(uint inst, ulong pc) {
	{
		auto imm = (inst >> 10) & 0xFFFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto imm5 = (inst >> 0) & 0x1FU;
		auto pimm = (ulong) (((ulong) (ushort) (imm)) * ((ulong) (long) (0x8)));
		return true;
	}
unimplemented:
	return false;
}

/* RBIT */
bool Recompiler::RBIT(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (Call<uint, uint>(ReverseBits, (RuntimeValue<uint>) ((rn) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rn]())))));
		} else {
			XR[(int) rd] = (RuntimeValue<ulong>) (Call<ulong, ulong>(ReverseBits, (RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]())));
		}
		return true;
	}
unimplemented:
	return false;
}

/* RET */
bool Recompiler::RET(uint inst, ulong pc) {
	{
		auto rn = (inst >> 5) & 0x1FU;
		BranchRegister(rn);
		return true;
	}
unimplemented:
	return false;
}

/* REV */
bool Recompiler::REV(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto opc = (inst >> 10) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		switch((byte) ((byte) (((byte) (((byte) (opc)) << 0)) | ((byte) (((byte) (size)) << 1))))) {
			case 0x0: {
				auto x = ((RuntimeValue<uint>) ((rn) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rn]()))).Store();
				XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((((((RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) ((((RuntimeValue<ulong>) (x)) & ((RuntimeValue<ulong>) (0xFF))))) << (0x18)))) | ((RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) ((((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((x) >> (0x8)))) & ((RuntimeValue<ulong>) (0xFF))))) << (0x10))))) | ((RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) ((((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((x) >> (0x10)))) & ((RuntimeValue<ulong>) (0xFF))))) << (0x8))))) | ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((x) >> (0x18)))) & ((RuntimeValue<ulong>) (0xFF)))))))));
				break;
			}
			case 0x3: {
				auto x = ((RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]())).Store();
				XR[(int) rd] = (RuntimeValue<ulong>) ((((((((((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((((RuntimeValue<ulong>) (x)) & ((RuntimeValue<ulong>) (0xFF))))) << (0x38)))) | ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((x) >> (0x8)))) & ((RuntimeValue<ulong>) (0xFF))))) << (0x30))))) | ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((x) >> (0x10)))) & ((RuntimeValue<ulong>) (0xFF))))) << (0x28))))) | ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((x) >> (0x18)))) & ((RuntimeValue<ulong>) (0xFF))))) << (0x20))))) | ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((x) >> (0x20)))) & ((RuntimeValue<ulong>) (0xFF))))) << (0x18))))) | ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((x) >> (0x28)))) & ((RuntimeValue<ulong>) (0xFF))))) << (0x10))))) | ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((x) >> (0x30)))) & ((RuntimeValue<ulong>) (0xFF))))) << (0x8))))) | ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((x) >> (0x38)))) & ((RuntimeValue<ulong>) (0xFF))))))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* REV16 */
bool Recompiler::REV16(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			auto x = ((RuntimeValue<uint>) ((rn) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rn]()))).Store();
			XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((((((RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) ((((RuntimeValue<ulong>) (x)) & ((RuntimeValue<ulong>) (0xFF))))) << (0x8)))) | ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((x) >> (0x8)))) & ((RuntimeValue<ulong>) (0xFF))))))) | ((RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) ((((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((x) >> (0x10)))) & ((RuntimeValue<ulong>) (0xFF))))) << (0x18))))) | ((RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) ((((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((x) >> (0x18)))) & ((RuntimeValue<ulong>) (0xFF))))) << (0x10)))))));
		} else {
			auto x = ((RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]())).Store();
			XR[(int) rd] = (RuntimeValue<ulong>) ((((((((((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((((RuntimeValue<ulong>) (x)) & ((RuntimeValue<ulong>) (0xFF))))) << (0x8)))) | ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((x) >> (0x8)))) & ((RuntimeValue<ulong>) (0xFF))))))) | ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((x) >> (0x10)))) & ((RuntimeValue<ulong>) (0xFF))))) << (0x18))))) | ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((x) >> (0x18)))) & ((RuntimeValue<ulong>) (0xFF))))) << (0x10))))) | ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((x) >> (0x20)))) & ((RuntimeValue<ulong>) (0xFF))))) << (0x28))))) | ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((x) >> (0x28)))) & ((RuntimeValue<ulong>) (0xFF))))) << (0x20))))) | ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((x) >> (0x30)))) & ((RuntimeValue<ulong>) (0xFF))))) << (0x38))))) | ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((x) >> (0x38)))) & ((RuntimeValue<ulong>) (0xFF))))) << (0x30))))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* RORV */
bool Recompiler::RORV(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((((RuntimeValue<uint>) ((rn) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rn]()))) << ((RuntimeValue<uint>) (32 - ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]())))) % ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x20))))))) | (((RuntimeValue<uint>) ((rn) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rn]()))) >> ((RuntimeValue<uint>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]())))) % ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x20))))))));
		} else {
			XR[(int) rd] = (RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]())) << ((RuntimeValue<uint>) (64 - ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]()))) % ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x40))))))) | (((RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]())) >> ((RuntimeValue<uint>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]()))) % ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x40)))))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* SBCS */
bool Recompiler::SBCS(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (([=]() -> RuntimeValue<uint> {
					auto __macro_add_with_carry_set_nzcv_common_operand1 = ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((rn) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rn]()))))).Store();
					auto __macro_add_with_carry_set_nzcv_common_operand2 = ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) (~((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))))))).Store();
					auto __macro_add_with_carry_set_nzcv_common_carryIn = ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<bool>) (NZCV_CR)))).Store();
					auto bits = (int) (32);
					auto bits1 = (long) (((long) (int) (bits)) - ((long) (long) (0x1)));
					auto usum = ((RuntimeValue<uint>) (((RuntimeValue<uint>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) (RuntimeValue<uint>) (__macro_add_with_carry_set_nzcv_common_operand1)) + ((RuntimeValue<uint>) (RuntimeValue<uint>) (__macro_add_with_carry_set_nzcv_common_operand2))))) + ((RuntimeValue<uint>) (RuntimeValue<uint>) (__macro_add_with_carry_set_nzcv_common_carryIn)))).Store();
					auto ssum = ((RuntimeValue<int>) (((RuntimeValue<int>) (RuntimeValue<int>) ((RuntimeValue<int>) (((RuntimeValue<int>) (RuntimeValue<int>) ((RuntimeValue<int>) ((RuntimeValue<int>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((RuntimeValue<int>) (RuntimeValue<int>) ((RuntimeValue<int>) ((RuntimeValue<int>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((RuntimeValue<int>) (RuntimeValue<int>) ((RuntimeValue<int>) ((RuntimeValue<int>) (__macro_add_with_carry_set_nzcv_common_carryIn)))))).Store();
					NZCV_NR = (RuntimeValue<uint>) ((usum) >> (bits1));
					NZCV_ZR = (RuntimeValue<bool>) ((usum) == (0x0));
					NZCV_CR = (RuntimeValue<uint>) ((((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_carryIn)))))) >> (bits)))))) & ((RuntimeValue<ulong>) (0x1))));
					NZCV_VR = (RuntimeValue<bool>) ((((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<uint>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))) == ((RuntimeValue<uint>) ((__macro_add_with_carry_set_nzcv_common_operand2) >> (bits1)))))) & ((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<uint>) ((usum) >> (bits1))) != ((RuntimeValue<uint>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))))))));
					return (usum).Store();
				})()));
		} else {
			XR[(int) rd] = (RuntimeValue<ulong>) (([=]() -> RuntimeValue<ulong> {
					auto __macro_add_with_carry_set_nzcv_common_operand1 = ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]())))).Store();
					auto __macro_add_with_carry_set_nzcv_common_operand2 = ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (~((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())))))).Store();
					auto __macro_add_with_carry_set_nzcv_common_carryIn = ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<bool>) (NZCV_CR)))).Store();
					auto bits = (int) (64);
					auto bits1 = (long) (((long) (int) (bits)) - ((long) (long) (0x1)));
					auto usum = ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_operand1)) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_operand2))))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_carryIn)))).Store();
					auto ssum = ((RuntimeValue<long>) (((RuntimeValue<long>) (RuntimeValue<long>) ((RuntimeValue<long>) (((RuntimeValue<long>) (RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<long>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((RuntimeValue<long>) (RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<long>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((RuntimeValue<long>) (RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<long>) (__macro_add_with_carry_set_nzcv_common_carryIn)))))).Store();
					NZCV_NR = (RuntimeValue<ulong>) ((usum) >> (bits1));
					NZCV_ZR = (RuntimeValue<bool>) ((usum) == (0x0));
					NZCV_CR = (RuntimeValue<uint>) ((((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<UInt128>) (((RuntimeValue<UInt128>) (((RuntimeValue<UInt128>) (RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) (((RuntimeValue<UInt128>) (RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((RuntimeValue<UInt128>) (RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((RuntimeValue<UInt128>) (RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) (__macro_add_with_carry_set_nzcv_common_carryIn)))))) >> (bits)))))) & ((RuntimeValue<ulong>) (0x1))));
					NZCV_VR = (RuntimeValue<bool>) ((((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<ulong>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))) == ((RuntimeValue<ulong>) ((__macro_add_with_carry_set_nzcv_common_operand2) >> (bits1)))))) & ((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<ulong>) ((usum) >> (bits1))) != ((RuntimeValue<ulong>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))))))));
					return (usum).Store();
				})());
		}
		return true;
	}
unimplemented:
	return false;
}

/* SBFM */
bool Recompiler::SBFM(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto N = (inst >> 22) & 0x1U;
		auto immr = (inst >> 16) & 0x3FU;
		auto imms = (inst >> 10) & 0x3FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			auto src = ((RuntimeValue<uint>) ((rn) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rn]()))).Store();
			auto wmask = (uint) ((uint) ((ulong) (MakeWMask(N, imms, immr, 0x20, 0x0))));
			auto tmask = (uint) ((uint) ((ulong) (MakeTMask(N, imms, immr, 0x20, 0x0))));
			auto bot = ((RuntimeValue<uint>) ((((RuntimeValue<uint>) ((RuntimeValue<uint>) (((src) << ((RuntimeValue<uint>) (32 - (immr)))) | ((src) >> ((RuntimeValue<uint>) (immr)))))) & ((RuntimeValue<uint>) (wmask))))).Store();
			auto top = ((RuntimeValue<uint>) (((RuntimeValue<uint>) (RuntimeValue<uint>) ((uint) ((uint) (0x0)))) - ((RuntimeValue<uint>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((src) >> (imms)))) & ((RuntimeValue<ulong>) (0x1)))))))).Store();
			XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((((RuntimeValue<uint>) ((RuntimeValue<uint>) ((((RuntimeValue<uint>) (top)) & ((RuntimeValue<uint>) ((uint) (~(tmask)))))))) | ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((((RuntimeValue<uint>) (bot)) & ((RuntimeValue<uint>) (tmask)))))))));
		} else {
			auto src = ((RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]())).Store();
			auto wmask = (ulong) (MakeWMask(N, imms, immr, 0x40, 0x0));
			auto tmask = (ulong) (MakeTMask(N, imms, immr, 0x40, 0x0));
			auto bot = ((RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((src) << ((RuntimeValue<uint>) (64 - (immr)))) | ((src) >> ((RuntimeValue<uint>) (immr)))))) & ((RuntimeValue<ulong>) (wmask))))).Store();
			auto top = ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((ulong) ((ulong) (0x0)))) - ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((src) >> (imms)))) & ((RuntimeValue<ulong>) (0x1)))))))).Store();
			XR[(int) rd] = (RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((((RuntimeValue<ulong>) (top)) & ((RuntimeValue<ulong>) ((ulong) (~(tmask)))))))) | ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((((RuntimeValue<ulong>) (bot)) & ((RuntimeValue<ulong>) (tmask))))))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* SCVTF-scalar-integer */
bool Recompiler::SCVTF_scalar_integer(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto type = (inst >> 22) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto st = (byte) ((byte) (((byte) (((byte) (type)) << 0)) | ((byte) (((byte) (size)) << 2))));
		auto r1 = string("");
		auto r2 = string("");
		switch(st) {
			case 0x3: {
				r1 = string("H");
				r2 = string("W");
				break;
			}
			case 0x0: {
				r1 = string("S");
				r2 = string("W");
				break;
			}
			case 0x1: {
				r1 = string("D");
				r2 = string("W");
				break;
			}
			case 0x7: {
				r1 = string("H");
				r2 = string("X");
				break;
			}
			case 0x4: {
				r1 = string("S");
				r2 = string("X");
				break;
			}
			case 0x5: {
				r1 = string("D");
				r2 = string("X");
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		switch(st) {
			case 0x0: {
				VSR[(int) (rd)] = (RuntimeValue<float>) ((RuntimeValue<float>) ((RuntimeValue<int>) ((RuntimeValue<int>) ((RuntimeValue<uint>) ((rn) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rn]()))))));
				break;
			}
			case 0x1: {
				VDR[(int) (rd)] = (RuntimeValue<double>) ((RuntimeValue<double>) ((RuntimeValue<int>) ((RuntimeValue<int>) ((RuntimeValue<uint>) ((rn) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rn]()))))));
				break;
			}
			case 0x4: {
				VSR[(int) (rd)] = (RuntimeValue<float>) ((RuntimeValue<float>) ((RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]())))));
				break;
			}
			case 0x5: {
				VDR[(int) (rd)] = (RuntimeValue<double>) ((RuntimeValue<double>) ((RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]())))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* SCVTF-scalar */
bool Recompiler::SCVTF_scalar(uint inst, ulong pc) {
	{
		auto size = (inst >> 22) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("S")) : (string("D")));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			VSR[(int) (rd)] = (RuntimeValue<float>) ((RuntimeValue<float>) ((RuntimeValue<int>) (((RuntimeValue<float>) (VSR[(int) (rn)])).Bitcast<int>())));
		} else {
			VDR[(int) (rd)] = (RuntimeValue<double>) ((RuntimeValue<double>) ((RuntimeValue<long>) (((RuntimeValue<double>) (VDR[(int) (rn)])).Bitcast<long>())));
		}
		return true;
	}
unimplemented:
	return false;
}

/* SCVTF-vector */
bool Recompiler::SCVTF_vector(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 22) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto t = (string) (([=](auto temp_811) -> string { switch(temp_811) { case 0x0: return string("2S"); case 0x1: return string("4S"); case 0x3: return string("2D"); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))));
		auto n = ((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Store();
		VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<byte>) ((byte) ((byte) (0x0)))).CreateVector());
		switch((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))) {
			case 0x0: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<float>) ((RuntimeValue<float>) ((RuntimeValue<int>) ((n).Element<int>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<float>) ((RuntimeValue<float>) ((RuntimeValue<int>) ((n).Element<int>(0x1)))));
				break;
			}
			case 0x1: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<float>) ((RuntimeValue<float>) ((RuntimeValue<int>) ((n).Element<int>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<float>) ((RuntimeValue<float>) ((RuntimeValue<int>) ((n).Element<int>(0x1)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (RuntimeValue<float>) ((RuntimeValue<float>) ((RuntimeValue<int>) ((n).Element<int>(0x2)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (RuntimeValue<float>) ((RuntimeValue<float>) ((RuntimeValue<int>) ((n).Element<int>(0x3)))));
				break;
			}
			case 0x3: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<double>) ((RuntimeValue<double>) ((RuntimeValue<long>) ((n).Element<long>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<double>) ((RuntimeValue<double>) ((RuntimeValue<long>) ((n).Element<long>(0x1)))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* SDIV */
bool Recompiler::SDIV(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			auto operand2 = ((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))).Store();
			XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (Ternary<bool, uint>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((operand2) == (0x0))), (uint) ((uint) (0x0)), (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<float>) (((RuntimeValue<float>) (RuntimeValue<float>) ((RuntimeValue<float>) ((RuntimeValue<float>) ((RuntimeValue<int>) ((RuntimeValue<int>) ((RuntimeValue<uint>) ((rn) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rn]())))))))) / ((RuntimeValue<float>) (RuntimeValue<float>) ((RuntimeValue<float>) ((RuntimeValue<float>) ((RuntimeValue<int>) ((RuntimeValue<int>) (operand2))))))))))));
		} else {
			auto operand2 = ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())).Store();
			XR[(int) rd] = (RuntimeValue<ulong>) (Ternary<bool, ulong>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((operand2) == (0x0))), (ulong) ((ulong) (0x0)), (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<double>) (((RuntimeValue<double>) (RuntimeValue<double>) ((RuntimeValue<double>) ((RuntimeValue<double>) ((RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]()))))))) / ((RuntimeValue<double>) (RuntimeValue<double>) ((RuntimeValue<double>) ((RuntimeValue<double>) ((RuntimeValue<long>) ((RuntimeValue<long>) (operand2)))))))))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* SHL-vector */
bool Recompiler::SHL_vector(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto immh = (inst >> 19) & 0xFU;
		auto immb = (inst >> 16) & 0x7U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto T = string("");
		auto size = 0x0;
		auto shift = 0x0;
		if(!((bool) (((immh) != (0x0)) ? 1U : 0U)))
			goto unimplemented;
		if(((bool) (((immh) == (0x1)) ? 1U : 0U)) != 0) {
			T = (string) ((Q != 0) ? (string("16B")) : (string("8B")));
			size = 0x1;
			shift = (ulong) (((ulong) (uint) ((uint) ((uint) ((byte) ((byte) (((byte) (((byte) (immb)) << 0)) | ((byte) (((byte) (immh)) << 3)))))))) - ((ulong) (long) (0x8)));
		} else {
			if(((bool) ((((byte) ((((ulong) (immh)) & ((ulong) (0xE))))) == (0x2)) ? 1U : 0U)) != 0) {
				T = (string) ((Q != 0) ? (string("8H")) : (string("4H")));
				size = 0x2;
				shift = (ulong) (((ulong) (uint) ((uint) ((uint) ((byte) ((byte) (((byte) (((byte) (immb)) << 0)) | ((byte) (((byte) (immh)) << 3)))))))) - ((ulong) (long) (0x10)));
			} else {
				if(((bool) ((((byte) ((((ulong) (immh)) & ((ulong) (0xC))))) == (0x4)) ? 1U : 0U)) != 0) {
					T = (string) ((Q != 0) ? (string("4S")) : (string("2S")));
					size = 0x4;
					shift = (ulong) (((ulong) (uint) ((uint) ((uint) ((byte) ((byte) (((byte) (((byte) (immb)) << 0)) | ((byte) (((byte) (immh)) << 3)))))))) - ((ulong) (long) (0x20)));
				} else {
					T = (string) ((Q != 0) ? (string("2D")) : throw "Not implemented");
					size = 0x8;
					shift = (ulong) (((ulong) (uint) ((uint) ((uint) ((byte) ((byte) (((byte) (((byte) (immb)) << 0)) | ((byte) (((byte) (immh)) << 3)))))))) - ((ulong) (long) (0x20)));
				}
			}
		}
		auto sv = ((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Store();
		VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<byte>) ((byte) ((byte) (0x0)))).CreateVector());
		switch(size) {
			case 0x1: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimeValue<byte>) ((sv).Element<byte>(0x0))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimeValue<byte>) ((sv).Element<byte>(0x0))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimeValue<byte>) ((sv).Element<byte>(0x2))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimeValue<byte>) ((sv).Element<byte>(0x3))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimeValue<byte>) ((sv).Element<byte>(0x4))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimeValue<byte>) ((sv).Element<byte>(0x5))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimeValue<byte>) ((sv).Element<byte>(0x6))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimeValue<byte>) ((sv).Element<byte>(0x7))) << (shift)));
				if((Q) != 0) {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x8, (RuntimeValue<byte>) (((RuntimeValue<byte>) ((sv).Element<byte>(0x8))) << (shift)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x9, (RuntimeValue<byte>) (((RuntimeValue<byte>) ((sv).Element<byte>(0x9))) << (shift)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xA, (RuntimeValue<byte>) (((RuntimeValue<byte>) ((sv).Element<byte>(0xA))) << (shift)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xB, (RuntimeValue<byte>) (((RuntimeValue<byte>) ((sv).Element<byte>(0xB))) << (shift)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xC, (RuntimeValue<byte>) (((RuntimeValue<byte>) ((sv).Element<byte>(0xC))) << (shift)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xD, (RuntimeValue<byte>) (((RuntimeValue<byte>) ((sv).Element<byte>(0xD))) << (shift)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xE, (RuntimeValue<byte>) (((RuntimeValue<byte>) ((sv).Element<byte>(0xE))) << (shift)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xF, (RuntimeValue<byte>) (((RuntimeValue<byte>) ((sv).Element<byte>(0xF))) << (shift)));
				}
				break;
			}
			case 0x2: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimeValue<ushort>) ((sv).Element<ushort>(0x0))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimeValue<ushort>) ((sv).Element<ushort>(0x0))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimeValue<ushort>) ((sv).Element<ushort>(0x2))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimeValue<ushort>) ((sv).Element<ushort>(0x3))) << (shift)));
				if((Q) != 0) {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x4, (RuntimeValue<ushort>) (((RuntimeValue<ushort>) ((sv).Element<ushort>(0x4))) << (shift)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x5, (RuntimeValue<ushort>) (((RuntimeValue<ushort>) ((sv).Element<ushort>(0x5))) << (shift)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x6, (RuntimeValue<ushort>) (((RuntimeValue<ushort>) ((sv).Element<ushort>(0x6))) << (shift)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x7, (RuntimeValue<ushort>) (((RuntimeValue<ushort>) ((sv).Element<ushort>(0x7))) << (shift)));
				}
				break;
			}
			case 0x4: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<uint>) (((RuntimeValue<uint>) ((sv).Element<uint>(0x0))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<uint>) (((RuntimeValue<uint>) ((sv).Element<uint>(0x1))) << (shift)));
				if((Q) != 0) {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (RuntimeValue<uint>) (((RuntimeValue<uint>) ((sv).Element<uint>(0x2))) << (shift)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (RuntimeValue<uint>) (((RuntimeValue<uint>) ((sv).Element<uint>(0x3))) << (shift)));
				}
				break;
			}
			default: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((sv).Element<ulong>(0x0))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((sv).Element<ulong>(0x1))) << (shift)));
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* SMADDL */
bool Recompiler::SMADDL(uint inst, ulong pc) {
	{
		auto rm = (inst >> 16) & 0x1FU;
		auto ra = (inst >> 10) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		XR[(int) rd] = (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (((RuntimeValue<long>) (RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<ulong>) ((ra) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) ra]()))))) + ((RuntimeValue<long>) (RuntimeValue<long>) ((RuntimeValue<long>) (((RuntimeValue<long>) (RuntimeValue<long>) ((RuntimeValue<long>) (SignExtRuntime<long>((RuntimeValue<uint>) ((rn) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rn]())), 32)))) * ((RuntimeValue<long>) (RuntimeValue<long>) ((RuntimeValue<long>) (SignExtRuntime<long>((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]())), 32))))))))));
		return true;
	}
unimplemented:
	return false;
}

/* SMULH */
bool Recompiler::SMULH(uint inst, ulong pc) {
	{
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		XR[(int) rd] = (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<Int128>) (((RuntimeValue<Int128>) (((RuntimeValue<Int128>) (RuntimeValue<Int128>) ((RuntimeValue<Int128>) ((RuntimeValue<Int128>) ((RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]()))))))) * ((RuntimeValue<Int128>) (RuntimeValue<Int128>) ((RuntimeValue<Int128>) ((RuntimeValue<Int128>) ((RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]()))))))))) >> (0x40))))));
		return true;
	}
unimplemented:
	return false;
}

/* SSHLL */
bool Recompiler::SSHLL(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto immh = (inst >> 19) & 0xFU;
		auto immb = (inst >> 16) & 0x7U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto variant = (string) ((Q != 0) ? (string("2")) : (string("")));
		auto ta = string("");
		auto tb = string("");
		auto shift = (ulong) ((ulong) (0x0));
		if(((bool) (((immh) == (0x1)) ? 1U : 0U)) != 0) {
			ta = string("8H");
			tb = (string) ((Q != 0) ? (string("16B")) : (string("8B")));
			shift = (ulong) (((ulong) (byte) ((byte) ((byte) (((byte) (((byte) (immb)) << 0)) | ((byte) (((byte) (immh)) << 3)))))) - ((ulong) (long) (0x8)));
		} else {
			if(((bool) ((((byte) ((((ulong) (immh)) & ((ulong) (0xE))))) == (0x2)) ? 1U : 0U)) != 0) {
				ta = string("4S");
				tb = (string) ((Q != 0) ? (string("8H")) : (string("4H")));
				shift = (ulong) (((ulong) (byte) ((byte) ((byte) (((byte) (((byte) (immb)) << 0)) | ((byte) (((byte) (immh)) << 3)))))) - ((ulong) (long) (0x10)));
			} else {
				if(((bool) ((((byte) ((((ulong) (immh)) & ((ulong) (0xC))))) == (0x4)) ? 1U : 0U)) != 0) {
					ta = string("2D");
					tb = (string) ((Q != 0) ? (string("4S")) : (string("2S")));
					shift = (ulong) (((ulong) (byte) ((byte) ((byte) (((byte) (((byte) (immb)) << 0)) | ((byte) (((byte) (immh)) << 3)))))) - ((ulong) (long) (0x20)));
				} else {
					throw "Not implemented";
				}
			}
		}
		auto iv = ((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Store();
		VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<byte>) ((byte) ((byte) (0x0)))).CreateVector());
		if(((bool) (((immh) == (0x1)) ? 1U : 0U)) != 0) {
			VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<short>) (((RuntimeValue<short>) ((RuntimeValue<short>) ((RuntimeValue<sbyte>) ((iv).Element<sbyte>((uint) ((uint) ((long) ((Q != 0) ? ((long) (((long) (long) (0x0)) + ((long) (long) (0x8)))) : (0x0))))))))) << (shift)));
			VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<short>) (((RuntimeValue<short>) ((RuntimeValue<short>) ((RuntimeValue<sbyte>) ((iv).Element<sbyte>((uint) ((uint) ((long) ((Q != 0) ? ((long) (((long) (long) (0x1)) + ((long) (long) (0x8)))) : (0x1))))))))) << (shift)));
			VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (RuntimeValue<short>) (((RuntimeValue<short>) ((RuntimeValue<short>) ((RuntimeValue<sbyte>) ((iv).Element<sbyte>((uint) ((uint) ((long) ((Q != 0) ? ((long) (((long) (long) (0x2)) + ((long) (long) (0x8)))) : (0x2))))))))) << (shift)));
			VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (RuntimeValue<short>) (((RuntimeValue<short>) ((RuntimeValue<short>) ((RuntimeValue<sbyte>) ((iv).Element<sbyte>((uint) ((uint) ((long) ((Q != 0) ? ((long) (((long) (long) (0x3)) + ((long) (long) (0x8)))) : (0x3))))))))) << (shift)));
			VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x4, (RuntimeValue<short>) (((RuntimeValue<short>) ((RuntimeValue<short>) ((RuntimeValue<sbyte>) ((iv).Element<sbyte>((uint) ((uint) ((long) ((Q != 0) ? ((long) (((long) (long) (0x4)) + ((long) (long) (0x8)))) : (0x4))))))))) << (shift)));
			VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x5, (RuntimeValue<short>) (((RuntimeValue<short>) ((RuntimeValue<short>) ((RuntimeValue<sbyte>) ((iv).Element<sbyte>((uint) ((uint) ((long) ((Q != 0) ? ((long) (((long) (long) (0x5)) + ((long) (long) (0x8)))) : (0x5))))))))) << (shift)));
			VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x6, (RuntimeValue<short>) (((RuntimeValue<short>) ((RuntimeValue<short>) ((RuntimeValue<sbyte>) ((iv).Element<sbyte>((uint) ((uint) ((long) ((Q != 0) ? ((long) (((long) (long) (0x6)) + ((long) (long) (0x8)))) : (0x6))))))))) << (shift)));
			VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x7, (RuntimeValue<short>) (((RuntimeValue<short>) ((RuntimeValue<short>) ((RuntimeValue<sbyte>) ((iv).Element<sbyte>((uint) ((uint) ((long) ((Q != 0) ? ((long) (((long) (long) (0x7)) + ((long) (long) (0x8)))) : (0x7))))))))) << (shift)));
		} else {
			if(((bool) ((((byte) ((((ulong) (immh)) & ((ulong) (0xE))))) == (0x2)) ? 1U : 0U)) != 0) {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<int>) (((RuntimeValue<int>) ((RuntimeValue<int>) ((RuntimeValue<short>) ((iv).Element<short>((uint) ((uint) ((long) ((Q != 0) ? ((long) (((long) (long) (0x0)) + ((long) (long) (0x4)))) : (0x0))))))))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<int>) (((RuntimeValue<int>) ((RuntimeValue<int>) ((RuntimeValue<short>) ((iv).Element<short>((uint) ((uint) ((long) ((Q != 0) ? ((long) (((long) (long) (0x1)) + ((long) (long) (0x4)))) : (0x1))))))))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (RuntimeValue<int>) (((RuntimeValue<int>) ((RuntimeValue<int>) ((RuntimeValue<short>) ((iv).Element<short>((uint) ((uint) ((long) ((Q != 0) ? ((long) (((long) (long) (0x2)) + ((long) (long) (0x4)))) : (0x2))))))))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (RuntimeValue<int>) (((RuntimeValue<int>) ((RuntimeValue<int>) ((RuntimeValue<short>) ((iv).Element<short>((uint) ((uint) ((long) ((Q != 0) ? ((long) (((long) (long) (0x3)) + ((long) (long) (0x4)))) : (0x3))))))))) << (shift)));
			} else {
				if(((bool) ((((byte) ((((ulong) (immh)) & ((ulong) (0xC))))) == (0x4)) ? 1U : 0U)) != 0) {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<long>) (((RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<int>) ((iv).Element<int>((uint) ((uint) ((long) ((Q != 0) ? ((long) (((long) (long) (0x0)) + ((long) (long) (0x2)))) : (0x0))))))))) << (shift)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<long>) (((RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<int>) ((iv).Element<int>((uint) ((uint) ((long) ((Q != 0) ? ((long) (((long) (long) (0x1)) + ((long) (long) (0x2)))) : (0x1))))))))) << (shift)));
				} else {
					throw "Not implemented";
				}
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* ST1-single-no-offset */
bool Recompiler::ST1_single_no_offset(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto opc = (inst >> 14) & 0x3U;
		auto S = (inst >> 12) & 0x1U;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		if(!((bool) (((opc) != (0x3)) ? 1U : 0U)))
			goto unimplemented;
		auto t = (string) (((bool) (((opc) == (0x0)) ? 1U : 0U) != 0) ? (string("B")) : ((string) (((bool) ((((bool) ((bool) (((opc) == (0x1)) ? 1U : 0U))) & ((bool) ((bool) ((((byte) ((((ulong) (size)) & ((ulong) (0x1))))) == (0x0)) ? 1U : 0U))))) != 0) ? (string("H")) : ((string) (((bool) (((opc) == (0x2)) ? 1U : 0U) != 0) ? ((string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("S")) : ((string) (((bool) ((((bool) ((bool) (((size) == (0x1)) ? 1U : 0U))) & ((bool) ((bool) (((S) == (0x0)) ? 1U : 0U))))) != 0) ? (string("D")) : throw "Not implemented")))) : throw "Not implemented")))));
		auto index = (uint) (([=](auto temp_812) -> uint { switch(temp_812) { case 0x0: return (uint) ((uint) ((byte) ((byte) (((byte) (byte) (((byte) (((byte) (size)) << 0)) | ((byte) (((byte) (S)) << 2)))) | ((byte) (((byte) (Q)) << 3)))))); case 0x1: return (uint) (((uint) ((uint) ((byte) ((byte) (((byte) (byte) (((byte) (((byte) (size)) << 0)) | ((byte) (((byte) (S)) << 2)))) | ((byte) (((byte) (Q)) << 3))))))) >> (uint) (0x1)); case 0x2: return (uint) (((bool) ((((byte) ((((ulong) (size)) & ((ulong) (0x1))))) == (0x0)) ? 1U : 0U) != 0) ? ((uint) ((uint) ((byte) ((byte) (((byte) (((byte) (S)) << 0)) | ((byte) (((byte) (Q)) << 1))))))) : (Q)); default: throw "Not implemented"; } })(opc));
		auto address = ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		auto v = ((RuntimeValue<Vector128<float>>) (VR[(int) (rt)])).Store();
		switch(opc) {
			case 0x0: {
				((RuntimePointer<byte>) (address)).value((RuntimeValue<byte>) ((v).Element<byte>(index)));
				break;
			}
			case 0x1: {
				((RuntimePointer<ushort>) (address)).value((RuntimeValue<ushort>) ((v).Element<ushort>(index)));
				break;
			}
			case 0x2: {
				if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
					((RuntimePointer<float>) (address)).value((RuntimeValue<float>) ((v).Element<float>(index)));
				} else {
					((RuntimePointer<double>) (address)).value((RuntimeValue<double>) ((v).Element<double>(index)));
				}
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* ST2-multi-no-offset */
bool Recompiler::ST2_multi_no_offset(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto rt2 = (ulong) (((ulong) (ulong) ((ulong) (((ulong) (byte) (rt)) + ((ulong) (long) (0x1))))) % ((ulong) (long) (0x20)));
		auto T = (string) (([=](auto temp_813) -> string { switch(temp_813) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))));
		auto address = ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		auto a = ((RuntimeValue<Vector128<float>>) (VR[(int) (rt)])).Store();
		auto b = ((RuntimeValue<Vector128<float>>) (VR[(int) (rt2)])).Store();
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x0)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x0)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x1)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x1)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x2)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x5)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x2)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x3)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x7)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x3)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x4)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x9)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x4)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x5)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xB)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x5)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x6)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xD)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x6)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x7)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xF)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x7)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x8)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x11)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x8)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x9)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x13)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x9)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0xA)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x15)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0xA)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0xB)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x17)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0xB)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0xC)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x19)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0xC)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1A)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0xD)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1B)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0xD)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0xE)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1D)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0xE)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1E)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0xF)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1F)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0xF)));
				} else {
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x0)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x0)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x1)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x1)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x2)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x5)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x2)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x3)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x7)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x3)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x4)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x9)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x4)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x5)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xB)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x5)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x6)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xD)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x6)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x7)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xF)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x7)));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x0)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x0)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x1)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x1)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x2)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x2)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x3)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x3)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x4)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x4)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x5)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x5)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x6)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1A)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x6)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x7)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1E)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x7)));
				} else {
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x0)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x0)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x1)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x1)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x2)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x2)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x3)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x3)));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<float>) ((a).Element<float>(0x0)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value((RuntimeValue<float>) ((b).Element<float>(0x0)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<float>) ((a).Element<float>(0x1)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value((RuntimeValue<float>) ((b).Element<float>(0x1)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value((RuntimeValue<float>) ((a).Element<float>(0x2)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value((RuntimeValue<float>) ((b).Element<float>(0x2)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value((RuntimeValue<float>) ((a).Element<float>(0x3)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value((RuntimeValue<float>) ((b).Element<float>(0x3)));
				} else {
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<float>) ((a).Element<float>(0x0)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value((RuntimeValue<float>) ((b).Element<float>(0x0)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<float>) ((a).Element<float>(0x1)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value((RuntimeValue<float>) ((b).Element<float>(0x1)));
				}
				break;
			}
			default: {
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<double>) ((a).Element<double>(0x0)));
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<double>) ((b).Element<double>(0x0)));
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value((RuntimeValue<double>) ((a).Element<double>(0x1)));
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value((RuntimeValue<double>) ((b).Element<double>(0x1)));
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* ST2-multi-postindex-immediate */
bool Recompiler::ST2_multi_postindex_immediate(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto rt2 = (ulong) (((ulong) (ulong) ((ulong) (((ulong) (byte) (rt)) + ((ulong) (long) (0x1))))) % ((ulong) (long) (0x20)));
		auto imm = (byte) ((byte) ((long) ((Q != 0) ? (0x20) : (0x10))));
		if(!((bool) (((rm) == (0x1F)) ? 1U : 0U)))
			goto unimplemented;
		auto T = (string) (([=](auto temp_814) -> string { switch(temp_814) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))));
		auto address = ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		auto a = ((RuntimeValue<Vector128<float>>) (VR[(int) (rt)])).Store();
		auto b = ((RuntimeValue<Vector128<float>>) (VR[(int) (rt2)])).Store();
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x0)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x0)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x1)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x1)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x2)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x5)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x2)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x3)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x7)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x3)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x4)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x9)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x4)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x5)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xB)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x5)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x6)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xD)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x6)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x7)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xF)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x7)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x8)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x11)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x8)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x9)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x13)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x9)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0xA)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x15)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0xA)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0xB)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x17)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0xB)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0xC)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x19)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0xC)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1A)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0xD)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1B)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0xD)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0xE)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1D)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0xE)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1E)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0xF)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1F)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0xF)));
				} else {
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x0)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x0)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x1)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x1)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x2)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x5)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x2)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x3)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x7)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x3)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x4)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x9)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x4)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x5)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xB)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x5)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x6)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xD)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x6)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x7)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xF)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x7)));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x0)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x0)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x1)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x1)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x2)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x2)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x3)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x3)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x4)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x4)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x5)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x5)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x6)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1A)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x6)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x7)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1E)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x7)));
				} else {
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x0)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x0)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x1)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x1)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x2)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x2)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x3)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x3)));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<float>) ((a).Element<float>(0x0)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value((RuntimeValue<float>) ((b).Element<float>(0x0)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<float>) ((a).Element<float>(0x1)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value((RuntimeValue<float>) ((b).Element<float>(0x1)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value((RuntimeValue<float>) ((a).Element<float>(0x2)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value((RuntimeValue<float>) ((b).Element<float>(0x2)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value((RuntimeValue<float>) ((a).Element<float>(0x3)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value((RuntimeValue<float>) ((b).Element<float>(0x3)));
				} else {
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<float>) ((a).Element<float>(0x0)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value((RuntimeValue<float>) ((b).Element<float>(0x0)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<float>) ((a).Element<float>(0x1)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value((RuntimeValue<float>) ((b).Element<float>(0x1)));
				}
				break;
			}
			default: {
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<double>) ((a).Element<double>(0x0)));
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<double>) ((b).Element<double>(0x0)));
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value((RuntimeValue<double>) ((a).Element<double>(0x1)));
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value((RuntimeValue<double>) ((b).Element<double>(0x1)));
				break;
			}
		}
		if(rn == 31)
			SPR = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<byte>) (imm)));
		else
			XR[(int) rn] = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<byte>) (imm)));
		return true;
	}
unimplemented:
	return false;
}

/* ST2-multi-postindex-register */
bool Recompiler::ST2_multi_postindex_register(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto rt2 = (ulong) (((ulong) (ulong) ((ulong) (((ulong) (byte) (rt)) + ((ulong) (long) (0x1))))) % ((ulong) (long) (0x20)));
		if(!((bool) (((rm) != (0x1F)) ? 1U : 0U)))
			goto unimplemented;
		auto T = (string) (([=](auto temp_815) -> string { switch(temp_815) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))));
		auto address = ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		auto a = ((RuntimeValue<Vector128<float>>) (VR[(int) (rt)])).Store();
		auto b = ((RuntimeValue<Vector128<float>>) (VR[(int) (rt2)])).Store();
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x0)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x0)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x1)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x1)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x2)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x5)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x2)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x3)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x7)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x3)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x4)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x9)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x4)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x5)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xB)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x5)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x6)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xD)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x6)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x7)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xF)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x7)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x8)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x11)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x8)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x9)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x13)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x9)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0xA)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x15)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0xA)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0xB)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x17)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0xB)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0xC)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x19)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0xC)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1A)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0xD)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1B)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0xD)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0xE)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1D)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0xE)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1E)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0xF)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1F)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0xF)));
				} else {
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x0)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x0)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x1)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x1)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x2)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x5)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x2)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x3)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x7)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x3)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x4)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x9)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x4)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x5)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xB)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x5)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x6)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xD)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x6)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x7)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xF)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x7)));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x0)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x0)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x1)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x1)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x2)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x2)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x3)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x3)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x4)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x4)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x5)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x5)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x6)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1A)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x6)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x7)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1E)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x7)));
				} else {
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x0)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x0)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x1)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x1)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x2)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x2)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x3)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x3)));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<float>) ((a).Element<float>(0x0)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value((RuntimeValue<float>) ((b).Element<float>(0x0)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<float>) ((a).Element<float>(0x1)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value((RuntimeValue<float>) ((b).Element<float>(0x1)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value((RuntimeValue<float>) ((a).Element<float>(0x2)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value((RuntimeValue<float>) ((b).Element<float>(0x2)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value((RuntimeValue<float>) ((a).Element<float>(0x3)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value((RuntimeValue<float>) ((b).Element<float>(0x3)));
				} else {
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<float>) ((a).Element<float>(0x0)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value((RuntimeValue<float>) ((b).Element<float>(0x0)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<float>) ((a).Element<float>(0x1)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value((RuntimeValue<float>) ((b).Element<float>(0x1)));
				}
				break;
			}
			default: {
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<double>) ((a).Element<double>(0x0)));
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<double>) ((b).Element<double>(0x0)));
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value((RuntimeValue<double>) ((a).Element<double>(0x1)));
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value((RuntimeValue<double>) ((b).Element<double>(0x1)));
				break;
			}
		}
		if(rn == 31)
			SPR = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]()))));
		else
			XR[(int) rn] = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]()))));
		return true;
	}
unimplemented:
	return false;
}

/* ST3-multi-no-offset */
bool Recompiler::ST3_multi_no_offset(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto rt2 = (ulong) (((ulong) (ulong) ((ulong) (((ulong) (byte) (rt)) + ((ulong) (long) (0x1))))) % ((ulong) (long) (0x20)));
		auto rt3 = (ulong) (((ulong) (ulong) ((ulong) (((ulong) (byte) (rt)) + ((ulong) (long) (0x2))))) % ((ulong) (long) (0x20)));
		auto T = (string) (([=](auto temp_816) -> string { switch(temp_816) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))));
		auto address = ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		auto a = ((RuntimeValue<Vector128<float>>) (VR[(int) (rt)])).Store();
		auto b = ((RuntimeValue<Vector128<float>>) (VR[(int) (rt2)])).Store();
		auto c = ((RuntimeValue<Vector128<float>>) (VR[(int) (rt3)])).Store();
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x0)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x0)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x0)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x1)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x1)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x5)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x1)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x2)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x7)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x2)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x2)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x9)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x3)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x3)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xB)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x3)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x4)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xD)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x4)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x4)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xF)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x5)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x5)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x11)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x5)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x6)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x13)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x6)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x6)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x15)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x7)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x7)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x17)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x7)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x8)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x19)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x8)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1A)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x8)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1B)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x9)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x9)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1D)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x9)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1E)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0xA)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1F)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0xA)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x20)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0xA)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x21)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0xB)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x22)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0xB)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x23)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0xB)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x24)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0xC)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x25)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0xC)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x26)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0xC)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x27)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0xD)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x28)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0xD)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x29)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0xD)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2A)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0xE)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2B)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0xE)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2C)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0xE)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2D)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0xF)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2E)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0xF)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2F)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0xF)));
				} else {
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x0)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x0)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x0)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x1)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x1)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x5)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x1)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x2)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x7)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x2)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x2)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x9)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x3)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x3)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xB)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x3)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x4)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xD)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x4)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x4)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xF)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x5)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x5)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x11)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x5)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x6)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x13)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x6)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x6)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x15)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x7)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x7)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x17)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x7)));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x0)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x0)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x0)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x1)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x1)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x1)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x2)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x2)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x2)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x3)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x3)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x3)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x4)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1A)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x4)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x4)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1E)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x5)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x20)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x5)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x22)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x5)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x24)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x6)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x26)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x6)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x28)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x6)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2A)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x7)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2C)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x7)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2E)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x7)));
				} else {
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x0)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x0)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x0)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x1)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x1)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x1)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x2)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x2)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x2)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x3)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x3)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x3)));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<float>) ((a).Element<float>(0x0)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value((RuntimeValue<float>) ((b).Element<float>(0x0)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<float>) ((c).Element<float>(0x0)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value((RuntimeValue<float>) ((a).Element<float>(0x1)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value((RuntimeValue<float>) ((b).Element<float>(0x1)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value((RuntimeValue<float>) ((c).Element<float>(0x1)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value((RuntimeValue<float>) ((a).Element<float>(0x2)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value((RuntimeValue<float>) ((b).Element<float>(0x2)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x20)))))).value((RuntimeValue<float>) ((c).Element<float>(0x2)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x24)))))).value((RuntimeValue<float>) ((a).Element<float>(0x3)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x28)))))).value((RuntimeValue<float>) ((b).Element<float>(0x3)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2C)))))).value((RuntimeValue<float>) ((c).Element<float>(0x3)));
				} else {
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<float>) ((a).Element<float>(0x0)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value((RuntimeValue<float>) ((b).Element<float>(0x0)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<float>) ((c).Element<float>(0x0)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value((RuntimeValue<float>) ((a).Element<float>(0x1)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value((RuntimeValue<float>) ((b).Element<float>(0x1)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value((RuntimeValue<float>) ((c).Element<float>(0x1)));
				}
				break;
			}
			default: {
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<double>) ((a).Element<double>(0x0)));
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<double>) ((b).Element<double>(0x0)));
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value((RuntimeValue<double>) ((c).Element<double>(0x0)));
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value((RuntimeValue<double>) ((a).Element<double>(0x1)));
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x20)))))).value((RuntimeValue<double>) ((b).Element<double>(0x1)));
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x28)))))).value((RuntimeValue<double>) ((c).Element<double>(0x1)));
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* ST3-multi-postindex-immediate */
bool Recompiler::ST3_multi_postindex_immediate(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto rt2 = (ulong) (((ulong) (ulong) ((ulong) (((ulong) (byte) (rt)) + ((ulong) (long) (0x1))))) % ((ulong) (long) (0x20)));
		auto rt3 = (ulong) (((ulong) (ulong) ((ulong) (((ulong) (byte) (rt)) + ((ulong) (long) (0x2))))) % ((ulong) (long) (0x20)));
		auto imm = (byte) ((byte) ((long) ((Q != 0) ? (0x30) : (0x18))));
		if(!((bool) (((rm) == (0x1F)) ? 1U : 0U)))
			goto unimplemented;
		auto T = (string) (([=](auto temp_817) -> string { switch(temp_817) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))));
		auto address = ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		auto a = ((RuntimeValue<Vector128<float>>) (VR[(int) (rt)])).Store();
		auto b = ((RuntimeValue<Vector128<float>>) (VR[(int) (rt2)])).Store();
		auto c = ((RuntimeValue<Vector128<float>>) (VR[(int) (rt3)])).Store();
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x0)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x0)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x0)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x1)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x1)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x5)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x1)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x2)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x7)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x2)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x2)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x9)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x3)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x3)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xB)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x3)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x4)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xD)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x4)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x4)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xF)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x5)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x5)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x11)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x5)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x6)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x13)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x6)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x6)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x15)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x7)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x7)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x17)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x7)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x8)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x19)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x8)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1A)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x8)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1B)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x9)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x9)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1D)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x9)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1E)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0xA)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1F)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0xA)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x20)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0xA)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x21)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0xB)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x22)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0xB)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x23)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0xB)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x24)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0xC)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x25)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0xC)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x26)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0xC)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x27)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0xD)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x28)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0xD)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x29)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0xD)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2A)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0xE)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2B)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0xE)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2C)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0xE)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2D)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0xF)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2E)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0xF)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2F)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0xF)));
				} else {
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x0)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x0)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x0)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x1)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x1)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x5)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x1)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x2)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x7)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x2)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x2)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x9)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x3)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x3)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xB)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x3)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x4)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xD)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x4)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x4)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xF)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x5)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x5)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x11)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x5)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x6)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x13)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x6)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x6)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x15)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x7)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x7)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x17)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x7)));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x0)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x0)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x0)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x1)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x1)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x1)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x2)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x2)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x2)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x3)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x3)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x3)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x4)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1A)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x4)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x4)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1E)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x5)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x20)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x5)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x22)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x5)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x24)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x6)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x26)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x6)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x28)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x6)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2A)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x7)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2C)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x7)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2E)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x7)));
				} else {
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x0)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x0)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x0)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x1)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x1)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x1)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x2)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x2)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x2)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x3)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x3)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x3)));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<float>) ((a).Element<float>(0x0)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value((RuntimeValue<float>) ((b).Element<float>(0x0)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<float>) ((c).Element<float>(0x0)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value((RuntimeValue<float>) ((a).Element<float>(0x1)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value((RuntimeValue<float>) ((b).Element<float>(0x1)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value((RuntimeValue<float>) ((c).Element<float>(0x1)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value((RuntimeValue<float>) ((a).Element<float>(0x2)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value((RuntimeValue<float>) ((b).Element<float>(0x2)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x20)))))).value((RuntimeValue<float>) ((c).Element<float>(0x2)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x24)))))).value((RuntimeValue<float>) ((a).Element<float>(0x3)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x28)))))).value((RuntimeValue<float>) ((b).Element<float>(0x3)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2C)))))).value((RuntimeValue<float>) ((c).Element<float>(0x3)));
				} else {
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<float>) ((a).Element<float>(0x0)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value((RuntimeValue<float>) ((b).Element<float>(0x0)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<float>) ((c).Element<float>(0x0)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value((RuntimeValue<float>) ((a).Element<float>(0x1)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value((RuntimeValue<float>) ((b).Element<float>(0x1)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value((RuntimeValue<float>) ((c).Element<float>(0x1)));
				}
				break;
			}
			default: {
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<double>) ((a).Element<double>(0x0)));
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<double>) ((b).Element<double>(0x0)));
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value((RuntimeValue<double>) ((c).Element<double>(0x0)));
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value((RuntimeValue<double>) ((a).Element<double>(0x1)));
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x20)))))).value((RuntimeValue<double>) ((b).Element<double>(0x1)));
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x28)))))).value((RuntimeValue<double>) ((c).Element<double>(0x1)));
				break;
			}
		}
		if(rn == 31)
			SPR = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<byte>) (imm)));
		else
			XR[(int) rn] = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<byte>) (imm)));
		return true;
	}
unimplemented:
	return false;
}

/* ST3-multi-postindex-register */
bool Recompiler::ST3_multi_postindex_register(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto rt2 = (ulong) (((ulong) (ulong) ((ulong) (((ulong) (byte) (rt)) + ((ulong) (long) (0x1))))) % ((ulong) (long) (0x20)));
		auto rt3 = (ulong) (((ulong) (ulong) ((ulong) (((ulong) (byte) (rt)) + ((ulong) (long) (0x2))))) % ((ulong) (long) (0x20)));
		if(!((bool) (((rm) != (0x1F)) ? 1U : 0U)))
			goto unimplemented;
		auto T = (string) (([=](auto temp_818) -> string { switch(temp_818) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))));
		auto address = ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		auto a = ((RuntimeValue<Vector128<float>>) (VR[(int) (rt)])).Store();
		auto b = ((RuntimeValue<Vector128<float>>) (VR[(int) (rt2)])).Store();
		auto c = ((RuntimeValue<Vector128<float>>) (VR[(int) (rt3)])).Store();
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x0)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x0)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x0)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x1)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x1)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x5)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x1)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x2)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x7)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x2)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x2)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x9)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x3)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x3)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xB)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x3)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x4)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xD)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x4)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x4)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xF)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x5)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x5)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x11)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x5)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x6)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x13)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x6)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x6)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x15)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x7)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x7)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x17)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x7)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x8)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x19)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x8)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1A)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x8)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1B)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x9)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x9)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1D)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x9)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1E)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0xA)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1F)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0xA)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x20)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0xA)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x21)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0xB)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x22)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0xB)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x23)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0xB)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x24)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0xC)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x25)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0xC)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x26)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0xC)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x27)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0xD)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x28)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0xD)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x29)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0xD)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2A)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0xE)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2B)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0xE)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2C)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0xE)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2D)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0xF)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2E)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0xF)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2F)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0xF)));
				} else {
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x0)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x0)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x0)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x1)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x1)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x5)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x1)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x2)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x7)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x2)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x2)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x9)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x3)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x3)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xB)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x3)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x4)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xD)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x4)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x4)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xF)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x5)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x5)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x11)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x5)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x6)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x13)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x6)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x6)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x15)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x7)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x7)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x17)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x7)));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x0)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x0)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x0)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x1)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x1)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x1)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x2)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x2)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x2)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x3)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x3)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x3)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x4)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1A)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x4)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x4)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1E)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x5)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x20)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x5)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x22)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x5)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x24)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x6)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x26)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x6)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x28)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x6)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2A)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x7)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2C)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x7)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2E)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x7)));
				} else {
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x0)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x0)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x0)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x1)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x1)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x1)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x2)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x2)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x2)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x3)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x3)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x3)));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<float>) ((a).Element<float>(0x0)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value((RuntimeValue<float>) ((b).Element<float>(0x0)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<float>) ((c).Element<float>(0x0)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value((RuntimeValue<float>) ((a).Element<float>(0x1)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value((RuntimeValue<float>) ((b).Element<float>(0x1)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value((RuntimeValue<float>) ((c).Element<float>(0x1)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value((RuntimeValue<float>) ((a).Element<float>(0x2)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value((RuntimeValue<float>) ((b).Element<float>(0x2)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x20)))))).value((RuntimeValue<float>) ((c).Element<float>(0x2)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x24)))))).value((RuntimeValue<float>) ((a).Element<float>(0x3)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x28)))))).value((RuntimeValue<float>) ((b).Element<float>(0x3)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2C)))))).value((RuntimeValue<float>) ((c).Element<float>(0x3)));
				} else {
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<float>) ((a).Element<float>(0x0)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value((RuntimeValue<float>) ((b).Element<float>(0x0)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<float>) ((c).Element<float>(0x0)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value((RuntimeValue<float>) ((a).Element<float>(0x1)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value((RuntimeValue<float>) ((b).Element<float>(0x1)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value((RuntimeValue<float>) ((c).Element<float>(0x1)));
				}
				break;
			}
			default: {
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<double>) ((a).Element<double>(0x0)));
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<double>) ((b).Element<double>(0x0)));
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value((RuntimeValue<double>) ((c).Element<double>(0x0)));
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value((RuntimeValue<double>) ((a).Element<double>(0x1)));
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x20)))))).value((RuntimeValue<double>) ((b).Element<double>(0x1)));
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x28)))))).value((RuntimeValue<double>) ((c).Element<double>(0x1)));
				break;
			}
		}
		if(rn == 31)
			SPR = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]()))));
		else
			XR[(int) rn] = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]()))));
		return true;
	}
unimplemented:
	return false;
}

/* ST4-multi-no-offset */
bool Recompiler::ST4_multi_no_offset(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto rt2 = (ulong) (((ulong) (ulong) ((ulong) (((ulong) (byte) (rt)) + ((ulong) (long) (0x1))))) % ((ulong) (long) (0x20)));
		auto rt3 = (ulong) (((ulong) (ulong) ((ulong) (((ulong) (byte) (rt)) + ((ulong) (long) (0x2))))) % ((ulong) (long) (0x20)));
		auto rt4 = (ulong) (((ulong) (ulong) ((ulong) (((ulong) (byte) (rt)) + ((ulong) (long) (0x3))))) % ((ulong) (long) (0x20)));
		auto T = (string) (([=](auto temp_819) -> string { switch(temp_819) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))));
		auto address = ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		auto a = ((RuntimeValue<Vector128<float>>) (VR[(int) (rt)])).Store();
		auto b = ((RuntimeValue<Vector128<float>>) (VR[(int) (rt2)])).Store();
		auto c = ((RuntimeValue<Vector128<float>>) (VR[(int) (rt3)])).Store();
		auto d = ((RuntimeValue<Vector128<float>>) (VR[(int) (rt4)])).Store();
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x0)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x0)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x0)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0x0)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x1)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x5)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x1)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x1)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x7)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0x1)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x2)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x9)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x2)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x2)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xB)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0x2)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x3)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xD)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x3)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x3)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xF)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0x3)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x4)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x11)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x4)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x4)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x13)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0x4)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x5)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x15)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x5)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x5)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x17)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0x5)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x6)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x19)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x6)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1A)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x6)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1B)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0x6)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x7)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1D)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x7)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1E)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x7)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1F)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0x7)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x20)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x8)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x21)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x8)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x22)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x8)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x23)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0x8)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x24)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x9)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x25)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x9)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x26)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x9)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x27)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0x9)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x28)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0xA)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x29)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0xA)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2A)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0xA)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2B)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0xA)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2C)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0xB)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2D)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0xB)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2E)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0xB)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2F)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0xB)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x30)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0xC)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x31)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0xC)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x32)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0xC)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x33)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0xC)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x34)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0xD)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x35)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0xD)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x36)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0xD)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x37)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0xD)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x38)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0xE)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x39)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0xE)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3A)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0xE)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3B)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0xE)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3C)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0xF)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3D)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0xF)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3E)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0xF)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3F)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0xF)));
				} else {
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x0)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x0)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x0)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0x0)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x1)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x5)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x1)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x1)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x7)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0x1)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x2)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x9)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x2)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x2)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xB)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0x2)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x3)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xD)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x3)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x3)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xF)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0x3)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x4)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x11)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x4)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x4)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x13)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0x4)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x5)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x15)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x5)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x5)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x17)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0x5)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x6)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x19)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x6)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1A)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x6)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1B)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0x6)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x7)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1D)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x7)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1E)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x7)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1F)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0x7)));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x0)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x0)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x0)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value((RuntimeValue<ushort>) ((d).Element<ushort>(0x0)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x1)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x1)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x1)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value((RuntimeValue<ushort>) ((d).Element<ushort>(0x1)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x2)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x2)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x2)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value((RuntimeValue<ushort>) ((d).Element<ushort>(0x2)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x3)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1A)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x3)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x3)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1E)))))).value((RuntimeValue<ushort>) ((d).Element<ushort>(0x3)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x20)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x4)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x22)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x4)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x24)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x4)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x26)))))).value((RuntimeValue<ushort>) ((d).Element<ushort>(0x4)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x28)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x5)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2A)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x5)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2C)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x5)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2E)))))).value((RuntimeValue<ushort>) ((d).Element<ushort>(0x5)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x30)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x6)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x32)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x6)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x34)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x6)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x36)))))).value((RuntimeValue<ushort>) ((d).Element<ushort>(0x6)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x38)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x7)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3A)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x7)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3C)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x7)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3E)))))).value((RuntimeValue<ushort>) ((d).Element<ushort>(0x7)));
				} else {
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x0)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x0)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x0)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value((RuntimeValue<ushort>) ((d).Element<ushort>(0x0)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x1)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x1)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x1)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value((RuntimeValue<ushort>) ((d).Element<ushort>(0x1)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x2)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x2)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x2)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value((RuntimeValue<ushort>) ((d).Element<ushort>(0x2)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x3)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1A)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x3)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x3)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1E)))))).value((RuntimeValue<ushort>) ((d).Element<ushort>(0x3)));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<float>) ((a).Element<float>(0x0)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value((RuntimeValue<float>) ((b).Element<float>(0x0)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<float>) ((c).Element<float>(0x0)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value((RuntimeValue<float>) ((d).Element<float>(0x0)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value((RuntimeValue<float>) ((a).Element<float>(0x1)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value((RuntimeValue<float>) ((b).Element<float>(0x1)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value((RuntimeValue<float>) ((c).Element<float>(0x1)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value((RuntimeValue<float>) ((d).Element<float>(0x1)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x20)))))).value((RuntimeValue<float>) ((a).Element<float>(0x2)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x24)))))).value((RuntimeValue<float>) ((b).Element<float>(0x2)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x28)))))).value((RuntimeValue<float>) ((c).Element<float>(0x2)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2C)))))).value((RuntimeValue<float>) ((d).Element<float>(0x2)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x30)))))).value((RuntimeValue<float>) ((a).Element<float>(0x3)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x34)))))).value((RuntimeValue<float>) ((b).Element<float>(0x3)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x38)))))).value((RuntimeValue<float>) ((c).Element<float>(0x3)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3C)))))).value((RuntimeValue<float>) ((d).Element<float>(0x3)));
				} else {
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<float>) ((a).Element<float>(0x0)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value((RuntimeValue<float>) ((b).Element<float>(0x0)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<float>) ((c).Element<float>(0x0)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value((RuntimeValue<float>) ((d).Element<float>(0x0)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value((RuntimeValue<float>) ((a).Element<float>(0x1)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value((RuntimeValue<float>) ((b).Element<float>(0x1)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value((RuntimeValue<float>) ((c).Element<float>(0x1)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value((RuntimeValue<float>) ((d).Element<float>(0x1)));
				}
				break;
			}
			default: {
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<double>) ((a).Element<double>(0x0)));
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<double>) ((b).Element<double>(0x0)));
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value((RuntimeValue<double>) ((c).Element<double>(0x0)));
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value((RuntimeValue<double>) ((d).Element<double>(0x0)));
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x20)))))).value((RuntimeValue<double>) ((a).Element<double>(0x1)));
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x28)))))).value((RuntimeValue<double>) ((b).Element<double>(0x1)));
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x30)))))).value((RuntimeValue<double>) ((c).Element<double>(0x1)));
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x38)))))).value((RuntimeValue<double>) ((d).Element<double>(0x1)));
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* ST4-multi-postindex-immediate */
bool Recompiler::ST4_multi_postindex_immediate(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto rt2 = (ulong) (((ulong) (ulong) ((ulong) (((ulong) (byte) (rt)) + ((ulong) (long) (0x1))))) % ((ulong) (long) (0x20)));
		auto rt3 = (ulong) (((ulong) (ulong) ((ulong) (((ulong) (byte) (rt)) + ((ulong) (long) (0x2))))) % ((ulong) (long) (0x20)));
		auto rt4 = (ulong) (((ulong) (ulong) ((ulong) (((ulong) (byte) (rt)) + ((ulong) (long) (0x3))))) % ((ulong) (long) (0x20)));
		auto imm = (byte) ((byte) ((long) ((Q != 0) ? (0x40) : (0x2B))));
		if(!((bool) (((rm) == (0x1F)) ? 1U : 0U)))
			goto unimplemented;
		auto T = (string) (([=](auto temp_820) -> string { switch(temp_820) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))));
		auto address = ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		auto a = ((RuntimeValue<Vector128<float>>) (VR[(int) (rt)])).Store();
		auto b = ((RuntimeValue<Vector128<float>>) (VR[(int) (rt2)])).Store();
		auto c = ((RuntimeValue<Vector128<float>>) (VR[(int) (rt3)])).Store();
		auto d = ((RuntimeValue<Vector128<float>>) (VR[(int) (rt4)])).Store();
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x0)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x0)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x0)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0x0)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x1)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x5)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x1)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x1)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x7)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0x1)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x2)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x9)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x2)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x2)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xB)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0x2)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x3)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xD)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x3)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x3)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xF)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0x3)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x4)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x11)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x4)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x4)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x13)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0x4)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x5)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x15)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x5)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x5)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x17)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0x5)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x6)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x19)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x6)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1A)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x6)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1B)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0x6)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x7)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1D)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x7)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1E)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x7)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1F)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0x7)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x20)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x8)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x21)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x8)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x22)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x8)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x23)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0x8)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x24)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x9)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x25)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x9)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x26)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x9)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x27)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0x9)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x28)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0xA)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x29)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0xA)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2A)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0xA)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2B)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0xA)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2C)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0xB)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2D)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0xB)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2E)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0xB)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2F)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0xB)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x30)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0xC)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x31)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0xC)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x32)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0xC)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x33)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0xC)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x34)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0xD)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x35)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0xD)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x36)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0xD)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x37)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0xD)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x38)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0xE)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x39)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0xE)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3A)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0xE)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3B)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0xE)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3C)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0xF)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3D)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0xF)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3E)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0xF)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3F)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0xF)));
				} else {
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x0)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x0)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x0)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0x0)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x1)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x5)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x1)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x1)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x7)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0x1)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x2)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x9)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x2)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x2)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xB)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0x2)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x3)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xD)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x3)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x3)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xF)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0x3)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x4)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x11)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x4)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x4)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x13)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0x4)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x5)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x15)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x5)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x5)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x17)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0x5)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x6)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x19)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x6)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1A)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x6)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1B)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0x6)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x7)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1D)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x7)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1E)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x7)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1F)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0x7)));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x0)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x0)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x0)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value((RuntimeValue<ushort>) ((d).Element<ushort>(0x0)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x1)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x1)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x1)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value((RuntimeValue<ushort>) ((d).Element<ushort>(0x1)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x2)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x2)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x2)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value((RuntimeValue<ushort>) ((d).Element<ushort>(0x2)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x3)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1A)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x3)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x3)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1E)))))).value((RuntimeValue<ushort>) ((d).Element<ushort>(0x3)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x20)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x4)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x22)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x4)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x24)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x4)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x26)))))).value((RuntimeValue<ushort>) ((d).Element<ushort>(0x4)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x28)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x5)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2A)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x5)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2C)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x5)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2E)))))).value((RuntimeValue<ushort>) ((d).Element<ushort>(0x5)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x30)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x6)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x32)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x6)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x34)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x6)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x36)))))).value((RuntimeValue<ushort>) ((d).Element<ushort>(0x6)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x38)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x7)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3A)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x7)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3C)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x7)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3E)))))).value((RuntimeValue<ushort>) ((d).Element<ushort>(0x7)));
				} else {
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x0)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x0)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x0)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value((RuntimeValue<ushort>) ((d).Element<ushort>(0x0)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x1)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x1)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x1)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value((RuntimeValue<ushort>) ((d).Element<ushort>(0x1)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x2)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x2)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x2)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value((RuntimeValue<ushort>) ((d).Element<ushort>(0x2)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x3)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1A)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x3)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x3)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1E)))))).value((RuntimeValue<ushort>) ((d).Element<ushort>(0x3)));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<float>) ((a).Element<float>(0x0)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value((RuntimeValue<float>) ((b).Element<float>(0x0)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<float>) ((c).Element<float>(0x0)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value((RuntimeValue<float>) ((d).Element<float>(0x0)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value((RuntimeValue<float>) ((a).Element<float>(0x1)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value((RuntimeValue<float>) ((b).Element<float>(0x1)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value((RuntimeValue<float>) ((c).Element<float>(0x1)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value((RuntimeValue<float>) ((d).Element<float>(0x1)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x20)))))).value((RuntimeValue<float>) ((a).Element<float>(0x2)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x24)))))).value((RuntimeValue<float>) ((b).Element<float>(0x2)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x28)))))).value((RuntimeValue<float>) ((c).Element<float>(0x2)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2C)))))).value((RuntimeValue<float>) ((d).Element<float>(0x2)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x30)))))).value((RuntimeValue<float>) ((a).Element<float>(0x3)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x34)))))).value((RuntimeValue<float>) ((b).Element<float>(0x3)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x38)))))).value((RuntimeValue<float>) ((c).Element<float>(0x3)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3C)))))).value((RuntimeValue<float>) ((d).Element<float>(0x3)));
				} else {
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<float>) ((a).Element<float>(0x0)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value((RuntimeValue<float>) ((b).Element<float>(0x0)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<float>) ((c).Element<float>(0x0)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value((RuntimeValue<float>) ((d).Element<float>(0x0)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value((RuntimeValue<float>) ((a).Element<float>(0x1)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value((RuntimeValue<float>) ((b).Element<float>(0x1)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value((RuntimeValue<float>) ((c).Element<float>(0x1)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value((RuntimeValue<float>) ((d).Element<float>(0x1)));
				}
				break;
			}
			default: {
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<double>) ((a).Element<double>(0x0)));
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<double>) ((b).Element<double>(0x0)));
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value((RuntimeValue<double>) ((c).Element<double>(0x0)));
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value((RuntimeValue<double>) ((d).Element<double>(0x0)));
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x20)))))).value((RuntimeValue<double>) ((a).Element<double>(0x1)));
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x28)))))).value((RuntimeValue<double>) ((b).Element<double>(0x1)));
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x30)))))).value((RuntimeValue<double>) ((c).Element<double>(0x1)));
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x38)))))).value((RuntimeValue<double>) ((d).Element<double>(0x1)));
				break;
			}
		}
		if(rn == 31)
			SPR = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<byte>) (imm)));
		else
			XR[(int) rn] = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<byte>) (imm)));
		return true;
	}
unimplemented:
	return false;
}

/* ST4-multi-postindex-register */
bool Recompiler::ST4_multi_postindex_register(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto rt2 = (ulong) (((ulong) (ulong) ((ulong) (((ulong) (byte) (rt)) + ((ulong) (long) (0x1))))) % ((ulong) (long) (0x20)));
		auto rt3 = (ulong) (((ulong) (ulong) ((ulong) (((ulong) (byte) (rt)) + ((ulong) (long) (0x2))))) % ((ulong) (long) (0x20)));
		auto rt4 = (ulong) (((ulong) (ulong) ((ulong) (((ulong) (byte) (rt)) + ((ulong) (long) (0x3))))) % ((ulong) (long) (0x20)));
		if(!((bool) (((rm) != (0x1F)) ? 1U : 0U)))
			goto unimplemented;
		auto T = (string) (([=](auto temp_821) -> string { switch(temp_821) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))));
		auto address = ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		auto a = ((RuntimeValue<Vector128<float>>) (VR[(int) (rt)])).Store();
		auto b = ((RuntimeValue<Vector128<float>>) (VR[(int) (rt2)])).Store();
		auto c = ((RuntimeValue<Vector128<float>>) (VR[(int) (rt3)])).Store();
		auto d = ((RuntimeValue<Vector128<float>>) (VR[(int) (rt4)])).Store();
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x0)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x0)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x0)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0x0)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x1)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x5)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x1)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x1)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x7)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0x1)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x2)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x9)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x2)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x2)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xB)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0x2)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x3)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xD)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x3)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x3)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xF)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0x3)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x4)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x11)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x4)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x4)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x13)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0x4)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x5)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x15)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x5)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x5)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x17)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0x5)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x6)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x19)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x6)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1A)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x6)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1B)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0x6)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x7)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1D)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x7)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1E)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x7)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1F)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0x7)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x20)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x8)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x21)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x8)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x22)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x8)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x23)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0x8)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x24)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x9)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x25)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x9)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x26)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x9)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x27)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0x9)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x28)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0xA)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x29)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0xA)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2A)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0xA)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2B)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0xA)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2C)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0xB)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2D)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0xB)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2E)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0xB)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2F)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0xB)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x30)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0xC)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x31)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0xC)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x32)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0xC)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x33)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0xC)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x34)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0xD)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x35)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0xD)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x36)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0xD)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x37)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0xD)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x38)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0xE)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x39)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0xE)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3A)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0xE)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3B)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0xE)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3C)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0xF)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3D)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0xF)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3E)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0xF)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3F)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0xF)));
				} else {
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x0)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x0)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x0)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0x0)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x1)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x5)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x1)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x1)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x7)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0x1)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x2)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x9)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x2)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x2)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xB)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0x2)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x3)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xD)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x3)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x3)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xF)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0x3)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x4)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x11)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x4)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x4)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x13)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0x4)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x5)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x15)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x5)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x5)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x17)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0x5)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x6)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x19)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x6)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1A)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x6)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1B)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0x6)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value((RuntimeValue<byte>) ((a).Element<byte>(0x7)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1D)))))).value((RuntimeValue<byte>) ((b).Element<byte>(0x7)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1E)))))).value((RuntimeValue<byte>) ((c).Element<byte>(0x7)));
					((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1F)))))).value((RuntimeValue<byte>) ((d).Element<byte>(0x7)));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x0)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x0)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x0)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value((RuntimeValue<ushort>) ((d).Element<ushort>(0x0)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x1)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x1)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x1)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value((RuntimeValue<ushort>) ((d).Element<ushort>(0x1)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x2)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x2)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x2)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value((RuntimeValue<ushort>) ((d).Element<ushort>(0x2)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x3)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1A)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x3)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x3)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1E)))))).value((RuntimeValue<ushort>) ((d).Element<ushort>(0x3)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x20)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x4)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x22)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x4)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x24)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x4)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x26)))))).value((RuntimeValue<ushort>) ((d).Element<ushort>(0x4)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x28)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x5)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2A)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x5)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2C)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x5)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2E)))))).value((RuntimeValue<ushort>) ((d).Element<ushort>(0x5)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x30)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x6)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x32)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x6)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x34)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x6)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x36)))))).value((RuntimeValue<ushort>) ((d).Element<ushort>(0x6)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x38)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x7)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3A)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x7)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3C)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x7)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3E)))))).value((RuntimeValue<ushort>) ((d).Element<ushort>(0x7)));
				} else {
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x0)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x0)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x0)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x6)))))).value((RuntimeValue<ushort>) ((d).Element<ushort>(0x0)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x1)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xA)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x1)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x1)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xE)))))).value((RuntimeValue<ushort>) ((d).Element<ushort>(0x1)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x2)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x12)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x2)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x2)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x16)))))).value((RuntimeValue<ushort>) ((d).Element<ushort>(0x2)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value((RuntimeValue<ushort>) ((a).Element<ushort>(0x3)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1A)))))).value((RuntimeValue<ushort>) ((b).Element<ushort>(0x3)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value((RuntimeValue<ushort>) ((c).Element<ushort>(0x3)));
					((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1E)))))).value((RuntimeValue<ushort>) ((d).Element<ushort>(0x3)));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<float>) ((a).Element<float>(0x0)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value((RuntimeValue<float>) ((b).Element<float>(0x0)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<float>) ((c).Element<float>(0x0)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value((RuntimeValue<float>) ((d).Element<float>(0x0)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value((RuntimeValue<float>) ((a).Element<float>(0x1)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value((RuntimeValue<float>) ((b).Element<float>(0x1)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value((RuntimeValue<float>) ((c).Element<float>(0x1)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value((RuntimeValue<float>) ((d).Element<float>(0x1)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x20)))))).value((RuntimeValue<float>) ((a).Element<float>(0x2)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x24)))))).value((RuntimeValue<float>) ((b).Element<float>(0x2)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x28)))))).value((RuntimeValue<float>) ((c).Element<float>(0x2)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x2C)))))).value((RuntimeValue<float>) ((d).Element<float>(0x2)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x30)))))).value((RuntimeValue<float>) ((a).Element<float>(0x3)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x34)))))).value((RuntimeValue<float>) ((b).Element<float>(0x3)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x38)))))).value((RuntimeValue<float>) ((c).Element<float>(0x3)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x3C)))))).value((RuntimeValue<float>) ((d).Element<float>(0x3)));
				} else {
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<float>) ((a).Element<float>(0x0)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x4)))))).value((RuntimeValue<float>) ((b).Element<float>(0x0)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<float>) ((c).Element<float>(0x0)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0xC)))))).value((RuntimeValue<float>) ((d).Element<float>(0x0)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value((RuntimeValue<float>) ((a).Element<float>(0x1)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x14)))))).value((RuntimeValue<float>) ((b).Element<float>(0x1)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value((RuntimeValue<float>) ((c).Element<float>(0x1)));
					((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x1C)))))).value((RuntimeValue<float>) ((d).Element<float>(0x1)));
				}
				break;
			}
			default: {
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x0)))))).value((RuntimeValue<double>) ((a).Element<double>(0x0)));
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x8)))))).value((RuntimeValue<double>) ((b).Element<double>(0x0)));
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x10)))))).value((RuntimeValue<double>) ((c).Element<double>(0x0)));
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x18)))))).value((RuntimeValue<double>) ((d).Element<double>(0x0)));
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x20)))))).value((RuntimeValue<double>) ((a).Element<double>(0x1)));
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x28)))))).value((RuntimeValue<double>) ((b).Element<double>(0x1)));
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x30)))))).value((RuntimeValue<double>) ((c).Element<double>(0x1)));
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) ((long) (0x38)))))).value((RuntimeValue<double>) ((d).Element<double>(0x1)));
				break;
			}
		}
		if(rn == 31)
			SPR = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]()))));
		else
			XR[(int) rn] = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]()))));
		return true;
	}
unimplemented:
	return false;
}

/* STLR */
bool Recompiler::STLR(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			((RuntimePointer<uint>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))).value((RuntimeValue<uint>) ((rt) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rt]())));
		} else {
			((RuntimePointer<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))).value((RuntimeValue<ulong>) ((rt) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rt]()));
		}
		return true;
	}
unimplemented:
	return false;
}

/* STLRB */
bool Recompiler::STLRB(uint inst, ulong pc) {
	{
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto address = ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		((RuntimePointer<byte>) (address)).value((RuntimeValue<byte>) ((RuntimeValue<byte>) ((RuntimeValue<uint>) ((rt) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rt]())))));
		return true;
	}
unimplemented:
	return false;
}

/* STLRH */
bool Recompiler::STLRH(uint inst, ulong pc) {
	{
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto address = ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		((RuntimePointer<ushort>) (address)).value((RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((RuntimeValue<uint>) ((rt) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rt]())))));
		return true;
	}
unimplemented:
	return false;
}

/* STLXR */
bool Recompiler::STLXR(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x1U;
		auto rs = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto address = ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			((RuntimePointer<uint>) (address)).value((RuntimeValue<uint>) ((rt) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rt]())));
		} else {
			((RuntimePointer<ulong>) (address)).value((RuntimeValue<ulong>) ((rt) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rt]()));
		}
		XR[(int) rs] = (RuntimeValue<ulong>) (RuntimeValue<uint>) (0x0);
		return true;
	}
unimplemented:
	return false;
}

/* STLXRB */
bool Recompiler::STLXRB(uint inst, ulong pc) {
	{
		auto rs = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto address = ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		((RuntimePointer<byte>) (address)).value((RuntimeValue<byte>) ((RuntimeValue<byte>) ((RuntimeValue<uint>) ((rt) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rt]())))));
		XR[(int) rs] = (RuntimeValue<ulong>) (RuntimeValue<uint>) (0x0);
		return true;
	}
unimplemented:
	return false;
}

/* STP-postindex */
bool Recompiler::STP_postindex(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto imm = (inst >> 15) & 0x7FU;
		auto rt2 = (inst >> 10) & 0x1FU;
		auto rd = (inst >> 5) & 0x1FU;
		auto rt1 = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto simm = (long) (((long) (SignExt<long>(imm, 7))) << (uint) ((long) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (0x2) : (0x3))));
		auto address = ((RuntimeValue<ulong>) ((rd) == 31 ? SPR() : XR[(int) rd]())).Store();
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			((RuntimePointer<uint>) (address)).value((RuntimeValue<uint>) ((rt1) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rt1]())));
			((RuntimePointer<uint>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x4))))).value((RuntimeValue<uint>) ((rt2) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rt2]())));
		} else {
			((RuntimePointer<ulong>) (address)).value((RuntimeValue<ulong>) ((rt1) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rt1]()));
			((RuntimePointer<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x8))))).value((RuntimeValue<ulong>) ((rt2) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rt2]()));
		}
		if(rd == 31)
			SPR = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (simm)));
		else
			XR[(int) rd] = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (simm)));
		return true;
	}
unimplemented:
	return false;
}

/* STP-preindex */
bool Recompiler::STP_preindex(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto imm = (inst >> 15) & 0x7FU;
		auto rt2 = (inst >> 10) & 0x1FU;
		auto rd = (inst >> 5) & 0x1FU;
		auto rt1 = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto simm = (long) (((long) (SignExt<long>(imm, 7))) << (uint) ((long) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (0x2) : (0x3))));
		auto address = ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rd) == 31 ? SPR() : XR[(int) rd]()))) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (simm)))).Store();
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			((RuntimePointer<uint>) (address)).value((RuntimeValue<uint>) ((rt1) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rt1]())));
			((RuntimePointer<uint>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x4))))).value((RuntimeValue<uint>) ((rt2) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rt2]())));
		} else {
			((RuntimePointer<ulong>) (address)).value((RuntimeValue<ulong>) ((rt1) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rt1]()));
			((RuntimePointer<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x8))))).value((RuntimeValue<ulong>) ((rt2) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rt2]()));
		}
		if(rd == 31)
			SPR = address;
		else
			XR[(int) rd] = address;
		return true;
	}
unimplemented:
	return false;
}

/* STP-signed-offset */
bool Recompiler::STP_signed_offset(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto imm = (inst >> 15) & 0x7FU;
		auto rt2 = (inst >> 10) & 0x1FU;
		auto rd = (inst >> 5) & 0x1FU;
		auto rt1 = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto simm = (long) (((long) (SignExt<long>(imm, 7))) << (uint) ((long) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (0x2) : (0x3))));
		auto address = ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rd) == 31 ? SPR() : XR[(int) rd]()))) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (simm)))).Store();
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			((RuntimePointer<uint>) (address)).value((RuntimeValue<uint>) ((rt1) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rt1]())));
			((RuntimePointer<uint>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x4))))).value((RuntimeValue<uint>) ((rt2) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rt2]())));
		} else {
			((RuntimePointer<ulong>) (address)).value((RuntimeValue<ulong>) ((rt1) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rt1]()));
			((RuntimePointer<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x8))))).value((RuntimeValue<ulong>) ((rt2) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rt2]()));
		}
		return true;
	}
unimplemented:
	return false;
}

/* STP-simd-postindex */
bool Recompiler::STP_simd_postindex(uint inst, ulong pc) {
	{
		auto opc = (inst >> 30) & 0x3U;
		auto imm = (inst >> 15) & 0x7FU;
		auto rt2 = (inst >> 10) & 0x1FU;
		auto rd = (inst >> 5) & 0x1FU;
		auto rt1 = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_822) -> string { switch(temp_822) { case 0x0: return string("S"); case 0x1: return string("D"); case 0x2: return string("Q"); default: throw "Not implemented"; } })(opc));
		auto simm = (long) (((long) (SignExt<long>(imm, 7))) << (uint) ((long) (([=](auto temp_823) -> long { switch(temp_823) { case 0x0: return 0x2; case 0x1: return 0x3; case 0x2: return 0x4; default: throw "Not implemented"; } })(opc))));
		auto address = ((RuntimeValue<ulong>) ((rd) == 31 ? SPR() : XR[(int) rd]())).Store();
		switch(opc) {
			case 0x0: {
				((RuntimePointer<float>) (address)).value((RuntimeValue<float>) (VSR[(int) (rt1)]));
				((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x4))))).value((RuntimeValue<float>) (VSR[(int) (rt2)]));
				break;
			}
			case 0x1: {
				((RuntimePointer<double>) (address)).value((RuntimeValue<double>) (VDR[(int) (rt1)]));
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x8))))).value((RuntimeValue<double>) (VDR[(int) (rt2)]));
				break;
			}
			case 0x2: {
				((RuntimePointer<Vector128<float>>) (address)).value((RuntimeValue<Vector128<float>>) (VR[(int) (rt1)]));
				((RuntimePointer<Vector128<float>>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x10))))).value((RuntimeValue<Vector128<float>>) (VR[(int) (rt2)]));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		if(rd == 31)
			SPR = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (simm)));
		else
			XR[(int) rd] = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (simm)));
		return true;
	}
unimplemented:
	return false;
}

/* STP-simd-preindex */
bool Recompiler::STP_simd_preindex(uint inst, ulong pc) {
	{
		auto opc = (inst >> 30) & 0x3U;
		auto imm = (inst >> 15) & 0x7FU;
		auto rt2 = (inst >> 10) & 0x1FU;
		auto rd = (inst >> 5) & 0x1FU;
		auto rt1 = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_824) -> string { switch(temp_824) { case 0x0: return string("S"); case 0x1: return string("D"); case 0x2: return string("Q"); default: throw "Not implemented"; } })(opc));
		auto simm = (long) (((long) (SignExt<long>(imm, 7))) << (uint) ((long) (([=](auto temp_825) -> long { switch(temp_825) { case 0x0: return 0x2; case 0x1: return 0x3; case 0x2: return 0x4; default: throw "Not implemented"; } })(opc))));
		auto address = ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rd) == 31 ? SPR() : XR[(int) rd]()))) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (simm)))).Store();
		switch(opc) {
			case 0x0: {
				((RuntimePointer<float>) (address)).value((RuntimeValue<float>) (VSR[(int) (rt1)]));
				((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x4))))).value((RuntimeValue<float>) (VSR[(int) (rt2)]));
				break;
			}
			case 0x1: {
				((RuntimePointer<double>) (address)).value((RuntimeValue<double>) (VDR[(int) (rt1)]));
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x8))))).value((RuntimeValue<double>) (VDR[(int) (rt2)]));
				break;
			}
			case 0x2: {
				((RuntimePointer<Vector128<float>>) (address)).value((RuntimeValue<Vector128<float>>) (VR[(int) (rt1)]));
				((RuntimePointer<Vector128<float>>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x10))))).value((RuntimeValue<Vector128<float>>) (VR[(int) (rt2)]));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		if(rd == 31)
			SPR = address;
		else
			XR[(int) rd] = address;
		return true;
	}
unimplemented:
	return false;
}

/* STP-simd-signed-offset */
bool Recompiler::STP_simd_signed_offset(uint inst, ulong pc) {
	{
		auto opc = (inst >> 30) & 0x3U;
		auto imm = (inst >> 15) & 0x7FU;
		auto rt2 = (inst >> 10) & 0x1FU;
		auto rd = (inst >> 5) & 0x1FU;
		auto rt1 = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_826) -> string { switch(temp_826) { case 0x0: return string("S"); case 0x1: return string("D"); case 0x2: return string("Q"); default: throw "Not implemented"; } })(opc));
		auto simm = (long) (((long) (SignExt<long>(imm, 7))) << (uint) ((long) (([=](auto temp_827) -> long { switch(temp_827) { case 0x0: return 0x2; case 0x1: return 0x3; case 0x2: return 0x4; default: throw "Not implemented"; } })(opc))));
		auto address = ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rd) == 31 ? SPR() : XR[(int) rd]()))) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (simm)))).Store();
		switch(opc) {
			case 0x0: {
				((RuntimePointer<float>) (address)).value((RuntimeValue<float>) (VSR[(int) (rt1)]));
				((RuntimePointer<float>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x4))))).value((RuntimeValue<float>) (VSR[(int) (rt2)]));
				break;
			}
			case 0x1: {
				((RuntimePointer<double>) (address)).value((RuntimeValue<double>) (VDR[(int) (rt1)]));
				((RuntimePointer<double>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x8))))).value((RuntimeValue<double>) (VDR[(int) (rt2)]));
				break;
			}
			case 0x2: {
				((RuntimePointer<Vector128<float>>) (address)).value((RuntimeValue<Vector128<float>>) (VR[(int) (rt1)]));
				((RuntimePointer<Vector128<float>>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (0x10))))).value((RuntimeValue<Vector128<float>>) (VR[(int) (rt2)]));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* STR-immediate-postindex */
bool Recompiler::STR_immediate_postindex(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x1U;
		auto imm = (inst >> 12) & 0x1FFU;
		auto rd = (inst >> 5) & 0x1FU;
		auto rs = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto simm = (long) (SignExt<long>(imm, 9));
		auto address = ((RuntimeValue<ulong>) ((rd) == 31 ? SPR() : XR[(int) rd]())).Store();
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			((RuntimePointer<uint>) (address)).value((RuntimeValue<uint>) ((rs) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rs]())));
		} else {
			((RuntimePointer<ulong>) (address)).value((RuntimeValue<ulong>) ((rs) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rs]()));
		}
		if(rd == 31)
			SPR = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (simm)));
		else
			XR[(int) rd] = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (simm)));
		return true;
	}
unimplemented:
	return false;
}

/* STR-immediate-preindex */
bool Recompiler::STR_immediate_preindex(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x1U;
		auto imm = (inst >> 12) & 0x1FFU;
		auto rd = (inst >> 5) & 0x1FU;
		auto rs = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto simm = (long) (SignExt<long>(imm, 9));
		auto address = ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rd) == 31 ? SPR() : XR[(int) rd]()))) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (simm)))).Store();
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			((RuntimePointer<uint>) (address)).value((RuntimeValue<uint>) ((rs) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rs]())));
		} else {
			((RuntimePointer<ulong>) (address)).value((RuntimeValue<ulong>) ((rs) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rs]()));
		}
		if(rd == 31)
			SPR = address;
		else
			XR[(int) rd] = address;
		return true;
	}
unimplemented:
	return false;
}

/* STR-immediate-unsigned-offset */
bool Recompiler::STR_immediate_unsigned_offset(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x1U;
		auto imm = (inst >> 10) & 0xFFFU;
		auto rd = (inst >> 5) & 0x1FU;
		auto rs = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto pimm = (ulong) (((ulong) ((ulong) (imm))) << (uint) ((long) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (0x2) : (0x3))));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			((RuntimePointer<uint>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rd) == 31 ? SPR() : XR[(int) rd]()))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) (pimm))))).value((RuntimeValue<uint>) ((rs) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rs]())));
		} else {
			((RuntimePointer<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rd) == 31 ? SPR() : XR[(int) rd]()))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) (pimm))))).value((RuntimeValue<ulong>) ((rs) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rs]()));
		}
		return true;
	}
unimplemented:
	return false;
}

/* STR-register */
bool Recompiler::STR_register(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto option = (inst >> 13) & 0x7U;
		auto scale = (inst >> 12) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r1 = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto r2 = (string) (((byte) ((((ulong) (option)) & ((ulong) (0x1)))) != 0) ? (string("X")) : (string("W")));
		auto amount = (long) (((bool) (((scale) == (0x0)) ? 1U : 0U) != 0) ? (0x0) : ((long) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (0x2) : (0x3))));
		auto extend = (string) (([=](auto temp_828) -> string { switch(temp_828) { case 0x2: return string("UXTW"); case 0x6: return string("SXTW"); case 0x7: return string("SXTX"); default: return string("LSL"); } })(option));
		auto offset = ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (((bool) (((option) == (0x6)) ? 1U : 0U)) != 0 ? ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (SignExtRuntime<long>((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]())), 32))))) : ((RuntimeValue<ulong>) (((byte) ((((ulong) (option)) & ((ulong) (0x1))))) != 0 ? ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())) : ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))))))))) << (amount))).Store();
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			((RuntimePointer<uint>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) (offset))))).value((RuntimeValue<uint>) ((rt) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rt]())));
		} else {
			((RuntimePointer<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) (offset))))).value((RuntimeValue<ulong>) ((rt) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rt]()));
		}
		return true;
	}
unimplemented:
	return false;
}

/* STR-simd-postindex */
bool Recompiler::STR_simd_postindex(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x3U;
		auto opc = (inst >> 23) & 0x1U;
		auto imm = (inst >> 12) & 0x1FFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto rop = (byte) ((byte) (((byte) (byte) (((byte) (((byte) ((bool) ((bool) (0x0)))) << 0)) | ((byte) (((byte) (opc)) << 1)))) | ((byte) (((byte) (size)) << 2))));
		auto r = (string) (([=](auto temp_829) -> string { switch(temp_829) { case 0x0: return string("B"); case 0x4: return string("H"); case 0x8: return string("S"); case 0xC: return string("D"); case 0x2: return string("Q"); default: throw "Not implemented"; } })(rop));
		auto simm = (long) (SignExt<long>(imm, 9));
		auto address = ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		switch(rop) {
			case 0x0: {
				((RuntimePointer<float>) (address)).value((RuntimeValue<float>) (VBR[(int) (rt)]));
				break;
			}
			case 0x4: {
				((RuntimePointer<ushort>) (address)).value((RuntimeValue<ushort>) (VHR[(int) (rt)]));
				break;
			}
			case 0x8: {
				((RuntimePointer<float>) (address)).value((RuntimeValue<float>) (VSR[(int) (rt)]));
				break;
			}
			case 0xC: {
				((RuntimePointer<double>) (address)).value((RuntimeValue<double>) (VDR[(int) (rt)]));
				break;
			}
			case 0x2: {
				((RuntimePointer<Vector128<float>>) (address)).value((RuntimeValue<Vector128<float>>) (VR[(int) (rt)]));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		if(rn == 31)
			SPR = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (simm)));
		else
			XR[(int) rn] = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (simm)));
		return true;
	}
unimplemented:
	return false;
}

/* STR-simd-preindex */
bool Recompiler::STR_simd_preindex(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x3U;
		auto opc = (inst >> 23) & 0x1U;
		auto imm = (inst >> 12) & 0x1FFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto rop = (byte) ((byte) (((byte) (byte) (((byte) (((byte) ((bool) ((bool) (0x0)))) << 0)) | ((byte) (((byte) (opc)) << 1)))) | ((byte) (((byte) (size)) << 2))));
		auto r = (string) (([=](auto temp_830) -> string { switch(temp_830) { case 0x0: return string("B"); case 0x4: return string("H"); case 0x8: return string("S"); case 0xC: return string("D"); case 0x2: return string("Q"); default: throw "Not implemented"; } })(rop));
		auto scale = (byte) ((byte) (((byte) (((byte) (size)) << 0)) | ((byte) (((byte) (opc)) << 2))));
		auto simm = (long) (SignExt<long>(imm, 9));
		auto address = ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (simm)))).Store();
		switch(rop) {
			case 0x0: {
				((RuntimePointer<float>) (address)).value((RuntimeValue<float>) (VBR[(int) (rt)]));
				break;
			}
			case 0x4: {
				((RuntimePointer<ushort>) (address)).value((RuntimeValue<ushort>) (VHR[(int) (rt)]));
				break;
			}
			case 0x8: {
				((RuntimePointer<float>) (address)).value((RuntimeValue<float>) (VSR[(int) (rt)]));
				break;
			}
			case 0xC: {
				((RuntimePointer<double>) (address)).value((RuntimeValue<double>) (VDR[(int) (rt)]));
				break;
			}
			case 0x2: {
				((RuntimePointer<Vector128<float>>) (address)).value((RuntimeValue<Vector128<float>>) (VR[(int) (rt)]));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		if(rn == 31)
			SPR = address;
		else
			XR[(int) rn] = address;
		return true;
	}
unimplemented:
	return false;
}

/* STR-simd-unsigned-offset */
bool Recompiler::STR_simd_unsigned_offset(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x3U;
		auto opc = (inst >> 23) & 0x1U;
		auto imm = (inst >> 10) & 0xFFFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto rop = (byte) ((byte) (((byte) (byte) (((byte) (((byte) ((bool) ((bool) (0x0)))) << 0)) | ((byte) (((byte) (opc)) << 1)))) | ((byte) (((byte) (size)) << 2))));
		auto r = (string) (([=](auto temp_831) -> string { switch(temp_831) { case 0x0: return string("B"); case 0x4: return string("H"); case 0x8: return string("S"); case 0xC: return string("D"); case 0x2: return string("Q"); default: throw "Not implemented"; } })(rop));
		auto scale = (byte) ((byte) (((byte) (((byte) (size)) << 0)) | ((byte) (((byte) (opc)) << 2))));
		auto address = ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<ushort>) ((ushort) ((imm) << (uint) (scale)))))).Store();
		switch(rop) {
			case 0x0: {
				((RuntimePointer<float>) (address)).value((RuntimeValue<float>) (VBR[(int) (rt)]));
				break;
			}
			case 0x4: {
				((RuntimePointer<ushort>) (address)).value((RuntimeValue<ushort>) (VHR[(int) (rt)]));
				break;
			}
			case 0x8: {
				((RuntimePointer<float>) (address)).value((RuntimeValue<float>) (VSR[(int) (rt)]));
				break;
			}
			case 0xC: {
				((RuntimePointer<double>) (address)).value((RuntimeValue<double>) (VDR[(int) (rt)]));
				break;
			}
			case 0x2: {
				((RuntimePointer<Vector128<float>>) (address)).value((RuntimeValue<Vector128<float>>) (VR[(int) (rt)]));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* STR-simd-register */
bool Recompiler::STR_simd_register(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x3U;
		auto opc = (inst >> 23) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto option = (inst >> 13) & 0x7U;
		auto scale = (inst >> 12) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto rop = (byte) ((byte) (((byte) (byte) (((byte) (((byte) ((bool) ((bool) (0x0)))) << 0)) | ((byte) (((byte) (opc)) << 1)))) | ((byte) (((byte) (size)) << 2))));
		auto r1 = (string) (([=](auto temp_832) -> string { switch(temp_832) { case 0x0: return string("B"); case 0x4: return string("H"); case 0x8: return string("S"); case 0xC: return string("D"); case 0x2: return string("Q"); default: throw "Not implemented"; } })(rop));
		auto r2 = (string) (((byte) ((((ulong) (option)) & ((ulong) (0x1)))) != 0) ? (string("X")) : (string("W")));
		auto amount = (long) (((bool) (((scale) == (0x0)) ? 1U : 0U) != 0) ? (0x0) : ((long) (([=](auto temp_833) -> long { switch(temp_833) { case 0x1: return 0x1; case 0x2: return 0x2; case 0x3: return 0x3; default: return (long) (((bool) (((opc) == (0x1)) ? 1U : 0U) != 0) ? (0x4) : (0x0)); } })(size))));
		auto extend = (string) (([=](auto temp_834) -> string { switch(temp_834) { case 0x2: return string("UXTW"); case 0x6: return string("SXTW"); case 0x7: return string("SXTX"); default: return string("LSL"); } })(option));
		auto offset = ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (((bool) (((option) == (0x6)) ? 1U : 0U)) != 0 ? ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (SignExtRuntime<long>((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]())), 32))))) : ((RuntimeValue<ulong>) (((byte) ((((ulong) (option)) & ((ulong) (0x1))))) != 0 ? ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())) : ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))))))))) << (amount))).Store();
		auto address = ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) (offset)))).Store();
		switch(rop) {
			case 0x0: {
				((RuntimePointer<float>) (address)).value((RuntimeValue<float>) (VBR[(int) (rt)]));
				break;
			}
			case 0x4: {
				((RuntimePointer<ushort>) (address)).value((RuntimeValue<ushort>) (VHR[(int) (rt)]));
				break;
			}
			case 0x8: {
				((RuntimePointer<float>) (address)).value((RuntimeValue<float>) (VSR[(int) (rt)]));
				break;
			}
			case 0xC: {
				((RuntimePointer<double>) (address)).value((RuntimeValue<double>) (VDR[(int) (rt)]));
				break;
			}
			case 0x2: {
				((RuntimePointer<Vector128<float>>) (address)).value((RuntimeValue<Vector128<float>>) (VR[(int) (rt)]));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* STRB-immediate-postindex */
bool Recompiler::STRB_immediate_postindex(uint inst, ulong pc) {
	{
		auto imm = (inst >> 12) & 0x1FFU;
		auto rd = (inst >> 5) & 0x1FU;
		auto rs = (inst >> 0) & 0x1FU;
		auto simm = (long) (SignExt<long>(imm, 9));
		auto address = ((RuntimeValue<ulong>) ((rd) == 31 ? SPR() : XR[(int) rd]())).Store();
		((RuntimePointer<byte>) (address)).value((RuntimeValue<byte>) ((RuntimeValue<byte>) ((RuntimeValue<uint>) ((rs) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rs]())))));
		if(rd == 31)
			SPR = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (simm)));
		else
			XR[(int) rd] = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (simm)));
		return true;
	}
unimplemented:
	return false;
}

/* STRB-immediate-preindex */
bool Recompiler::STRB_immediate_preindex(uint inst, ulong pc) {
	{
		auto imm = (inst >> 12) & 0x1FFU;
		auto rd = (inst >> 5) & 0x1FU;
		auto rs = (inst >> 0) & 0x1FU;
		auto simm = (long) (SignExt<long>(imm, 9));
		auto address = ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rd) == 31 ? SPR() : XR[(int) rd]()))) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (simm)))).Store();
		((RuntimePointer<byte>) (address)).value((RuntimeValue<byte>) ((RuntimeValue<byte>) ((RuntimeValue<uint>) ((rs) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rs]())))));
		if(rd == 31)
			SPR = address;
		else
			XR[(int) rd] = address;
		return true;
	}
unimplemented:
	return false;
}

/* STRB-immediate-unsigned-offset */
bool Recompiler::STRB_immediate_unsigned_offset(uint inst, ulong pc) {
	{
		auto imm = (inst >> 10) & 0xFFFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<ushort>) (imm))))).value((RuntimeValue<byte>) ((RuntimeValue<byte>) ((RuntimeValue<ulong>) ((rt) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rt]()))));
		return true;
	}
unimplemented:
	return false;
}

/* STRB-register */
bool Recompiler::STRB_register(uint inst, ulong pc) {
	{
		auto rm = (inst >> 16) & 0x1FU;
		auto option = (inst >> 13) & 0x7U;
		auto amount = (inst >> 12) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r = (string) (((byte) ((((ulong) (option)) & ((ulong) (0x1)))) != 0) ? (string("X")) : (string("W")));
		auto str = (string) (([=](auto temp_835) -> string { switch(temp_835) { case 0x2: return string("UXTW"); case 0x3: return string("LSL"); case 0x6: return string("SXTW"); case 0x7: return string("SXTX"); default: throw "Not implemented"; } })(option));
		auto offset = ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (((bool) (((option) == (0x6)) ? 1U : 0U)) != 0 ? ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (SignExtRuntime<long>((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]())), 32))))) : ((RuntimeValue<ulong>) (((byte) ((((ulong) (option)) & ((ulong) (0x1))))) != 0 ? ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())) : ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))))))))) << (amount))).Store();
		((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) (offset))))).value((RuntimeValue<byte>) ((RuntimeValue<byte>) ((RuntimeValue<uint>) ((rt) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rt]())))));
		return true;
	}
unimplemented:
	return false;
}

/* STRH-immediate-postindex */
bool Recompiler::STRH_immediate_postindex(uint inst, ulong pc) {
	{
		auto imm = (inst >> 12) & 0x1FFU;
		auto rd = (inst >> 5) & 0x1FU;
		auto rs = (inst >> 0) & 0x1FU;
		auto simm = (long) (SignExt<long>(imm, 9));
		auto address = ((RuntimeValue<ulong>) ((rd) == 31 ? SPR() : XR[(int) rd]())).Store();
		((RuntimePointer<ushort>) (address)).value((RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((RuntimeValue<uint>) ((rs) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rs]())))));
		if(rd == 31)
			SPR = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (simm)));
		else
			XR[(int) rd] = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (address)) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (simm)));
		return true;
	}
unimplemented:
	return false;
}

/* STRH-immediate-preindex */
bool Recompiler::STRH_immediate_preindex(uint inst, ulong pc) {
	{
		auto imm = (inst >> 12) & 0x1FFU;
		auto rd = (inst >> 5) & 0x1FU;
		auto rs = (inst >> 0) & 0x1FU;
		auto simm = (long) (SignExt<long>(imm, 9));
		auto address = ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rd) == 31 ? SPR() : XR[(int) rd]()))) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (simm)))).Store();
		((RuntimePointer<ushort>) (address)).value((RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((RuntimeValue<uint>) ((rs) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rs]())))));
		if(rd == 31)
			SPR = address;
		else
			XR[(int) rd] = address;
		return true;
	}
unimplemented:
	return false;
}

/* STRH-immediate-unsigned-offset */
bool Recompiler::STRH_immediate_unsigned_offset(uint inst, ulong pc) {
	{
		auto rawimm = (inst >> 10) & 0xFFFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto imm = (ushort) ((rawimm) << (uint) (0x1));
		((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<ushort>) (imm))))).value((RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((RuntimeValue<ulong>) ((rt) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rt]()))));
		return true;
	}
unimplemented:
	return false;
}

/* STRH-register */
bool Recompiler::STRH_register(uint inst, ulong pc) {
	{
		auto rm = (inst >> 16) & 0x1FU;
		auto option = (inst >> 13) & 0x7U;
		auto amount = (inst >> 12) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r = (string) (((byte) ((((ulong) (option)) & ((ulong) (0x1)))) != 0) ? (string("X")) : (string("W")));
		auto str = (string) (([=](auto temp_836) -> string { switch(temp_836) { case 0x2: return string("UXTW"); case 0x3: return string("LSL"); case 0x6: return string("SXTW"); case 0x7: return string("SXTX"); default: throw "Not implemented"; } })(option));
		auto offset = ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (((bool) (((option) == (0x6)) ? 1U : 0U)) != 0 ? ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (SignExtRuntime<long>((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]())), 32))))) : ((RuntimeValue<ulong>) (((byte) ((((ulong) (option)) & ((ulong) (0x1))))) != 0 ? ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())) : ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))))))))) << (amount))).Store();
		((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) (offset))))).value((RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((RuntimeValue<uint>) ((rt) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rt]())))));
		return true;
	}
unimplemented:
	return false;
}

/* STUR */
bool Recompiler::STUR(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x1U;
		auto imm = (inst >> 12) & 0x1FFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto offset = (long) (SignExt<long>(imm, 9));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			((RuntimePointer<uint>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (offset))))).value((RuntimeValue<uint>) ((rt) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rt]())));
		} else {
			((RuntimePointer<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (offset))))).value((RuntimeValue<ulong>) ((rt) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rt]()));
		}
		return true;
	}
unimplemented:
	return false;
}

/* STUR-simd */
bool Recompiler::STUR_simd(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x3U;
		auto opc = (inst >> 23) & 0x1U;
		auto imm = (inst >> 12) & 0x1FFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto rop = (byte) ((byte) (((byte) (byte) (((byte) (((byte) ((bool) ((bool) (0x0)))) << 0)) | ((byte) (((byte) (opc)) << 1)))) | ((byte) (((byte) (size)) << 2))));
		auto r = (string) (([=](auto temp_837) -> string { switch(temp_837) { case 0x0: return string("B"); case 0x4: return string("H"); case 0x8: return string("S"); case 0xC: return string("D"); case 0x2: return string("Q"); default: throw "Not implemented"; } })(rop));
		auto simm = (long) (SignExt<long>(imm, 9));
		auto address = ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (simm)))).Store();
		switch(rop) {
			case 0x0: {
				((RuntimePointer<float>) (address)).value((RuntimeValue<float>) (VBR[(int) (rt)]));
				break;
			}
			case 0x4: {
				((RuntimePointer<ushort>) (address)).value((RuntimeValue<ushort>) (VHR[(int) (rt)]));
				break;
			}
			case 0x8: {
				((RuntimePointer<float>) (address)).value((RuntimeValue<float>) (VSR[(int) (rt)]));
				break;
			}
			case 0xC: {
				((RuntimePointer<double>) (address)).value((RuntimeValue<double>) (VDR[(int) (rt)]));
				break;
			}
			case 0x2: {
				((RuntimePointer<Vector128<float>>) (address)).value((RuntimeValue<Vector128<float>>) (VR[(int) (rt)]));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* STURB */
bool Recompiler::STURB(uint inst, ulong pc) {
	{
		auto imm = (inst >> 12) & 0x1FFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto offset = (long) (SignExt<long>(imm, 9));
		((RuntimePointer<byte>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (offset))))).value((RuntimeValue<byte>) ((RuntimeValue<byte>) ((RuntimeValue<ulong>) ((rt) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rt]()))));
		return true;
	}
unimplemented:
	return false;
}

/* STURH */
bool Recompiler::STURH(uint inst, ulong pc) {
	{
		auto imm = (inst >> 12) & 0x1FFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto offset = (long) (SignExt<long>(imm, 9));
		((RuntimePointer<ushort>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((RuntimeValue<ulong>) (RuntimeValue<long>) (offset))))).value((RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((RuntimeValue<ulong>) ((rt) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rt]()))));
		return true;
	}
unimplemented:
	return false;
}

/* STXR */
bool Recompiler::STXR(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x1U;
		auto rs = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		XR[(int) rs] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<bool>) (((bool) (((size) == (0x0)) ? 1U : 0U)) != 0 ? ((RuntimeValue<bool>) (CompareAndSwap((RuntimePointer<uint>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]())), (RuntimeValue<uint>) ((rt) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rt]())), Exclusive32R()))) : ((RuntimeValue<bool>) (CompareAndSwap((RuntimePointer<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]())), (RuntimeValue<ulong>) ((rt) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rt]()), Exclusive64R())))));
		return true;
	}
unimplemented:
	return false;
}

/* SUB-immediate */
bool Recompiler::SUB_immediate(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto sh = (inst >> 22) & 0x1U;
		auto imm = (inst >> 10) & 0xFFFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto shift = (long) (((bool) (((sh) == (0x0)) ? 1U : 0U) != 0) ? (0x0) : (0xC));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			if(rd == 31)
				SPR = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) - ((RuntimeValue<uint>) (RuntimeValue<uint>) ((uint) (((uint) ((uint) (imm))) << (uint) (shift))))));
			else
				XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) - ((RuntimeValue<uint>) (RuntimeValue<uint>) ((uint) (((uint) ((uint) (imm))) << (uint) (shift))))));
		} else {
			if(rd == 31)
				SPR = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) - ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((ulong) (((ulong) ((ulong) (imm))) << (uint) (shift)))));
			else
				XR[(int) rd] = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) - ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((ulong) (((ulong) ((ulong) (imm))) << (uint) (shift)))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* SUB-extended-register */
bool Recompiler::SUB_extended_register(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto option = (inst >> 13) & 0x7U;
		auto imm = (inst >> 10) & 0x7U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r1 = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto r2 = (string) (((bool) ((((byte) ((((ulong) (option)) & ((ulong) (0x3))))) == (0x3)) ? 1U : 0U) != 0) ? (string("X")) : (string("W")));
		auto extend = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? ((string) (([=](auto temp_838) -> string { switch(temp_838) { case 0x0: return string("UXTB"); case 0x1: return string("UXTH"); case 0x2: return string("LSL"); case 0x3: return string("UXTX"); case 0x4: return string("SXTB"); case 0x5: return string("SXTH"); case 0x6: return string("SXTW"); default: return string("SXTX"); } })(option))) : ((string) (([=](auto temp_839) -> string { switch(temp_839) { case 0x0: return string("UXTB"); case 0x1: return string("UXTH"); case 0x2: return string("UXTW"); case 0x3: return string("LSL"); case 0x4: return string("SXTB"); case 0x5: return string("SXTH"); case 0x6: return string("SXTW"); default: return string("SXTX"); } })(option))));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			auto m = ((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))).Store();
			if(rd == 31)
				SPR = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) - ((RuntimeValue<uint>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) (([=](auto temp_840) -> RuntimeValue<uint> { switch(temp_840) { case 0x0: return (RuntimeValue<uint>) ((RuntimeValue<uint>) ((((RuntimeValue<ulong>) (m)) & ((RuntimeValue<ulong>) (0xFF))))); case 0x1: return (RuntimeValue<uint>) ((RuntimeValue<uint>) ((((RuntimeValue<ulong>) (m)) & ((RuntimeValue<ulong>) (0xFFFF))))); case 0x4: return (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<int>) (SignExtRuntime<int>((RuntimeValue<byte>) ((RuntimeValue<byte>) (m)), 8))))); case 0x5: return (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<int>) (SignExtRuntime<int>((RuntimeValue<ushort>) ((RuntimeValue<ushort>) (m)), 16))))); default: return m; } })(option))) << (imm))))));
			else
				XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) - ((RuntimeValue<uint>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) (([=](auto temp_841) -> RuntimeValue<uint> { switch(temp_841) { case 0x0: return (RuntimeValue<uint>) ((RuntimeValue<uint>) ((((RuntimeValue<ulong>) (m)) & ((RuntimeValue<ulong>) (0xFF))))); case 0x1: return (RuntimeValue<uint>) ((RuntimeValue<uint>) ((((RuntimeValue<ulong>) (m)) & ((RuntimeValue<ulong>) (0xFFFF))))); case 0x4: return (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<int>) (SignExtRuntime<int>((RuntimeValue<byte>) ((RuntimeValue<byte>) (m)), 8))))); case 0x5: return (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<int>) (SignExtRuntime<int>((RuntimeValue<ushort>) ((RuntimeValue<ushort>) (m)), 16))))); default: return m; } })(option))) << (imm))))));
		} else {
			if(((bool) ((((byte) ((((ulong) (option)) & ((ulong) (0x3))))) == (0x3)) ? 1U : 0U)) != 0) {
				if(rd == 31)
					SPR = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) - ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())) << (imm)))));
				else
					XR[(int) rd] = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) - ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())) << (imm)))));
			} else {
				auto m = ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))))).Store();
				if(rd == 31)
					SPR = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) - ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (([=](auto temp_842) -> RuntimeValue<ulong> { switch(temp_842) { case 0x0: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((((RuntimeValue<ulong>) (m)) & ((RuntimeValue<ulong>) (0xFF))))); case 0x1: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((((RuntimeValue<ulong>) (m)) & ((RuntimeValue<ulong>) (0xFFFF))))); case 0x2: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((((RuntimeValue<ulong>) (m)) & ((RuntimeValue<ulong>) (0xFFFFFFFF))))); case 0x4: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (SignExtRuntime<long>((RuntimeValue<byte>) ((RuntimeValue<byte>) (m)), 8))))); case 0x5: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (SignExtRuntime<long>((RuntimeValue<ushort>) ((RuntimeValue<ushort>) (m)), 16))))); case 0x6: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (SignExtRuntime<long>(m, 64))))); default: return m; } })(option))) << (imm)))));
				else
					XR[(int) rd] = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) - ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (([=](auto temp_843) -> RuntimeValue<ulong> { switch(temp_843) { case 0x0: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((((RuntimeValue<ulong>) (m)) & ((RuntimeValue<ulong>) (0xFF))))); case 0x1: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((((RuntimeValue<ulong>) (m)) & ((RuntimeValue<ulong>) (0xFFFF))))); case 0x2: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((((RuntimeValue<ulong>) (m)) & ((RuntimeValue<ulong>) (0xFFFFFFFF))))); case 0x4: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (SignExtRuntime<long>((RuntimeValue<byte>) ((RuntimeValue<byte>) (m)), 8))))); case 0x5: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (SignExtRuntime<long>((RuntimeValue<ushort>) ((RuntimeValue<ushort>) (m)), 16))))); case 0x6: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (SignExtRuntime<long>(m, 64))))); default: return m; } })(option))) << (imm)))));
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* SUB-shifted-register */
bool Recompiler::SUB_shifted_register(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto shift = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto imm = (inst >> 10) & 0x3FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto shiftstr = (string) (([=](auto temp_844) -> string { switch(temp_844) { case 0x0: return string("LSL"); case 0x1: return string("LSR"); case 0x2: return string("ASR"); default: return string("ROR"); } })(shift));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((rn) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rn]())))) - ((RuntimeValue<uint>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (([=](auto temp_845) -> RuntimeValue<uint> { switch(temp_845) { case 0x0: return (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))))) << (imm))); case 0x1: return (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))) >> (imm))); case 0x2: return (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<int>) (((RuntimeValue<int>) ((RuntimeValue<int>) ((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))))) >> (imm))))); default: return (RuntimeValue<uint>) ((((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))) << ((RuntimeValue<uint>) (32 - (imm)))) | (((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))) >> ((RuntimeValue<uint>) (imm)))); } })(shift))))));
		} else {
			XR[(int) rd] = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]()))) - ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (([=](auto temp_846) -> RuntimeValue<ulong> { switch(temp_846) { case 0x0: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())))) << (imm))); case 0x1: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())) >> (imm))); case 0x2: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (((RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())))) >> (imm))))); default: return (RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())) << ((RuntimeValue<uint>) (64 - (imm)))) | (((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())) >> ((RuntimeValue<uint>) (imm)))); } })(shift)))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* SUBS-extended-register */
bool Recompiler::SUBS_extended_register(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto option = (inst >> 13) & 0x7U;
		auto imm = (inst >> 10) & 0x7U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r1 = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto r2 = (string) (((bool) ((((byte) ((((ulong) (option)) & ((ulong) (0x3))))) == (0x3)) ? 1U : 0U) != 0) ? (string("X")) : (string("W")));
		auto extend = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? ((string) (([=](auto temp_847) -> string { switch(temp_847) { case 0x0: return string("UXTB"); case 0x1: return string("UXTH"); case 0x2: return string("LSL"); case 0x3: return string("UXTX"); case 0x4: return string("SXTB"); case 0x5: return string("SXTH"); case 0x6: return string("SXTW"); default: return string("SXTX"); } })(option))) : ((string) (([=](auto temp_848) -> string { switch(temp_848) { case 0x0: return string("UXTB"); case 0x1: return string("UXTH"); case 0x2: return string("UXTW"); case 0x3: return string("LSL"); case 0x4: return string("SXTB"); case 0x5: return string("SXTH"); case 0x6: return string("SXTW"); default: return string("SXTX"); } })(option))));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			auto m = ((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))).Store();
			XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (([=]() -> RuntimeValue<uint> {
					auto __macro_add_with_carry_set_nzcv_common_operand1 = ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((rn) == 31 ? SPR() : XR[(int) rn]())))).Store();
					auto __macro_add_with_carry_set_nzcv_common_operand2 = ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) (~((RuntimeValue<uint>) (((RuntimeValue<uint>) (([=](auto temp_849) -> RuntimeValue<uint> { switch(temp_849) { case 0x0: return (RuntimeValue<uint>) ((RuntimeValue<uint>) ((((RuntimeValue<ulong>) (m)) & ((RuntimeValue<ulong>) (0xFF))))); case 0x1: return (RuntimeValue<uint>) ((RuntimeValue<uint>) ((((RuntimeValue<ulong>) (m)) & ((RuntimeValue<ulong>) (0xFFFF))))); case 0x4: return (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<int>) (SignExtRuntime<int>((RuntimeValue<byte>) ((RuntimeValue<byte>) (m)), 8))))); case 0x5: return (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<int>) (SignExtRuntime<int>((RuntimeValue<ushort>) ((RuntimeValue<ushort>) (m)), 16))))); default: return m; } })(option))) << (imm))))))).Store();
					auto __macro_add_with_carry_set_nzcv_common_carryIn = (uint) ((uint) (0x1));
					auto bits = (int) (32);
					auto bits1 = (long) (((long) (int) (bits)) - ((long) (long) (0x1)));
					auto usum = ((RuntimeValue<uint>) (((RuntimeValue<uint>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) (RuntimeValue<uint>) (__macro_add_with_carry_set_nzcv_common_operand1)) + ((RuntimeValue<uint>) (RuntimeValue<uint>) (__macro_add_with_carry_set_nzcv_common_operand2))))) + ((RuntimeValue<uint>) (RuntimeValue<uint>) (__macro_add_with_carry_set_nzcv_common_carryIn)))).Store();
					auto ssum = ((RuntimeValue<int>) (((RuntimeValue<int>) (RuntimeValue<int>) ((RuntimeValue<int>) (((RuntimeValue<int>) (RuntimeValue<int>) ((RuntimeValue<int>) ((RuntimeValue<int>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((RuntimeValue<int>) (RuntimeValue<int>) ((RuntimeValue<int>) ((RuntimeValue<int>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((RuntimeValue<int>) (RuntimeValue<int>) ((int) ((int) (__macro_add_with_carry_set_nzcv_common_carryIn)))))).Store();
					NZCV_NR = (RuntimeValue<uint>) ((usum) >> (bits1));
					NZCV_ZR = (RuntimeValue<bool>) ((usum) == (0x0));
					NZCV_CR = (RuntimeValue<uint>) ((((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((ulong) ((ulong) (__macro_add_with_carry_set_nzcv_common_carryIn)))))) >> (bits)))))) & ((RuntimeValue<ulong>) (0x1))));
					NZCV_VR = (RuntimeValue<bool>) ((((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<uint>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))) == ((RuntimeValue<uint>) ((__macro_add_with_carry_set_nzcv_common_operand2) >> (bits1)))))) & ((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<uint>) ((usum) >> (bits1))) != ((RuntimeValue<uint>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))))))));
					return (usum).Store();
				})()));
		} else {
			if(((bool) ((((byte) ((((ulong) (option)) & ((ulong) (0x3))))) == (0x3)) ? 1U : 0U)) != 0) {
				XR[(int) rd] = (RuntimeValue<ulong>) (([=]() -> RuntimeValue<ulong> {
						auto __macro_add_with_carry_set_nzcv_common_operand1 = ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]())))).Store();
						auto __macro_add_with_carry_set_nzcv_common_operand2 = ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (~((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())) << (imm))))))).Store();
						auto __macro_add_with_carry_set_nzcv_common_carryIn = (ulong) ((ulong) (0x1));
						auto bits = (int) (64);
						auto bits1 = (long) (((long) (int) (bits)) - ((long) (long) (0x1)));
						auto usum = ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_operand1)) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_operand2))))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_carryIn)))).Store();
						auto ssum = ((RuntimeValue<long>) (((RuntimeValue<long>) (RuntimeValue<long>) ((RuntimeValue<long>) (((RuntimeValue<long>) (RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<long>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((RuntimeValue<long>) (RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<long>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((RuntimeValue<long>) (RuntimeValue<long>) ((long) ((long) (__macro_add_with_carry_set_nzcv_common_carryIn)))))).Store();
						NZCV_NR = (RuntimeValue<ulong>) ((usum) >> (bits1));
						NZCV_ZR = (RuntimeValue<bool>) ((usum) == (0x0));
						NZCV_CR = (RuntimeValue<uint>) ((((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<UInt128>) (((RuntimeValue<UInt128>) (((RuntimeValue<UInt128>) (RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) (((RuntimeValue<UInt128>) (RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((RuntimeValue<UInt128>) (RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((RuntimeValue<UInt128>) (RuntimeValue<UInt128>) ((UInt128) ((UInt128) (__macro_add_with_carry_set_nzcv_common_carryIn)))))) >> (bits)))))) & ((RuntimeValue<ulong>) (0x1))));
						NZCV_VR = (RuntimeValue<bool>) ((((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<ulong>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))) == ((RuntimeValue<ulong>) ((__macro_add_with_carry_set_nzcv_common_operand2) >> (bits1)))))) & ((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<ulong>) ((usum) >> (bits1))) != ((RuntimeValue<ulong>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))))))));
						return (usum).Store();
					})());
			} else {
				auto m = ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))))).Store();
				XR[(int) rd] = (RuntimeValue<ulong>) (([=]() -> RuntimeValue<ulong> {
						auto __macro_add_with_carry_set_nzcv_common_operand1 = ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? SPR() : XR[(int) rn]())))).Store();
						auto __macro_add_with_carry_set_nzcv_common_operand2 = ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (~((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (([=](auto temp_850) -> RuntimeValue<ulong> { switch(temp_850) { case 0x0: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((((RuntimeValue<ulong>) (m)) & ((RuntimeValue<ulong>) (0xFF))))); case 0x1: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((((RuntimeValue<ulong>) (m)) & ((RuntimeValue<ulong>) (0xFFFF))))); case 0x2: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((((RuntimeValue<ulong>) (m)) & ((RuntimeValue<ulong>) (0xFFFFFFFF))))); case 0x4: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (SignExtRuntime<long>((RuntimeValue<byte>) ((RuntimeValue<byte>) (m)), 8))))); case 0x5: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (SignExtRuntime<long>((RuntimeValue<ushort>) ((RuntimeValue<ushort>) (m)), 16))))); case 0x6: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (SignExtRuntime<long>(m, 64))))); default: return m; } })(option))) << (imm))))))).Store();
						auto __macro_add_with_carry_set_nzcv_common_carryIn = (ulong) ((ulong) (0x1));
						auto bits = (int) (64);
						auto bits1 = (long) (((long) (int) (bits)) - ((long) (long) (0x1)));
						auto usum = ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_operand1)) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_operand2))))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_carryIn)))).Store();
						auto ssum = ((RuntimeValue<long>) (((RuntimeValue<long>) (RuntimeValue<long>) ((RuntimeValue<long>) (((RuntimeValue<long>) (RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<long>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((RuntimeValue<long>) (RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<long>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((RuntimeValue<long>) (RuntimeValue<long>) ((long) ((long) (__macro_add_with_carry_set_nzcv_common_carryIn)))))).Store();
						NZCV_NR = (RuntimeValue<ulong>) ((usum) >> (bits1));
						NZCV_ZR = (RuntimeValue<bool>) ((usum) == (0x0));
						NZCV_CR = (RuntimeValue<uint>) ((((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<UInt128>) (((RuntimeValue<UInt128>) (((RuntimeValue<UInt128>) (RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) (((RuntimeValue<UInt128>) (RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((RuntimeValue<UInt128>) (RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((RuntimeValue<UInt128>) (RuntimeValue<UInt128>) ((UInt128) ((UInt128) (__macro_add_with_carry_set_nzcv_common_carryIn)))))) >> (bits)))))) & ((RuntimeValue<ulong>) (0x1))));
						NZCV_VR = (RuntimeValue<bool>) ((((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<ulong>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))) == ((RuntimeValue<ulong>) ((__macro_add_with_carry_set_nzcv_common_operand2) >> (bits1)))))) & ((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<ulong>) ((usum) >> (bits1))) != ((RuntimeValue<ulong>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))))))));
						return (usum).Store();
					})());
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* SUBS-shifted-register */
bool Recompiler::SUBS_shifted_register(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto shift = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto imm = (inst >> 10) & 0x3FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto mode32 = (bool) (((size) == (0x0)) ? 1U : 0U);
		auto r = (string) ((mode32 != 0) ? (string("W")) : (string("X")));
		auto shiftstr = (string) (([=](auto temp_851) -> string { switch(temp_851) { case 0x0: return string("LSL"); case 0x1: return string("LSR"); case 0x2: return string("ASR"); default: return string("ROR"); } })(shift));
		if((mode32) != 0) {
			XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (([=]() -> RuntimeValue<uint> {
					auto __macro_add_with_carry_set_nzcv_common_operand1 = ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((rn) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rn]()))))).Store();
					auto __macro_add_with_carry_set_nzcv_common_operand2 = ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) (~((RuntimeValue<uint>) (([=](auto temp_852) -> RuntimeValue<uint> { switch(temp_852) { case 0x0: return (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))))) << (imm))); case 0x1: return (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))) >> (imm))); case 0x2: return (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<int>) (((RuntimeValue<int>) ((RuntimeValue<int>) ((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))))) >> (imm))))); default: return (RuntimeValue<uint>) ((((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))) << ((RuntimeValue<uint>) (32 - (imm)))) | (((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))) >> ((RuntimeValue<uint>) (imm)))); } })(shift))))))).Store();
					auto __macro_add_with_carry_set_nzcv_common_carryIn = (uint) ((uint) (0x1));
					auto bits = (int) (32);
					auto bits1 = (long) (((long) (int) (bits)) - ((long) (long) (0x1)));
					auto usum = ((RuntimeValue<uint>) (((RuntimeValue<uint>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) (RuntimeValue<uint>) (__macro_add_with_carry_set_nzcv_common_operand1)) + ((RuntimeValue<uint>) (RuntimeValue<uint>) (__macro_add_with_carry_set_nzcv_common_operand2))))) + ((RuntimeValue<uint>) (RuntimeValue<uint>) (__macro_add_with_carry_set_nzcv_common_carryIn)))).Store();
					auto ssum = ((RuntimeValue<int>) (((RuntimeValue<int>) (RuntimeValue<int>) ((RuntimeValue<int>) (((RuntimeValue<int>) (RuntimeValue<int>) ((RuntimeValue<int>) ((RuntimeValue<int>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((RuntimeValue<int>) (RuntimeValue<int>) ((RuntimeValue<int>) ((RuntimeValue<int>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((RuntimeValue<int>) (RuntimeValue<int>) ((int) ((int) (__macro_add_with_carry_set_nzcv_common_carryIn)))))).Store();
					NZCV_NR = (RuntimeValue<uint>) ((usum) >> (bits1));
					NZCV_ZR = (RuntimeValue<bool>) ((usum) == (0x0));
					NZCV_CR = (RuntimeValue<uint>) ((((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((ulong) ((ulong) (__macro_add_with_carry_set_nzcv_common_carryIn)))))) >> (bits)))))) & ((RuntimeValue<ulong>) (0x1))));
					NZCV_VR = (RuntimeValue<bool>) ((((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<uint>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))) == ((RuntimeValue<uint>) ((__macro_add_with_carry_set_nzcv_common_operand2) >> (bits1)))))) & ((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<uint>) ((usum) >> (bits1))) != ((RuntimeValue<uint>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))))))));
					return (usum).Store();
				})()));
		} else {
			XR[(int) rd] = (RuntimeValue<ulong>) (([=]() -> RuntimeValue<ulong> {
					auto __macro_add_with_carry_set_nzcv_common_operand1 = ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]())))).Store();
					auto __macro_add_with_carry_set_nzcv_common_operand2 = ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (~((RuntimeValue<ulong>) (([=](auto temp_853) -> RuntimeValue<ulong> { switch(temp_853) { case 0x0: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())))) << (imm))); case 0x1: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())) >> (imm))); case 0x2: return (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<long>) (((RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())))) >> (imm))))); default: return (RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())) << ((RuntimeValue<uint>) (64 - (imm)))) | (((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())) >> ((RuntimeValue<uint>) (imm)))); } })(shift))))))).Store();
					auto __macro_add_with_carry_set_nzcv_common_carryIn = (ulong) ((ulong) (0x1));
					auto bits = (int) (64);
					auto bits1 = (long) (((long) (int) (bits)) - ((long) (long) (0x1)));
					auto usum = ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_operand1)) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_operand2))))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_carryIn)))).Store();
					auto ssum = ((RuntimeValue<long>) (((RuntimeValue<long>) (RuntimeValue<long>) ((RuntimeValue<long>) (((RuntimeValue<long>) (RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<long>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((RuntimeValue<long>) (RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<long>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((RuntimeValue<long>) (RuntimeValue<long>) ((long) ((long) (__macro_add_with_carry_set_nzcv_common_carryIn)))))).Store();
					NZCV_NR = (RuntimeValue<ulong>) ((usum) >> (bits1));
					NZCV_ZR = (RuntimeValue<bool>) ((usum) == (0x0));
					NZCV_CR = (RuntimeValue<uint>) ((((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<UInt128>) (((RuntimeValue<UInt128>) (((RuntimeValue<UInt128>) (RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) (((RuntimeValue<UInt128>) (RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((RuntimeValue<UInt128>) (RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((RuntimeValue<UInt128>) (RuntimeValue<UInt128>) ((UInt128) ((UInt128) (__macro_add_with_carry_set_nzcv_common_carryIn)))))) >> (bits)))))) & ((RuntimeValue<ulong>) (0x1))));
					NZCV_VR = (RuntimeValue<bool>) ((((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<ulong>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))) == ((RuntimeValue<ulong>) ((__macro_add_with_carry_set_nzcv_common_operand2) >> (bits1)))))) & ((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<ulong>) ((usum) >> (bits1))) != ((RuntimeValue<ulong>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))))))));
					return (usum).Store();
				})());
		}
		return true;
	}
unimplemented:
	return false;
}

/* SUBS-immediate */
bool Recompiler::SUBS_immediate(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto shift = (inst >> 22) & 0x1U;
		auto imm = (inst >> 10) & 0xFFFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto shiftstr = (string) (([=](auto temp_854) -> string { switch(temp_854) { case 0x0: return string("LSL #0"); case 0x1: return string("LSL #12"); default: throw "Not implemented"; } })(shift));
		auto rimm = (uint) ((shift != 0) ? ((uint) (((uint) ((uint) (imm))) << (uint) (0xC))) : (imm));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (([=]() -> RuntimeValue<uint> {
					auto __macro_add_with_carry_set_nzcv_common_operand1 = ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((rn) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rn]()))))).Store();
					auto __macro_add_with_carry_set_nzcv_common_operand2 = (uint) ((uint) ((uint) (~((uint) ((uint) (rimm))))));
					auto __macro_add_with_carry_set_nzcv_common_carryIn = (uint) ((uint) (0x1));
					auto bits = (int) (32);
					auto bits1 = (long) (((long) (int) (bits)) - ((long) (long) (0x1)));
					auto usum = ((RuntimeValue<uint>) (((RuntimeValue<uint>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (((RuntimeValue<uint>) (RuntimeValue<uint>) (__macro_add_with_carry_set_nzcv_common_operand1)) + ((RuntimeValue<uint>) (RuntimeValue<uint>) (__macro_add_with_carry_set_nzcv_common_operand2))))) + ((RuntimeValue<uint>) (RuntimeValue<uint>) (__macro_add_with_carry_set_nzcv_common_carryIn)))).Store();
					auto ssum = ((RuntimeValue<int>) (((RuntimeValue<int>) (RuntimeValue<int>) ((RuntimeValue<int>) (((RuntimeValue<int>) (RuntimeValue<int>) ((RuntimeValue<int>) ((RuntimeValue<int>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((RuntimeValue<int>) (RuntimeValue<int>) ((int) ((int) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((RuntimeValue<int>) (RuntimeValue<int>) ((int) ((int) (__macro_add_with_carry_set_nzcv_common_carryIn)))))).Store();
					NZCV_NR = (RuntimeValue<uint>) ((usum) >> (bits1));
					NZCV_ZR = (RuntimeValue<bool>) ((usum) == (0x0));
					NZCV_CR = (RuntimeValue<uint>) ((((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((ulong) ((ulong) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((ulong) ((ulong) (__macro_add_with_carry_set_nzcv_common_carryIn)))))) >> (bits)))))) & ((RuntimeValue<ulong>) (0x1))));
					NZCV_VR = (RuntimeValue<bool>) ((((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<uint>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))) == ((uint) ((__macro_add_with_carry_set_nzcv_common_operand2) >> (uint) (bits1)))))) & ((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<uint>) ((usum) >> (bits1))) != ((RuntimeValue<uint>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))))))));
					return (usum).Store();
				})()));
		} else {
			XR[(int) rd] = (RuntimeValue<ulong>) (([=]() -> RuntimeValue<ulong> {
					auto __macro_add_with_carry_set_nzcv_common_operand1 = ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]())))).Store();
					auto __macro_add_with_carry_set_nzcv_common_operand2 = (ulong) ((ulong) ((ulong) (~((ulong) ((ulong) (rimm))))));
					auto __macro_add_with_carry_set_nzcv_common_carryIn = (ulong) ((ulong) (0x1));
					auto bits = (int) (64);
					auto bits1 = (long) (((long) (int) (bits)) - ((long) (long) (0x1)));
					auto usum = ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_operand1)) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_operand2))))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) (__macro_add_with_carry_set_nzcv_common_carryIn)))).Store();
					auto ssum = ((RuntimeValue<long>) (((RuntimeValue<long>) (RuntimeValue<long>) ((RuntimeValue<long>) (((RuntimeValue<long>) (RuntimeValue<long>) ((RuntimeValue<long>) ((RuntimeValue<long>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((RuntimeValue<long>) (RuntimeValue<long>) ((long) ((long) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((RuntimeValue<long>) (RuntimeValue<long>) ((long) ((long) (__macro_add_with_carry_set_nzcv_common_carryIn)))))).Store();
					NZCV_NR = (RuntimeValue<ulong>) ((usum) >> (bits1));
					NZCV_ZR = (RuntimeValue<bool>) ((usum) == (0x0));
					NZCV_CR = (RuntimeValue<uint>) ((((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<UInt128>) (((RuntimeValue<UInt128>) (((RuntimeValue<UInt128>) (RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) (((RuntimeValue<UInt128>) (RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((RuntimeValue<UInt128>) (RuntimeValue<UInt128>) ((UInt128) ((UInt128) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((RuntimeValue<UInt128>) (RuntimeValue<UInt128>) ((UInt128) ((UInt128) (__macro_add_with_carry_set_nzcv_common_carryIn)))))) >> (bits)))))) & ((RuntimeValue<ulong>) (0x1))));
					NZCV_VR = (RuntimeValue<bool>) ((((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<ulong>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))) == ((ulong) ((__macro_add_with_carry_set_nzcv_common_operand2) >> (uint) (bits1)))))) & ((RuntimeValue<bool>) ((RuntimeValue<bool>) (((RuntimeValue<ulong>) ((usum) >> (bits1))) != ((RuntimeValue<ulong>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))))))));
					return (usum).Store();
				})());
		}
		return true;
	}
unimplemented:
	return false;
}

/* SVC */
bool Recompiler::SVC(uint inst, ulong pc) {
	{
		auto imm = (inst >> 5) & 0xFFFFU;
		CallSvc(imm);
		return true;
	}
unimplemented:
	return false;
}

/* SYS */
bool Recompiler::SYS(uint inst, ulong pc) {
	{
		auto op1 = (inst >> 16) & 0x7U;
		auto cn = (inst >> 12) & 0xFU;
		auto cm = (inst >> 8) & 0xFU;
		auto op2 = (inst >> 5) & 0x7U;
		auto rt = (inst >> 0) & 0x1FU;
		return true;
	}
unimplemented:
	return false;
}

/* TBZ */
bool Recompiler::TBZ(uint inst, ulong pc) {
	{
		auto upper = (inst >> 31) & 0x1U;
		auto bottom = (inst >> 19) & 0x1FU;
		auto offset = (inst >> 5) & 0x3FFFU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((upper) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto imm = (uint) ((((uint) ((uint) (((uint) ((uint) (upper))) << (uint) (0x5)))) | ((uint) ((uint) ((uint) (bottom))))));
		auto addr = (ulong) (((ulong) (ulong) ((ulong) (pc))) + ((ulong) (long) ((long) (SignExt<long>((ushort) (((ushort) ((ushort) (offset))) << (uint) (0x2)), 16)))));
		LabelTag temp_855 = DefineLabel(), temp_857 = DefineLabel(), temp_856 = DefineLabel();
		BranchIf((RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((rt) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rt]())) >> (imm)))) & ((RuntimeValue<ulong>) (0x1)))), temp_855, temp_857);
		Label(temp_855);
		Branch(pc + 4);
		Branch(temp_856);
		Label(temp_857);
		Branch(addr);
		Branch(temp_856);
		Label(temp_856);
		return true;
	}
unimplemented:
	return false;
}

/* TBNZ */
bool Recompiler::TBNZ(uint inst, ulong pc) {
	{
		auto upper = (inst >> 31) & 0x1U;
		auto bottom = (inst >> 19) & 0x1FU;
		auto offset = (inst >> 5) & 0x3FFFU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((upper) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto imm = (uint) ((((uint) ((uint) (((uint) ((uint) (upper))) << (uint) (0x5)))) | ((uint) ((uint) ((uint) (bottom))))));
		auto addr = (ulong) (((ulong) (ulong) ((ulong) (pc))) + ((ulong) (long) ((long) (SignExt<long>((ushort) (((ushort) ((ushort) (offset))) << (uint) (0x2)), 16)))));
		LabelTag temp_858 = DefineLabel(), temp_860 = DefineLabel(), temp_859 = DefineLabel();
		BranchIf((RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((rt) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rt]())) >> (imm)))) & ((RuntimeValue<ulong>) (0x1)))), temp_858, temp_860);
		Label(temp_858);
		Branch(addr);
		Branch(temp_859);
		Label(temp_860);
		Branch(pc + 4);
		Branch(temp_859);
		Label(temp_859);
		return true;
	}
unimplemented:
	return false;
}

/* UADDLV */
bool Recompiler::UADDLV(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 22) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_861) -> string { switch(temp_861) { case 0x0: return string("H"); case 0x1: return string("S"); case 0x2: return string("D"); default: throw "Not implemented"; } })(size));
		auto t = (string) (([=](auto temp_862) -> string { switch(temp_862) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x5: return string("4S"); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))));
		auto esize = (long) ((0x8) << (uint) (size));
		auto count = (long) (((long) (long) ((long) ((Q != 0) ? (0x80) : (0x40)))) / ((long) (long) (esize)));
		switch(size) {
			case 0x0: {
				VHR[(int) (rd)] = (RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((RuntimeValue<uint>) (Call<ulong, Vector128<float>, long, long>(VectorSumUnsigned, (RuntimeValue<Vector128<float>>) (VR[(int) (rn)]), esize, count))));
				break;
			}
			case 0x1: {
				VSR[(int) (rd)] = (RuntimeValue<float>) (((RuntimeValue<uint>) (Call<ulong, Vector128<float>, long, long>(VectorSumUnsigned, (RuntimeValue<Vector128<float>>) (VR[(int) (rn)]), esize, count))).Bitcast<float>());
				break;
			}
			case 0x2: {
				VDR[(int) (rd)] = (RuntimeValue<double>) (((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<uint>) (Call<ulong, Vector128<float>, long, long>(VectorSumUnsigned, (RuntimeValue<Vector128<float>>) (VR[(int) (rn)]), esize, count))))).Bitcast<double>());
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* UADDW[2] */
bool Recompiler::UADDW_2_(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto o2 = (string) ((Q != 0) ? (string("2")) : (string("")));
		auto Ta = string("");
		auto Tb = string("");
		switch((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))) {
			case 0x0: {
				Ta = string("8H");
				Tb = string("8B");
				break;
			}
			case 0x1: {
				Ta = string("8H");
				Tb = string("16B");
				break;
			}
			case 0x2: {
				Ta = string("4S");
				Tb = string("4H");
				break;
			}
			case 0x3: {
				Ta = string("4S");
				Tb = string("8H");
				break;
			}
			case 0x4: {
				Ta = string("2D");
				Tb = string("2S");
				break;
			}
			case 0x5: {
				Ta = string("2D");
				Tb = string("4S");
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		auto a = ((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Store();
		auto b = ((RuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Store();
		switch(size) {
			case 0x0: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimeValue<ushort>) (RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((a).Element<ushort>(0x0)))) + ((RuntimeValue<ushort>) (RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((RuntimeValue<byte>) ((b).Element<byte>((long) ((Q != 0) ? ((long) (0x8)) : (0x0))))))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimeValue<ushort>) (RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((a).Element<ushort>(0x1)))) + ((RuntimeValue<ushort>) (RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((RuntimeValue<byte>) ((b).Element<byte>((long) ((Q != 0) ? ((long) (0x9)) : (0x1))))))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimeValue<ushort>) (RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((a).Element<ushort>(0x2)))) + ((RuntimeValue<ushort>) (RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((RuntimeValue<byte>) ((b).Element<byte>((long) ((Q != 0) ? ((long) (0xA)) : (0x2))))))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimeValue<ushort>) (RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((a).Element<ushort>(0x3)))) + ((RuntimeValue<ushort>) (RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((RuntimeValue<byte>) ((b).Element<byte>((long) ((Q != 0) ? ((long) (0xB)) : (0x3))))))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x4, (RuntimeValue<ushort>) (((RuntimeValue<ushort>) (RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((a).Element<ushort>(0x4)))) + ((RuntimeValue<ushort>) (RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((RuntimeValue<byte>) ((b).Element<byte>((long) ((Q != 0) ? ((long) (0xC)) : (0x4))))))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x5, (RuntimeValue<ushort>) (((RuntimeValue<ushort>) (RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((a).Element<ushort>(0x5)))) + ((RuntimeValue<ushort>) (RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((RuntimeValue<byte>) ((b).Element<byte>((long) ((Q != 0) ? ((long) (0xD)) : (0x5))))))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x6, (RuntimeValue<ushort>) (((RuntimeValue<ushort>) (RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((a).Element<ushort>(0x6)))) + ((RuntimeValue<ushort>) (RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((RuntimeValue<byte>) ((b).Element<byte>((long) ((Q != 0) ? ((long) (0xE)) : (0x6))))))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x7, (RuntimeValue<ushort>) (((RuntimeValue<ushort>) (RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((a).Element<ushort>(0x7)))) + ((RuntimeValue<ushort>) (RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((RuntimeValue<byte>) ((b).Element<byte>((long) ((Q != 0) ? ((long) (0xF)) : (0x7))))))))));
				break;
			}
			case 0x1: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<uint>) (((RuntimeValue<uint>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((a).Element<uint>(0x0)))) + ((RuntimeValue<uint>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<ushort>) ((b).Element<ushort>((long) ((Q != 0) ? ((long) (0x4)) : (0x0))))))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<uint>) (((RuntimeValue<uint>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((a).Element<uint>(0x1)))) + ((RuntimeValue<uint>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<ushort>) ((b).Element<ushort>((long) ((Q != 0) ? ((long) (0x5)) : (0x1))))))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (RuntimeValue<uint>) (((RuntimeValue<uint>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((a).Element<uint>(0x2)))) + ((RuntimeValue<uint>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<ushort>) ((b).Element<ushort>((long) ((Q != 0) ? ((long) (0x6)) : (0x2))))))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (RuntimeValue<uint>) (((RuntimeValue<uint>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((a).Element<uint>(0x3)))) + ((RuntimeValue<uint>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<ushort>) ((b).Element<ushort>((long) ((Q != 0) ? ((long) (0x7)) : (0x3))))))))));
				break;
			}
			case 0x2: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((a).Element<ulong>(0x0)))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((b).Element<uint>((long) ((Q != 0) ? ((long) (0x2)) : (0x0))))))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((a).Element<ulong>(0x1)))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((b).Element<uint>((long) ((Q != 0) ? ((long) (0x3)) : (0x1))))))))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* UBFM */
bool Recompiler::UBFM(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto N = (inst >> 22) & 0x1U;
		auto immr = (inst >> 16) & 0x3FU;
		auto imms = (inst >> 10) & 0x3FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			auto src = ((RuntimeValue<uint>) ((rn) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rn]()))).Store();
			auto wmask = (uint) ((uint) ((ulong) (MakeWMask(N, imms, immr, 0x20, 0x0))));
			auto tmask = (uint) ((uint) ((ulong) (MakeTMask(N, imms, immr, 0x20, 0x0))));
			auto bot = ((RuntimeValue<uint>) ((((RuntimeValue<uint>) ((RuntimeValue<uint>) (((src) << ((RuntimeValue<uint>) (32 - (immr)))) | ((src) >> ((RuntimeValue<uint>) (immr)))))) & ((RuntimeValue<uint>) (wmask))))).Store();
			XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((((RuntimeValue<uint>) (bot)) & ((RuntimeValue<uint>) (tmask)))));
		} else {
			auto src = ((RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]())).Store();
			auto wmask = (ulong) (MakeWMask(N, imms, immr, 0x40, 0x0));
			auto tmask = (ulong) (MakeTMask(N, imms, immr, 0x40, 0x0));
			auto bot = ((RuntimeValue<ulong>) ((((RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((src) << ((RuntimeValue<uint>) (64 - (immr)))) | ((src) >> ((RuntimeValue<uint>) (immr)))))) & ((RuntimeValue<ulong>) (wmask))))).Store();
			XR[(int) rd] = (RuntimeValue<ulong>) ((((RuntimeValue<ulong>) (bot)) & ((RuntimeValue<ulong>) (tmask))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* UCVTF-scalar-gpr-integer */
bool Recompiler::UCVTF_scalar_gpr_integer(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto type = (inst >> 22) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto st = (byte) ((byte) (((byte) (((byte) (type)) << 0)) | ((byte) (((byte) (size)) << 2))));
		auto r1 = string("");
		auto r2 = string("");
		switch(st) {
			case 0x3: {
				r1 = string("H");
				r2 = string("W");
				break;
			}
			case 0x0: {
				r1 = string("S");
				r2 = string("W");
				break;
			}
			case 0x1: {
				r1 = string("D");
				r2 = string("W");
				break;
			}
			case 0x7: {
				r1 = string("H");
				r2 = string("X");
				break;
			}
			case 0x4: {
				r1 = string("S");
				r2 = string("X");
				break;
			}
			case 0x5: {
				r1 = string("D");
				r2 = string("X");
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		switch(st) {
			case 0x0: {
				VSR[(int) (rd)] = (RuntimeValue<float>) ((RuntimeValue<float>) ((RuntimeValue<uint>) ((rn) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rn]()))));
				break;
			}
			case 0x1: {
				VDR[(int) (rd)] = (RuntimeValue<double>) ((RuntimeValue<double>) ((RuntimeValue<uint>) ((rn) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rn]()))));
				break;
			}
			case 0x4: {
				VSR[(int) (rd)] = (RuntimeValue<float>) ((RuntimeValue<float>) ((RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]())));
				break;
			}
			case 0x5: {
				VDR[(int) (rd)] = (RuntimeValue<double>) ((RuntimeValue<double>) ((RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]())));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* UCVTF-scalar-integer */
bool Recompiler::UCVTF_scalar_integer(uint inst, ulong pc) {
	{
		auto size = (inst >> 22) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("S")) : (string("D")));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			VSR[(int) (rd)] = (RuntimeValue<float>) ((RuntimeValue<float>) ((RuntimeValue<uint>) (((RuntimeValue<float>) (VSR[(int) (rn)])).Bitcast<uint>())));
		} else {
			VDR[(int) (rd)] = (RuntimeValue<double>) ((RuntimeValue<double>) ((RuntimeValue<ulong>) (((RuntimeValue<double>) (VDR[(int) (rn)])).Bitcast<ulong>())));
		}
		return true;
	}
unimplemented:
	return false;
}

/* UCVTF-vector */
bool Recompiler::UCVTF_vector(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 22) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto t = (string) (([=](auto temp_863) -> string { switch(temp_863) { case 0x0: return string("2S"); case 0x1: return string("4S"); case 0x3: return string("2D"); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))));
		auto n = ((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Store();
		VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<byte>) ((byte) ((byte) (0x0)))).CreateVector());
		switch((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))) {
			case 0x0: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<float>) ((RuntimeValue<float>) ((RuntimeValue<uint>) ((n).Element<uint>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<float>) ((RuntimeValue<float>) ((RuntimeValue<uint>) ((n).Element<uint>(0x1)))));
				break;
			}
			case 0x1: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<float>) ((RuntimeValue<float>) ((RuntimeValue<uint>) ((n).Element<uint>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<float>) ((RuntimeValue<float>) ((RuntimeValue<uint>) ((n).Element<uint>(0x1)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (RuntimeValue<float>) ((RuntimeValue<float>) ((RuntimeValue<uint>) ((n).Element<uint>(0x2)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (RuntimeValue<float>) ((RuntimeValue<float>) ((RuntimeValue<uint>) ((n).Element<uint>(0x3)))));
				break;
			}
			case 0x3: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<double>) ((RuntimeValue<double>) ((RuntimeValue<ulong>) ((n).Element<ulong>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<double>) ((RuntimeValue<double>) ((RuntimeValue<ulong>) ((n).Element<ulong>(0x1)))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* UDIV */
bool Recompiler::UDIV(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			auto operand2 = ((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))).Store();
			XR[(int) rd] = (RuntimeValue<ulong>) (RuntimeValue<uint>) ((RuntimeValue<uint>) (Ternary<bool, uint>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((operand2) == (0x0))), (uint) ((uint) (0x0)), (RuntimeValue<uint>) (((RuntimeValue<uint>) (RuntimeValue<uint>) ((RuntimeValue<uint>) ((rn) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rn]())))) / ((RuntimeValue<uint>) (RuntimeValue<uint>) (operand2))))));
		} else {
			auto operand2 = ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]())).Store();
			XR[(int) rd] = (RuntimeValue<ulong>) (Ternary<bool, ulong>((RuntimeValue<bool>) ((RuntimeValue<bool>) ((operand2) == (0x0))), (ulong) ((ulong) (0x0)), (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]()))) / ((RuntimeValue<ulong>) (RuntimeValue<ulong>) (operand2)))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* UMADDL */
bool Recompiler::UMADDL(uint inst, ulong pc) {
	{
		auto rm = (inst >> 16) & 0x1FU;
		auto ra = (inst >> 10) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		XR[(int) rd] = (RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((ra) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) ra]()))) + ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) (((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((rn) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rn]())))))) * ((RuntimeValue<ulong>) (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((rm) == 31 ? (RuntimeValue<uint>) 0U : (RuntimeValue<uint>) (XR[(int) rm]()))))))))));
		return true;
	}
unimplemented:
	return false;
}

/* UMULH */
bool Recompiler::UMULH(uint inst, ulong pc) {
	{
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		XR[(int) rd] = (RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<UInt128>) (((RuntimeValue<UInt128>) (((RuntimeValue<UInt128>) (RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) ((RuntimeValue<ulong>) ((rn) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rn]()))))) * ((RuntimeValue<UInt128>) (RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) ((RuntimeValue<UInt128>) ((RuntimeValue<ulong>) ((rm) == 31 ? (RuntimeValue<ulong>) 0UL : XR[(int) rm]()))))))) >> (0x40))));
		return true;
	}
unimplemented:
	return false;
}

/* USHL-vector */
bool Recompiler::USHL_vector(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto t = (string) (([=](auto temp_864) -> string { switch(temp_864) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))));
		auto n = ((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Store();
		auto m = ((RuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Store();
		VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<byte>) ((byte) ((byte) (0x0)))).CreateVector());
		switch((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))) {
			case 0x0: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimeValue<byte>) ((n).Element<byte>(0x0))) << ((RuntimeValue<byte>) ((m).Element<byte>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimeValue<byte>) ((n).Element<byte>(0x1))) << ((RuntimeValue<byte>) ((m).Element<byte>(0x1)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimeValue<byte>) ((n).Element<byte>(0x2))) << ((RuntimeValue<byte>) ((m).Element<byte>(0x2)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimeValue<byte>) ((n).Element<byte>(0x3))) << ((RuntimeValue<byte>) ((m).Element<byte>(0x3)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimeValue<byte>) ((n).Element<byte>(0x4))) << ((RuntimeValue<byte>) ((m).Element<byte>(0x4)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimeValue<byte>) ((n).Element<byte>(0x5))) << ((RuntimeValue<byte>) ((m).Element<byte>(0x5)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimeValue<byte>) ((n).Element<byte>(0x6))) << ((RuntimeValue<byte>) ((m).Element<byte>(0x6)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimeValue<byte>) ((n).Element<byte>(0x7))) << ((RuntimeValue<byte>) ((m).Element<byte>(0x7)))));
				break;
			}
			case 0x1: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<byte>) (((RuntimeValue<byte>) ((n).Element<byte>(0x0))) << ((RuntimeValue<byte>) ((m).Element<byte>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<byte>) (((RuntimeValue<byte>) ((n).Element<byte>(0x1))) << ((RuntimeValue<byte>) ((m).Element<byte>(0x1)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (RuntimeValue<byte>) (((RuntimeValue<byte>) ((n).Element<byte>(0x2))) << ((RuntimeValue<byte>) ((m).Element<byte>(0x2)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (RuntimeValue<byte>) (((RuntimeValue<byte>) ((n).Element<byte>(0x3))) << ((RuntimeValue<byte>) ((m).Element<byte>(0x3)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x4, (RuntimeValue<byte>) (((RuntimeValue<byte>) ((n).Element<byte>(0x4))) << ((RuntimeValue<byte>) ((m).Element<byte>(0x4)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x5, (RuntimeValue<byte>) (((RuntimeValue<byte>) ((n).Element<byte>(0x5))) << ((RuntimeValue<byte>) ((m).Element<byte>(0x5)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x6, (RuntimeValue<byte>) (((RuntimeValue<byte>) ((n).Element<byte>(0x6))) << ((RuntimeValue<byte>) ((m).Element<byte>(0x6)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x7, (RuntimeValue<byte>) (((RuntimeValue<byte>) ((n).Element<byte>(0x7))) << ((RuntimeValue<byte>) ((m).Element<byte>(0x7)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x8, (RuntimeValue<byte>) (((RuntimeValue<byte>) ((n).Element<byte>(0x8))) << ((RuntimeValue<byte>) ((m).Element<byte>(0x8)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x9, (RuntimeValue<byte>) (((RuntimeValue<byte>) ((n).Element<byte>(0x9))) << ((RuntimeValue<byte>) ((m).Element<byte>(0x9)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xA, (RuntimeValue<byte>) (((RuntimeValue<byte>) ((n).Element<byte>(0xA))) << ((RuntimeValue<byte>) ((m).Element<byte>(0xA)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xB, (RuntimeValue<byte>) (((RuntimeValue<byte>) ((n).Element<byte>(0xB))) << ((RuntimeValue<byte>) ((m).Element<byte>(0xB)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xC, (RuntimeValue<byte>) (((RuntimeValue<byte>) ((n).Element<byte>(0xC))) << ((RuntimeValue<byte>) ((m).Element<byte>(0xC)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xD, (RuntimeValue<byte>) (((RuntimeValue<byte>) ((n).Element<byte>(0xD))) << ((RuntimeValue<byte>) ((m).Element<byte>(0xD)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xE, (RuntimeValue<byte>) (((RuntimeValue<byte>) ((n).Element<byte>(0xE))) << ((RuntimeValue<byte>) ((m).Element<byte>(0xE)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xF, (RuntimeValue<byte>) (((RuntimeValue<byte>) ((n).Element<byte>(0xF))) << ((RuntimeValue<byte>) ((m).Element<byte>(0xF)))));
				break;
			}
			case 0x2: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimeValue<ushort>) ((n).Element<ushort>(0x0))) << ((RuntimeValue<ushort>) ((m).Element<ushort>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimeValue<ushort>) ((n).Element<ushort>(0x1))) << ((RuntimeValue<ushort>) ((m).Element<ushort>(0x1)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimeValue<ushort>) ((n).Element<ushort>(0x2))) << ((RuntimeValue<ushort>) ((m).Element<ushort>(0x2)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimeValue<ushort>) ((n).Element<ushort>(0x3))) << ((RuntimeValue<ushort>) ((m).Element<ushort>(0x3)))));
				break;
			}
			case 0x3: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimeValue<ushort>) ((n).Element<ushort>(0x0))) << ((RuntimeValue<ushort>) ((m).Element<ushort>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimeValue<ushort>) ((n).Element<ushort>(0x1))) << ((RuntimeValue<ushort>) ((m).Element<ushort>(0x1)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimeValue<ushort>) ((n).Element<ushort>(0x2))) << ((RuntimeValue<ushort>) ((m).Element<ushort>(0x2)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimeValue<ushort>) ((n).Element<ushort>(0x3))) << ((RuntimeValue<ushort>) ((m).Element<ushort>(0x3)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x4, (RuntimeValue<ushort>) (((RuntimeValue<ushort>) ((n).Element<ushort>(0x4))) << ((RuntimeValue<ushort>) ((m).Element<ushort>(0x4)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x5, (RuntimeValue<ushort>) (((RuntimeValue<ushort>) ((n).Element<ushort>(0x5))) << ((RuntimeValue<ushort>) ((m).Element<ushort>(0x5)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x6, (RuntimeValue<ushort>) (((RuntimeValue<ushort>) ((n).Element<ushort>(0x6))) << ((RuntimeValue<ushort>) ((m).Element<ushort>(0x6)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x7, (RuntimeValue<ushort>) (((RuntimeValue<ushort>) ((n).Element<ushort>(0x7))) << ((RuntimeValue<ushort>) ((m).Element<ushort>(0x7)))));
				break;
			}
			case 0x4: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<uint>) (((RuntimeValue<uint>) ((n).Element<uint>(0x0))) << ((RuntimeValue<uint>) ((m).Element<uint>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<uint>) (((RuntimeValue<uint>) ((n).Element<uint>(0x1))) << ((RuntimeValue<uint>) ((m).Element<uint>(0x1)))));
				break;
			}
			case 0x5: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<uint>) (((RuntimeValue<uint>) ((n).Element<uint>(0x0))) << ((RuntimeValue<uint>) ((m).Element<uint>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<uint>) (((RuntimeValue<uint>) ((n).Element<uint>(0x1))) << ((RuntimeValue<uint>) ((m).Element<uint>(0x1)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (RuntimeValue<uint>) (((RuntimeValue<uint>) ((n).Element<uint>(0x2))) << ((RuntimeValue<uint>) ((m).Element<uint>(0x2)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (RuntimeValue<uint>) (((RuntimeValue<uint>) ((n).Element<uint>(0x3))) << ((RuntimeValue<uint>) ((m).Element<uint>(0x3)))));
				break;
			}
			case 0x7: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((n).Element<ulong>(0x0))) << ((RuntimeValue<ulong>) ((m).Element<ulong>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((n).Element<ulong>(0x1))) << ((RuntimeValue<ulong>) ((m).Element<ulong>(0x1)))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* USHLL-vector */
bool Recompiler::USHLL_vector(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto immh = (inst >> 19) & 0xFU;
		auto immb = (inst >> 16) & 0x7U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto Ta = string("");
		auto Tb = string("");
		auto size = 0x0;
		auto shift = 0x0;
		if(!((bool) (((immh) != (0x0)) ? 1U : 0U)))
			goto unimplemented;
		auto i2 = (string) ((Q != 0) ? (string("2")) : (string("")));
		if(((bool) (((immh) == (0x1)) ? 1U : 0U)) != 0) {
			Ta = string("8H");
			Tb = (string) ((Q != 0) ? (string("16B")) : (string("8B")));
			size = 0x0;
			shift = (ulong) (((ulong) (uint) ((uint) ((uint) ((byte) ((byte) (((byte) (((byte) (immb)) << 0)) | ((byte) (((byte) (immh)) << 3)))))))) - ((ulong) (long) (0x8)));
		} else {
			if(((bool) ((((byte) ((((ulong) (immh)) & ((ulong) (0xE))))) == (0x2)) ? 1U : 0U)) != 0) {
				Ta = string("4S");
				Tb = (string) ((Q != 0) ? (string("8H")) : (string("4H")));
				size = 0x1;
				shift = (ulong) (((ulong) (uint) ((uint) ((uint) ((byte) ((byte) (((byte) (((byte) (immb)) << 0)) | ((byte) (((byte) (immh)) << 3)))))))) - ((ulong) (long) (0x10)));
			} else {
				if(((bool) ((((byte) ((((ulong) (immh)) & ((ulong) (0xC))))) == (0x4)) ? 1U : 0U)) != 0) {
					Ta = string("2D");
					Tb = (string) ((Q != 0) ? (string("4S")) : (string("2S")));
					size = 0x2;
					shift = (ulong) (((ulong) (uint) ((uint) ((uint) ((byte) ((byte) (((byte) (((byte) (immb)) << 0)) | ((byte) (((byte) (immh)) << 3)))))))) - ((ulong) (long) (0x20)));
				} else {
					throw "Not implemented";
				}
			}
		}
		auto n = ((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Store();
		VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<byte>) ((byte) ((byte) (0x0)))).CreateVector());
		switch((UInt128) ((UInt128) (((UInt128) (((UInt128) (Q)) << 0)) | ((UInt128) (((UInt128) (size)) << 1))))) {
			case 0x0: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((RuntimeValue<byte>) ((n).Element<byte>(0x0))))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((RuntimeValue<byte>) ((n).Element<byte>(0x1))))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((RuntimeValue<byte>) ((n).Element<byte>(0x2))))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((RuntimeValue<byte>) ((n).Element<byte>(0x3))))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x4, (RuntimeValue<ushort>) (((RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((RuntimeValue<byte>) ((n).Element<byte>(0x4))))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x5, (RuntimeValue<ushort>) (((RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((RuntimeValue<byte>) ((n).Element<byte>(0x5))))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x6, (RuntimeValue<ushort>) (((RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((RuntimeValue<byte>) ((n).Element<byte>(0x6))))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x7, (RuntimeValue<ushort>) (((RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((RuntimeValue<byte>) ((n).Element<byte>(0x7))))) << (shift)));
				break;
			}
			case 0x1: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<ushort>) (((RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((RuntimeValue<byte>) ((n).Element<byte>(0x8))))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<ushort>) (((RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((RuntimeValue<byte>) ((n).Element<byte>(0x9))))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (RuntimeValue<ushort>) (((RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((RuntimeValue<byte>) ((n).Element<byte>(0xA))))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (RuntimeValue<ushort>) (((RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((RuntimeValue<byte>) ((n).Element<byte>(0xB))))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x4, (RuntimeValue<ushort>) (((RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((RuntimeValue<byte>) ((n).Element<byte>(0xC))))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x5, (RuntimeValue<ushort>) (((RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((RuntimeValue<byte>) ((n).Element<byte>(0xD))))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x6, (RuntimeValue<ushort>) (((RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((RuntimeValue<byte>) ((n).Element<byte>(0xE))))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x7, (RuntimeValue<ushort>) (((RuntimeValue<ushort>) ((RuntimeValue<ushort>) ((RuntimeValue<byte>) ((n).Element<byte>(0xF))))) << (shift)));
				break;
			}
			case 0x2: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<uint>) (((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<ushort>) ((n).Element<ushort>(0x0))))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<uint>) (((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<ushort>) ((n).Element<ushort>(0x1))))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (RuntimeValue<uint>) (((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<ushort>) ((n).Element<ushort>(0x2))))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (RuntimeValue<uint>) (((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<ushort>) ((n).Element<ushort>(0x3))))) << (shift)));
				break;
			}
			case 0x3: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<uint>) (((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<ushort>) ((n).Element<ushort>(0x4))))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<uint>) (((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<ushort>) ((n).Element<ushort>(0x5))))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (RuntimeValue<uint>) (((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<ushort>) ((n).Element<ushort>(0x6))))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (RuntimeValue<uint>) (((RuntimeValue<uint>) ((RuntimeValue<uint>) ((RuntimeValue<ushort>) ((n).Element<ushort>(0x7))))) << (shift)));
				break;
			}
			case 0x4: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((n).Element<uint>(0x0))))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((n).Element<uint>(0x1))))) << (shift)));
				break;
			}
			case 0x5: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((n).Element<uint>(0x2))))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<ulong>) (((RuntimeValue<ulong>) ((RuntimeValue<ulong>) ((RuntimeValue<uint>) ((n).Element<uint>(0x3))))) << (shift)));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* XTN */
bool Recompiler::XTN(uint inst, ulong pc) {
	{
		auto size = (inst >> 22) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto tb = (string) (([=](auto temp_865) -> string { switch(temp_865) { case 0x0: return string("8B"); case 0x1: return string("4H"); case 0x2: return string("2S"); default: throw "Not implemented"; } })(size));
		auto ta = (string) (([=](auto temp_866) -> string { switch(temp_866) { case 0x0: return string("8H"); case 0x1: return string("4S"); case 0x2: return string("2D"); default: throw "Not implemented"; } })(size));
		switch(size) {
			case 0x0: {
				auto a = ((RuntimeValue<ushort>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<ushort>(0x0))).Store();
				auto b = ((RuntimeValue<ushort>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<ushort>(0x1))).Store();
				auto c = ((RuntimeValue<ushort>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<ushort>(0x2))).Store();
				auto d = ((RuntimeValue<ushort>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<ushort>(0x3))).Store();
				VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<ulong>) ((ulong) ((ulong) (0x0)))).CreateVector());
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<byte>) ((RuntimeValue<byte>) (a)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<byte>) ((RuntimeValue<byte>) (b)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (RuntimeValue<byte>) ((RuntimeValue<byte>) (c)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (RuntimeValue<byte>) ((RuntimeValue<byte>) (d)));
				break;
			}
			case 0x1: {
				auto a = ((RuntimeValue<uint>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint>(0x0))).Store();
				auto b = ((RuntimeValue<uint>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint>(0x1))).Store();
				VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<ulong>) ((ulong) ((ulong) (0x0)))).CreateVector());
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<ushort>) ((RuntimeValue<ushort>) (a)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<ushort>) ((RuntimeValue<ushort>) (b)));
				break;
			}
			case 0x2: {
				auto a = ((RuntimeValue<ulong>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<ulong>(0x0))).Store();
				VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<ulong>) ((ulong) ((ulong) (0x0)))).CreateVector());
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<uint>) ((RuntimeValue<uint>) (a)));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* XTN2 */
bool Recompiler::XTN2(uint inst, ulong pc) {
	{
		auto size = (inst >> 22) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto tb = (string) (([=](auto temp_867) -> string { switch(temp_867) { case 0x0: return string("16B"); case 0x1: return string("8H"); case 0x2: return string("4S"); default: throw "Not implemented"; } })(size));
		auto ta = (string) (([=](auto temp_868) -> string { switch(temp_868) { case 0x0: return string("8H"); case 0x1: return string("4S"); case 0x2: return string("2D"); default: throw "Not implemented"; } })(size));
		switch(size) {
			case 0x0: {
				auto a = ((RuntimeValue<ushort>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<ushort>(0x0))).Store();
				auto b = ((RuntimeValue<ushort>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<ushort>(0x1))).Store();
				auto c = ((RuntimeValue<ushort>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<ushort>(0x2))).Store();
				auto d = ((RuntimeValue<ushort>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<ushort>(0x3))).Store();
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x8, (RuntimeValue<byte>) ((RuntimeValue<byte>) (a)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x9, (RuntimeValue<byte>) ((RuntimeValue<byte>) (b)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xA, (RuntimeValue<byte>) ((RuntimeValue<byte>) (c)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xB, (RuntimeValue<byte>) ((RuntimeValue<byte>) (d)));
				break;
			}
			case 0x1: {
				auto a = ((RuntimeValue<uint>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint>(0x0))).Store();
				auto b = ((RuntimeValue<uint>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint>(0x1))).Store();
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x4, (RuntimeValue<ushort>) ((RuntimeValue<ushort>) (a)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x5, (RuntimeValue<ushort>) ((RuntimeValue<ushort>) (b)));
				break;
			}
			case 0x2: {
				auto a = ((RuntimeValue<ulong>) (((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<ulong>(0x0))).Store();
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (RuntimeValue<uint>) ((RuntimeValue<uint>) (a)));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* ZIP */
bool Recompiler::ZIP(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto op = (inst >> 14) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto i = (byte) ((byte) ((ulong) (((ulong) (bool) (op)) + ((ulong) (long) (0x1)))));
		auto T = (string) (([=](auto temp_869) -> string { switch(temp_869) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((byte) ((byte) (((byte) (((byte) (Q)) << 0)) | ((byte) (((byte) (size)) << 1))))));
		auto av = ((RuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Store();
		auto bv = ((RuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Store();
		VR[(int) (rd)] = (RuntimeValue<Vector128<float>>) (((RuntimeValue<byte>) ((byte) ((byte) (0x0)))).CreateVector());
		auto base = (ulong) (((ulong) (uint) ((uint) ((uint) (op)))) * ((ulong) (long) ((long) (((long) (long) ((long) (((long) (long) ((long) ((Q != 0) ? (0x80) : (0x40)))) / ((long) (long) ((long) ((0x8) << (uint) (size))))))) / ((long) (long) (0x2))))));
		switch(size) {
			case 0x0: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<byte>) ((av).Element<byte>((ulong) (((ulong) (ulong) (base)) + ((ulong) (long) (0x0))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (RuntimeValue<byte>) ((av).Element<byte>((ulong) (((ulong) (ulong) (base)) + ((ulong) (long) (0x1))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x4, (RuntimeValue<byte>) ((av).Element<byte>((ulong) (((ulong) (ulong) (base)) + ((ulong) (long) (0x2))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x6, (RuntimeValue<byte>) ((av).Element<byte>((ulong) (((ulong) (ulong) (base)) + ((ulong) (long) (0x3))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<byte>) ((bv).Element<byte>((ulong) (((ulong) (ulong) (base)) + ((ulong) (long) (0x0))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (RuntimeValue<byte>) ((bv).Element<byte>((ulong) (((ulong) (ulong) (base)) + ((ulong) (long) (0x1))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x5, (RuntimeValue<byte>) ((bv).Element<byte>((ulong) (((ulong) (ulong) (base)) + ((ulong) (long) (0x2))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x7, (RuntimeValue<byte>) ((bv).Element<byte>((ulong) (((ulong) (ulong) (base)) + ((ulong) (long) (0x3))))));
				if((Q) != 0) {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x8, (RuntimeValue<byte>) ((av).Element<byte>((ulong) (((ulong) (ulong) (base)) + ((ulong) (long) (0x4))))));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xA, (RuntimeValue<byte>) ((av).Element<byte>((ulong) (((ulong) (ulong) (base)) + ((ulong) (long) (0x5))))));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xC, (RuntimeValue<byte>) ((av).Element<byte>((ulong) (((ulong) (ulong) (base)) + ((ulong) (long) (0x6))))));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xE, (RuntimeValue<byte>) ((av).Element<byte>((ulong) (((ulong) (ulong) (base)) + ((ulong) (long) (0x7))))));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x9, (RuntimeValue<byte>) ((bv).Element<byte>((ulong) (((ulong) (ulong) (base)) + ((ulong) (long) (0x4))))));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xB, (RuntimeValue<byte>) ((bv).Element<byte>((ulong) (((ulong) (ulong) (base)) + ((ulong) (long) (0x5))))));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xD, (RuntimeValue<byte>) ((bv).Element<byte>((ulong) (((ulong) (ulong) (base)) + ((ulong) (long) (0x6))))));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xF, (RuntimeValue<byte>) ((bv).Element<byte>((ulong) (((ulong) (ulong) (base)) + ((ulong) (long) (0x7))))));
				}
				break;
			}
			case 0x1: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<ushort>) ((av).Element<ushort>((ulong) (((ulong) (ulong) (base)) + ((ulong) (long) (0x0))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (RuntimeValue<ushort>) ((av).Element<ushort>((ulong) (((ulong) (ulong) (base)) + ((ulong) (long) (0x1))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<ushort>) ((bv).Element<ushort>((ulong) (((ulong) (ulong) (base)) + ((ulong) (long) (0x0))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (RuntimeValue<ushort>) ((bv).Element<ushort>((ulong) (((ulong) (ulong) (base)) + ((ulong) (long) (0x1))))));
				if((Q) != 0) {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x4, (RuntimeValue<ushort>) ((av).Element<ushort>((ulong) (((ulong) (ulong) (base)) + ((ulong) (long) (0x2))))));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x6, (RuntimeValue<ushort>) ((av).Element<ushort>((ulong) (((ulong) (ulong) (base)) + ((ulong) (long) (0x3))))));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x5, (RuntimeValue<ushort>) ((bv).Element<ushort>((ulong) (((ulong) (ulong) (base)) + ((ulong) (long) (0x4))))));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x7, (RuntimeValue<ushort>) ((bv).Element<ushort>((ulong) (((ulong) (ulong) (base)) + ((ulong) (long) (0x5))))));
				}
				break;
			}
			case 0x2: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<uint>) ((av).Element<uint>((ulong) (((ulong) (ulong) (base)) + ((ulong) (long) (0x0))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<uint>) ((bv).Element<uint>((ulong) (((ulong) (ulong) (base)) + ((ulong) (long) (0x0))))));
				if((Q) != 0) {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (RuntimeValue<uint>) ((av).Element<uint>((ulong) (((ulong) (ulong) (base)) + ((ulong) (long) (0x1))))));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (RuntimeValue<uint>) ((bv).Element<uint>((ulong) (((ulong) (ulong) (base)) + ((ulong) (long) (0x1))))));
				}
				break;
			}
			default: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (RuntimeValue<ulong>) ((av).Element<ulong>((ulong) (((ulong) (ulong) (base)) + ((ulong) (long) (0x0))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (RuntimeValue<ulong>) ((bv).Element<ulong>((ulong) (((ulong) (ulong) (base)) + ((ulong) (long) (0x0))))));
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

